{"meta":{"title":"在线分享网","subtitle":"分享，成为你我之间的快乐！","description":"在线分享网是一个专门给程序员服务的博客，不像其它分享视频、图片、音乐的网站，这里主要分享一些技术博客与学习视频，为大家提供便利。","author":"HuiProgramer","url":"https://me.obey.fun"},"pages":[{"title":"友链申请","date":"2019-01-05T06:42:16.000Z","updated":"2019-05-18T08:06:09.313Z","comments":true,"path":"apply/index.html","permalink":"https://me.obey.fun/apply/index.html","excerpt":"","text":"友链申请原则贵站不涉及黄，赌，毒，暴力等一切违法违背道德内容。贵站保持更新状态。本站有权删除长时间打不开的站点。友链提交之后，等待博主审核。审核通过后，本站会以邮件的方式回复您。本站友链信息名称：在线分享网网站：https://www.52share.online介绍：技术分享与学习交流头像：https://ws3.sinaimg.cn/large/006MOU0zgy1g19n0u9anzj30jg0kbabt.jpg申请友链格式名称：xxx网站：xxx.xxx头像：图片地址邮箱：xxx@xx.xx友情申请方式直接下方留言即可 通过右下角的聊天工具联系我 联系邮箱：HuiProgramer@outlook.com document.onreadystatechange=function(){\"complete\"==document.readyState&&wenkmTips.show(\"进入友链申请页面\")}"},{"title":"分类","date":"2018-12-09T12:58:13.000Z","updated":"2018-12-10T09:38:43.328Z","comments":false,"path":"categories/index.html","permalink":"https://me.obey.fun/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-01-05T06:30:13.000Z","updated":"2019-05-09T04:13:53.023Z","comments":false,"path":"links/index.html","permalink":"https://me.obey.fun/links/index.html","excerpt":"","text":"以下链接排名不分先后，感谢您的到来，友链申请 请移步此页面头像名称网站橙色的一亩三分地http://blog.talei.me/周宇峰的博客https://542869246.github.io/爱生活爱技术http://www.xioaxin12.xyz/QuanYi.Chenhttp://blog.chenquanyi.siteYomihttps://xczhello.gitee.io低调小熊猫https://aodeng.cc天堂芝士的个人博客https://www.godcheese.comRyan0up’S Bloghttps://ryanc.cc琅涯阁https://memento.net.cn/Inickhttp://inick.top/博采众长https://lruihao.cndocument.onreadystatechange=function(){\"complete\"==document.readyState&&wenkmTips.show(\"进入友情链接\")}"},{"title":"留言板","date":"2019-04-12T10:49:07.000Z","updated":"2019-05-18T08:06:25.513Z","comments":true,"path":"message/index.html","permalink":"https://me.obey.fun/message/index.html","excerpt":"","text":"功能介绍留言区是本站密切联系用户的重要桥梁，是公众向我站反映问题，提出意见、建议的一个重要渠道，是公众为我站不断升级完善的一个信息交流平台。网友可以通过在线分享网首页左上角的“留言板”专栏实时在线给我留言，本站定会在一个工作日内给您答复。 留言须知不得发表违反中华人民共和国宪法和法律、违反改革开放和四项基本原则的言论；不得发表造谣、诽谤他人的言论；不得发表未经证实的消息，亲身经历请注明；请勿发表任何形式的广告，企业推广产品或服务；本网站拥有发布、编辑、删除网上留言的权利，凡不符合本须知规定的留言将予以删除；留言者承担一切因留言行为而直接或间接引起的法律责任；如在本栏留言，即表明已阅读并接受了上述各项条款。document.onreadystatechange=function(){\"complete\"==document.readyState&&wenkmTips.show(\"进入留言板\")}"},{"title":"文章热度排序","date":"2019-01-15T06:54:12.000Z","updated":"2019-10-28T05:28:50.429Z","comments":false,"path":"topx/index.html","permalink":"https://me.obey.fun/topx/index.html","excerpt":"","text":"document.onreadystatechange=function(){\"complete\"==document.readyState&&wenkmTips.show(\"进入文章热度排序页面\")}AV.initialize(\"TCcAB5wC7Rjx4Xe9aFUYiMUU-gzGzoHsz\",\"pC764tcMRXbraCg5anMgT3QF\")var num=30,time=0,title=\"\",url=\"\",query=new AV.Query(\"Counter\");query.notEqualTo(\"id\",0),query.descending(\"time\"),query.limit(num),query.find().then(function(r){for(var e=0;e"},{"title":"标签","date":"2018-12-09T12:59:59.000Z","updated":"2018-12-10T09:38:43.448Z","comments":false,"path":"tags/index.html","permalink":"https://me.obey.fun/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-12-09T13:00:09.000Z","updated":"2019-05-04T13:41:37.723Z","comments":false,"path":"about/index.html","permalink":"https://me.obey.fun/about/index.html","excerpt":"","text":"基础信息QQ：2101348712 E-Mail：huiprogramer@outlook.comGithub：https://github.com/HuiProgramer坐标：湘潭职业：大学生热衷方向JavaPythonHTML5/CSSJavaScriptC/C++Golang兴趣爱好玩游戏写代码听歌以及各种能让我分泌多巴胺的事情免责声明在线分享网提供的所有内容仅供学习、分享与交流，我们不保证内容的正确性，当您通过使用本站内容随之而来的风险与本站无关，当您使用本站时，代表你已接受本站的免费声明和隐私原则等条款。博客简介在线分享网是一个专门给程序员服务的博客，不像其它分享视频、图片、音乐的网站，这里主要分享一些技术博客与学习视频，为大家提供便利。本站公众号更新日志 [2019/4/12] 更新新增公众号网站部分加载优化取消音乐自动播放新增返回顶部卡通新增留言板 [2019/3/07] 更新新增评分系统修改来必力评论为畅言 [2019/3/04] 更新增加归档，标签，分类统计修改标题和有序、无序列表样式 [2019/3/02] 更新修改列表和标题样式网站正式改名为在线分享网 [2019/2/27] 更新更改友情链接样式手机端不显示粒子效果 [2019/2/25] 更新修改热度排序样式底部增加网站运行时间移除needmoreshare2分享样式修改标签云样式增加动态标题 [2019/1/15] 更新新增页面热度排序 [2019/1/13] 更新新增hexo-neat插件实现静态资源压缩 [2019/1/9] 更新修改404页面新增底部❤跳动动画 [2019/1/8] 更新修改时间轴为彩色修改底部心型为粉色 [2019/1/5] 更新写about页面调整友情链接为推荐阅读新增友情链接页面（解决手机端无法看见友情链接问题）在Coding上备份此博客 [2018/12/29] 更新新增sitemap.xml [2018/12/27] 更新新增一些小部件移除hexo底部显示新增网站访问量和站内字数统计 [2018/12/25] 更新移除学校官网选项（测试自己写的一个网页放在博客里）播放器更换 [2018/12/23] 更新新增友情链接面板（现已改为推荐阅读）新增鼠标放在头像上旋转新增加载文章显示进度条 [2018/12/22] 更新新增网易云播放器插件给每篇文章增加边框 [2018/12/21] 更新移除小播放器部件新增DaoVoice实现博客内部聊天修改点击特效为爆炸效果 [2018/12/20] 更新新增文章分享按钮新增全文结束语句新增小播放器部件新增头像为圆形 [2018/12/19] 更新新增热度显示新增字数统计和阅读时长修改评论系统为来必力 [2018/12/18] 更新新增学校官网页面（大一的一个期末考核）新增RSS订阅新增阅读全文按钮新增动态背景修改看板娘新增本地搜索 [2018/12/17] 更新修改主题为next添加右上角Github猫。 [2018/12/15] 更新新增看板娘新增网站统计和不蒜子访客统计新增代码高亮 [2018/12/11] 更新新增评论功能（valine）新增分类设置新增友链页面 [2018/12/05] 更新新增爱心点击特效添加打赏功能 [2018/11/27] 更新修改主题为snippet. [2018/11/25] 更新搭建博客document.onreadystatechange=function(){\"complete\"==document.readyState&&wenkmTips.show(\"进入关于页面\")}"}],"posts":[{"title":"Mybatis-Plus必知必会","slug":"Mybatis-Plus必知必会","date":"2020-05-03T12:54:29.000Z","updated":"2020-05-30T02:24:41.000Z","comments":true,"path":"Mybatis-Plus必知必会.html","link":"","permalink":"https://me.obey.fun/Mybatis-Plus必知必会.html","excerpt":"","text":"mybatis-plus简介：Mybatis-Plus（简称MP）是一个 Mybatis 的增强工具，在 Mybatis 的基础上只做增强不做改变，为简化开发、提高效率而生。这是官方给的定义，关于mybatis-plus的更多介绍及特性，可以参考mybatis-plus官网。那么它是怎么增强的呢？其实就是它已经封装好了一些crud方法，我们不需要再写xml了，直接调用这些方法就行，就类似于JPA。spring整合mybatis-plus:正如官方所说，mybatis-plus在mybatis的基础上只做增强不做改变，因此其与spring的整合亦非常简单。只需把mybatis的依赖换成mybatis-plus的依赖，再把sqlSessionFactory换成mybatis-plus的即可。接下来看具体操作：1、pom.xml:核心依赖如下：1234567891011121314151617181920212223&lt;!-- spring --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-orm&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;4.3.14.RELEASE&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- mp 依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt;&lt;/dependency&gt;注意：这些是核心依赖，本项目还用到了mysql驱动、c3p0、日志（slf4j-api，slf4j-log4j2）、lombok。集成mybatis-plus要把mybatis、mybatis-spring去掉，避免冲突；lombok是一个工具，添加了这个依赖，开发工具再安装Lombok插件，就可以使用它了，最常用的用法就是在实体类中使用它的@Data注解，这样实体类就不用写set、get、toString等方法了。关于Lombok的更多用法，请自行百度。2、log4j.xml:123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\"&gt;&lt;log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"&gt; &lt;appender name=\"STDOUT\" class=\"org.apache.log4j.ConsoleAppender\"&gt; &lt;param name=\"Encoding\" value=\"UTF-8\" /&gt; &lt;layout class=\"org.apache.log4j.PatternLayout\"&gt; &lt;param name=\"ConversionPattern\" value=\"%-5p %d&#123;MM-ddHH:mm:ss,SSS&#125; %m (%F:%L) \\n\" /&gt; &lt;/layout&gt; &lt;/appender&gt; &lt;logger name=\"java.sql\"&gt; &lt;level value=\"debug\" /&gt; &lt;/logger&gt; &lt;logger name=\"org.apache.ibatis\"&gt; &lt;level value=\"info\" /&gt; &lt;/logger&gt; &lt;root&gt; &lt;level value=\"debug\" /&gt; &lt;appender-ref ref=\"STDOUT\" /&gt; &lt;/root&gt;&lt;/log4j:configuration&gt;3、jdbc.properties:1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///数据库名?useUnicode=true&amp;characterEncoding=utf8jdbc.username=#jdbc.password=#4、mybatis-config.xml:123456&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;&lt;/configuration&gt;注：因为是与spring整合，所有mybatis-plus的大部分都写在spring的配置文件中，这里定义一个空的mybatis-config.xml即可。5、spring-dao.xml:1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jee=\"http://www.springframework.org/schema/jee\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xsi:schemaLocation=\" http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd\"&gt; &lt;!-- 配置整合mybatis-plus过程 --&gt; &lt;!-- 1、配置数据库相关参数properties的属性：$&#123;url&#125; --&gt; &lt;context:property-placeholder location=\"classpath:jdbc.properties\" /&gt; &lt;!-- 2、配置数据库连接池 --&gt; &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"&gt; &lt;property name=\"driverClass\" value=\"$&#123;jdbc.driver&#125;\"/&gt; &lt;property name=\"jdbcUrl\" value=\"$&#123;jdbc.url&#125;\"/&gt; &lt;property name=\"user\" value=\"$&#123;jdbc.username&#125;\"/&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt; &lt;/bean&gt; &lt;!-- mybatis的sqlsessionFactorybean：org.mybatis.spring.SqlSessionFactoryBean--&gt; &lt;!-- 3、配置mybatis-plus的sqlSessionFactory --&gt; &lt;bean id=\"sqlSessionFactory\" class=\"com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.zhu.mybatisplus.entity\"/&gt; &lt;/bean&gt; &lt;!-- 4、DAO接口所在包名，Spring会自动查找其下的类 --&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;property name=\"basePackage\" value=\"com.zhu.mybatisplus.dao\" /&gt; &lt;property name=\"sqlSessionFactoryBeanName\" value=\"sqlSessionFactory\"/&gt; &lt;/bean&gt; &lt;/beans&gt;6、entity:12345678910111213@Data@TableName(value = \"tb_employee\")//指定表名public class Employee &#123; //value与数据库主键列名一致，若实体类属性名与表主键列名一致可省略value @TableId(value = \"id\",type = IdType.AUTO)//指定自增策略 private Integer id; //若没有开启驼峰命名，或者表中列名不符合驼峰规则，可通过该注解指定数据库表中的列名，exist标明数据表中有没有对应列 @TableField(value = \"last_name\",exist = true) private String lastName; private String email; private Integer gender; private Integer age;&#125;7、mapper:12public interface EmplopyeeDao extends BaseMapper&lt;Employee&gt; &#123;&#125;这样就完成了mybatis-plus与spring的整合。首先是把mybatis和mybatis-spring依赖换成mybatis-plus的依赖，然后把sqlsessionfactory换成mybatis-plus的，然后实体类中添加@TableName、@TableId等注解，最后mapper继承BaseMapper即可。8、测试：12345678910@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;\"classpath:spring/spring-dao.xml\"&#125;)public class test &#123; @Autowired private DataSource dataSource; @Test public void testDataSource() throws SQLException &#123; System.out.println(dataSource.getConnection()); &#125;&#125;运行该junit，可输出获取到的连接，说明整合没问题：本文所有代码本人均亲自测试过，本文涉及代码又较多，为了不影响篇幅，故非必要处不再截图。接下来的所有操作都是基于此整合好的项目。mp的通用crud:需求：存在一张 tb_employee 表，且已有对应的实体类 Employee，实现tb_employee 表的 CRUD 操作我们需要做什么呢？基于 Mybatis：需要编写 EmployeeMapper 接口，并在 EmployeeMapper.xml 映射文件中手动编写 CRUD 方法对应的sql语句。基于 MP：只需要创建 EmployeeMapper 接口, 并继承 BaseMapper 接口。我们已经有了Employee、tb_employee了，并且EmployeeDao也继承了BaseMapper了，接下来就使用crud方法。1、insert操作：1234567891011121314151617@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;\"classpath:spring/spring-dao.xml\"&#125;)public class test &#123; @Autowired private EmplopyeeDao emplopyeeDao; @Test public void testInsert()&#123; Employee employee = new Employee(); employee.setLastName(\"东方不败\"); employee.setEmail(\"dfbb@163.com\"); employee.setGender(1); employee.setAge(20); emplopyeeDao.insert(employee); //mybatisplus会自动把当前插入对象在数据库中的id写回到该实体中 System.out.println(employee.getId()); &#125;&#125;执行添加操作，直接调用insert方法传入实体即可。2、update操作：12345678@Testpublic void testUpdate()&#123; Employee employee = new Employee(); employee.setId(1); employee.setLastName(\"更新测试\"); //emplopyeeDao.updateById(employee);//根据id进行更新，没有传值的属性就不会更新 emplopyeeDao.updateAllColumnById(employee);//根据id进行更新，没传值的属性就更新为null&#125;注：注意这两个update操作的区别，updateById方法，没有传值的字段不会进行更新，比如只传入了lastName，那么age、gender等属性就会保留原来的值；updateAllColumnById方法，顾名思义，会更新所有的列，没有传值的列会更新为null。3、select操作：(1)、根据id查询：1Employee employee = emplopyeeDao.selectById(1);(2)、根据条件查询一条数据：12345Employee employeeCondition = new Employee();employeeCondition.setId(1);employeeCondition.setLastName(\"更新测试\");//若是数据库中符合传入的条件的记录有多条，那就不能用这个方法，会报错Employee employee = emplopyeeDao.selectOne(employeeCondition);注：这个方法的sql语句就是where id = 1 and last_name = 更新测试，若是符合这个条件的记录不止一条，那么就会报错。(3)、根据查询条件返回多条数据：当符合指定条件的记录数有多条时，上面那个方法就会报错，就应该用这个方法。12345Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();columnMap.put(\"last_name\",\"东方不败\");//写表中的列名columnMap.put(\"gender\",\"1\");List&lt;Employee&gt; employees = emplopyeeDao.selectByMap(columnMap);System.out.println(employees.size());注：查询条件用map集合封装，columnMap，写的是数据表中的列名，而非实体类的属性名。比如属性名为lastName，数据表中字段为last_name，这里应该写的是last_name。selectByMap方法返回值用list集合接收。(4)、通过id批量查询：123456List&lt;Integer&gt; idList = new ArrayList&lt;&gt;();idList.add(1);idList.add(2);idList.add(3);List&lt;Employee&gt; employees = emplopyeeDao.selectBatchIds(idList);System.out.println(employees);注：把需要查询的id都add到list集合中，然后调用selectBatchIds方法，传入该list集合即可，该方法返回的是对应id的所有记录，所有返回值也是用list接收。(5)、分页查询：12List&lt;Employee&gt; employees = emplopyeeDao.selectPage(new Page&lt;&gt;(1,2),null);System.out.println(employees);注：selectPage方法就是分页查询，在page中传入分页信息，后者为null的分页条件，这里先让其为null，讲了条件构造器再说其用法。这个分页其实并不是物理分页，而是内存分页。也就是说，查询的时候并没有limit语句。等配置了分页插件后才可以实现真正的分页。4、delete操作：(1)、根据id删除：1emplopyeeDao.deleteById(1);(2)、根据条件删除：1234Map&lt;String,Object&gt; columnMap = new HashMap&lt;&gt;();columnMap.put(\"gender\",0);columnMap.put(\"age\",18);emplopyeeDao.deleteByMap(columnMap);注：该方法与selectByMap类似，将条件封装在columnMap中，然后调用deleteByMap方法，传入columnMap即可，返回值是Integer类型，表示影响的行数。(3)、根据id批量删除：1234List&lt;Integer&gt; idList = new ArrayList&lt;&gt;();idList.add(1);idList.add(2);emplopyeeDao.deleteBatchIds(idList);注：该方法和selectBatchIds类似，把需要删除的记录的id装进idList，然后调用deleteBatchIds，传入idList即可。全局策略配置：通过上面的小案例我们可以发现，实体类需要加@TableName注解指定数据库表名，通过@TableId注解指定id的增长策略。实体类少倒也无所谓，实体类一多的话也麻烦。所以可以在spring-dao.xml的文件中进行全局策略配置。123456789&lt;!-- 5、mybatisplus的全局策略配置 --&gt;&lt;bean id=\"globalConfiguration\" class=\"com.baomidou.mybatisplus.entity.GlobalConfiguration\"&gt; &lt;!-- 2.3版本后，驼峰命名默认值就是true，所以可不配置 --&gt; &lt;!--&lt;property name=\"dbColumnUnderline\" value=\"true\"/&gt;--&gt; &lt;!-- 全局主键自增策略，0表示auto --&gt; &lt;property name=\"idType\" value=\"0\"/&gt; &lt;!-- 全局表前缀配置 --&gt; &lt;property name=\"tablePrefix\" value=\"tb_\"/&gt;&lt;/bean&gt;这里配置了还没用，还需要在sqlSessionFactory中注入配置才会生效。如下：12345678&lt;!-- 3、配置mybatisplus的sqlSessionFactory --&gt;&lt;bean id=\"sqlSessionFactory\" class=\"com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.zhu.mybatisplus.entity\"/&gt; &lt;!-- 注入全局配置 --&gt; &lt;property name=\"globalConfig\" ref=\"globalConfiguration\"/&gt;&lt;/bean&gt;如此一来，实体类中的@TableName注解和@TableId注解就可以去掉了。条件构造器(EntityWrapper)：以上基本的 CRUD 操作，我们仅仅需要继承一个 BaseMapper 即可实现大部分单表 CRUD 操作。BaseMapper 提供了多达 17 个方法供使用, 可以极其方便的实现单一、批量、分页等操作，极大的减少开发负担。但是mybatis-plus的强大不限于此，请看如下需求该如何处理：需求：我们需要分页查询 tb_employee 表中，年龄在 18~50 之间性别为男且姓名为 xx 的所有用户，这时候我们该如何实现上述需求呢？使用MyBatis : 需要在 SQL 映射文件中编写带条件查询的 SQL,并用PageHelper 插件完成分页. 实现以上一个简单的需求，往往需要我们做很多重复单调的工作。使用MP: 依旧不用编写 SQL 语句，MP 提供了功能强大的条件构造器 —— EntityWrapper。接下来就直接看几个案例体会EntityWrapper的使用。1、分页查询年龄在18 - 50且gender为0、姓名为tom的用户：123456List&lt;Employee&gt; employees = emplopyeeDao.selectPage(new Page&lt;Employee&gt;(1,3), new EntityWrapper&lt;Employee&gt;() .between(\"age\",18,50) .eq(\"gender\",0) .eq(\"last_name\",\"tom\"));注：由此案例可知，分页查询和之前一样，new 一个page对象传入分页信息即可。至于分页条件，new 一个EntityWrapper对象，调用该对象的相关方法即可。between方法三个参数，分别是column、value1、value2，该方法表示column的值要在value1和value2之间；eq是equals的简写，该方法两个参数，column和value，表示column的值和value要相等。注意column是数据表对应的字段，而非实体类属性字段。2、查询gender为0且名字中带有老师、或者邮箱中带有a的用户：12345678List&lt;Employee&gt; employees = emplopyeeDao.selectList( new EntityWrapper&lt;Employee&gt;() .eq(\"gender\",0) .like(\"last_name\",\"老师\") //.or()//和or new 区别不大 .orNew() .like(\"email\",\"a\"));注：未说分页查询，所以用selectList即可，用EntityWrapper的like方法进行模糊查询，like方法就是指column的值包含value值，此处like方法就是查询last_name中包含“老师”字样的记录；“或者”用or或者orNew方法表示，这两个方法区别不大，用哪个都可以，可以通过控制台的sql语句自行感受其区别。3、查询gender为0，根据age排序，简单分页：123456List&lt;Employee&gt; employees = emplopyeeDao.selectList( new EntityWrapper&lt;Employee&gt;() .eq(\"gender\",0) .orderBy(\"age\")//直接orderby 是升序，asc .last(\"desc limit 1,3\")//在sql语句后面追加last里面的内容(改为降序，同时分页));注：简单分页是指不用page对象进行分页。orderBy方法就是根据传入的column进行升序排序，若要降序，可以使用orderByDesc方法，也可以如案例中所示用last方法；last方法就是将last方法里面的value值追加到sql语句的后面，在该案例中，最后的sql语句就变为select ······ order by desc limit 1, 3，追加了desc limit 1,3所以可以进行降序排序和分页。4、分页查询年龄在18 - 50且gender为0、姓名为tom的用户：条件构造器除了EntityWrapper，还有Condition。用Condition来处理一下这个需求：123456List&lt;Employee&gt; employees = emplopyeeDao.selectPage( new Page&lt;Employee&gt;(1,2), Condition.create() .between(\"age\",18,50) .eq(\"gender\",\"0\"));注：Condition和EntityWrapper的区别就是，创建条件构造器时，EntityWrapper是new出来的，而Condition是调create方法创建出来。5、根据条件更新：123456789101112@Testpublic void testEntityWrapperUpdate()&#123; Employee employee = new Employee(); employee.setLastName(\"苍老师\"); employee.setEmail(\"cjk@sina.com\"); employee.setGender(0); emplopyeeDao.update(employee, new EntityWrapper&lt;Employee&gt;() .eq(\"last_name\",\"tom\") .eq(\"age\",25) );&#125;注：该案例表示把last_name为tom，age为25的所有用户的信息更新为employee中设置的信息。6、根据条件删除：12345emplopyeeDao.delete( new EntityWrapper&lt;Employee&gt;() .eq(\"last_name\",\"tom\") .eq(\"age\",16));注：该案例表示把last_name为tom、age为16的所有用户删除。odel类，重写pkVal方法。2、mapper:12public interface UserDao extends BaseMapper&lt;User&gt; &#123;&#125;注：虽然AR模式用不到该接口，但是一定要定义，否则使用AR时会报空指针异常。ActiveRecord:Active Record(活动记录)，是一种领域模型模式，特点是一个模型类对应关系型数据库中的一个表，而模型类的一个实例对应表中的一行记录。ActiveRecord 一直广受动态语言（ PHP 、 Ruby 等）的喜爱，而 Java 作为准静态语言，对于 ActiveRecord 往往只能感叹其优雅，所以 MP 也在 AR 道路上进行了一定的探索，仅仅需要让实体类继承 Model 类且实现主键指定方法，即可开启 AR 之旅。接下来看具体代码：1、entity:123456789101112@Datapublic class User extends Model&lt;User&gt; &#123; private Integer id; private String name; private Integer age; private Integer gender; //重写这个方法，return当前类的主键 @Override protected Serializable pkVal() &#123; return id; &#125;&#125;注：实体类继承Model类，重写pkVal方法。2、mapper:12public interface UserDao extends BaseMapper&lt;User&gt; &#123;&#125;注：虽然AR模式用不到该接口，但是一定要定义，否则使用AR时会报空指针异常。3、使用AR:(1)、AR插入操作：12345678910111213@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(&#123;\"classpath:spring/spring-dao.xml\"&#125;)public class TestAR &#123; @Test public void testArInsert()&#123; User user = new User(); user.setName(\"林青霞\"); user.setAge(22); user.setGender(1); boolean result = user.insert(); System.out.println(result); &#125;&#125;image.png注：可以看到我们并不需要注入mapper接口，不过正如刚才所说，不使用但还是要定义，否则会报错。AR操作是通过对象本身调用相关方法，比如要insert一个user，那就用这个user调用insert方法即可。返回值为布尔类型，由上图可看到返回了true，是操作成功的。(2)、AR更新操作：12345678@Testpublic void testArUpdate()&#123; User user = new User(); user.setId(1); user.setName(\"刘亦菲\"); boolean result = user.updateById(); System.out.println(result);&#125;注：user调用updateById方法，将id为1的用户进行更新。(3)、AR查询操作：12345678910111213141516171819@Testpublic void testArSelect()&#123; User user = new User(); //1、根据id查询 //user = user.selectById(1); //或者这样用 //user.setId(1); //user = user.selectById(); //2、查询所有 //List&lt;User&gt; users = user.selectAll(); //3、根据条件查询 //List&lt;User&gt; users = user.selectList(new EntityWrapper&lt;User&gt;().like(\"name\",\"刘\")); //4、查询符合条件的总数 int result = user.selectCount(new EntityWrapper&lt;User&gt;().eq(\"gender\",1)); System.out.println(result);&#125;注：上面的代码涉及到了四个不同的查询操作，其实用法与MP的BaseMapper提供的方法的用法差不多，只不过这里是实体对象调用。(4)、AR删除操作：1234567891011121314@Test public void testArDelete()&#123; User user = new User(); //删除数据库中不存在的数据也是返回true //1、根据id删除数据 //boolean result = user.deleteById(1); //或者这样写 //user.setId(1); //boolean result = user.deleteById(); //2、根据条件删除 boolean result = user.delete(new EntityWrapper&lt;User&gt;().like(\"name\",\"玲\")); System.out.println(result); &#125;注：这里介绍了两个删除方法，代码中已有注释说明。需要注意的是，删除数据库中不存在的数据，结果也是true。(5)、AR分页操作：123456789@Test public void testArPage()&#123; User user = new User(); Page&lt;User&gt; page = user.selectPage(new Page&lt;&gt;(1,4), new EntityWrapper&lt;User&gt;().like(\"name\",\"刘\")); List&lt;User&gt; users = page.getRecords(); System.out.println(users); &#125;注：这个分页方法和BaseMapper提供的分页一样都是内存分页，并非物理分页，因为sql语句中没用limit，和BaseMapper的selectPage方法一样，配置了分页插件后就可以实现真正的物理分页。AR的分页方法与BaseMapper提供的分页方法不同的是，BaseMapper的selectPage方法返回值是查询到的记录的list集合，而AR的selectPage方法返回的是page对象，该page对象封装了查询到的信息，可以通过getRecords方法获取信息。插件的配置：MP提供了很多好用的插件，而且配置简单，使用方便。接下来一起看看MP的插件如何使用。1、分页插件：之前就有说到，BaseMapper的selectPage方法和AR提供的selectPage方法都不是物理分页，需要配置分页插件后才是物理分页，那么现在就来看看如何配置这个插件。12345678910111213141516&lt;!-- 3、配置mybatisplus的sqlSessionFactory --&gt; &lt;bean id=\"sqlSessionFactory\" class= \"com.baomidou.mybatisplus.spring.MybatisSqlSessionFactoryBean\"&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;property name=\"configLocation\" value=\"classpath:mybatis-config.xml\"/&gt; &lt;property name=\"typeAliasesPackage\" value=\"com.zhu.mybatisplus.entity\"/&gt; &lt;!-- 注入全局配置 --&gt; &lt;property name=\"globalConfig\" ref=\"globalConfiguration\"/&gt; &lt;!-- 配置插件 --&gt; &lt;property name=\"plugins\"&gt; &lt;list&gt; &lt;!-- 分页插件 --&gt; &lt;bean class=\"com.baomidou.mybatisplus.plugins.PaginationInterceptor\"/&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;注：在sqlSessionFactory这个bean中，通过&lt;property name=&quot;plugins&quot;&gt;配置插件，接下来的所有插件都配置在这个list中。123456789101112131415161718@Test public void testPage() &#123; //配置了分页插件后，还是和以前一样的使用selectpage方法， //但是现在就是真正的物理分页了，sql语句中有limit了 Page&lt;Employee&gt; page = new Page&lt;&gt;(1, 2); List&lt;Employee&gt; employeeList = emplopyeeDao.selectPage(page, null); System.out.println(employeeList); System.out.println(\"================= 相关的分页信息 ==================\"); System.out.println(\"总条数:\" + page.getTotal()); System.out.println(\"当前页码:\" + page.getCurrent()); System.out.println(\"总页数:\" + page.getPages()); System.out.println(\"每页显示条数:\" + page.getSize()); System.out.println(\"是否有上一页:\" + page.hasPrevious()); System.out.println(\"是否有下一页:\" + page.hasNext()); //还可以将查询到的结果set进page对象中 page.setRecords(employeeList); &#125;由图可知，sql语句中已经有了limit，是物理分页了。也可以通过page调用相关方法获取到相关的分页信息，而且还可以把查询到的结果set回page对象中，方便前端使用。2、性能分析插件：在plugin的list中添加如下bean即可开启性能分析插件：123456&lt;!-- 输出每条SQL语句及其执行时间，生产环境不建议使用该插件 --&gt;&lt;bean class=\"com.baomidou.mybatisplus.plugins.PerformanceInterceptor\"&gt; &lt;property name=\"format\" value=\"true\"/&gt;&lt;!-- 格式化SQL语句 --&gt; &lt;property name=\"maxTime\" value=\"1000\"/&gt;&lt;!-- sql执行时间超过value值就会停止执行， 单位是毫秒 --&gt;&lt;/bean&gt;注：这个性能分析插件配置了两个属性，第一个是格式化sql语句，设置为true后，sql语句格式就像上面的截图中的一样；第二个属性是sql语句执行的最大时间，超过value值就会报错，这里表示超过1000毫秒就会停止执行sql语句。3、执行分析插件：1234&lt;!-- 如果是对全表的删除或更新操作，就会终止该操作 --&gt;&lt;bean class=\"com.baomidou.mybatisplus.plugins.SqlExplainInterceptor\"&gt; &lt;property name=\"stopProceed\" value=\"true\"/&gt;&lt;/bean&gt;注：这个插件配置了一个属性，stopProceed设置为true后，如果执行的是删除表中全部内容，那就会抛出异常，终止该操作。该插件主要是防止手抖误删数据。12345@Testpublic void testSqlExplain()&#123; //条件为null，就是删除全表，执行分析插件会终止该操作 emplopyeeDao.delete(null);&#125;运行该junit测试，可以看到报如下错误，说明该插件生效了。MP的逆向工程：MyBatis 的代码生成器基于xml文件进行生成，可生成: 实体类、Mapper 接口、Mapper 映射文件。MP 的代码生成器基于Java代码进行生成，可生成: 实体类(可以选择是否支持 AR)、Mapper 接口、Mapper 映射文件、 Service 层、Controller 层。1、添加依赖：1234567891011121314151617&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.37&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mp 依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.baomidou&lt;/groupId&gt; &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- mybatisplus逆向工程需要模板引擎，用freemaker也行 --&gt;&lt;dependency&gt; &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt; &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt; &lt;version&gt;2.0&lt;/version&gt;&lt;/dependency&gt;注：上面是必须的三个依赖，为了可以在控制台直观的看到生成情况，可以添加日志包(slf4j-api和slf4j-log4j2)，为了让生成的代码不会报错，还可以根据情况添加spring相关的依赖、lombok依赖等。2、生成器示例代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class test &#123; @Test public void testGenerator()&#123; //1、全局配置 GlobalConfig config = new GlobalConfig(); config.setActiveRecord(true)//开启AR模式 .setAuthor(\"zhu\")//设置作者 //生成路径(一般都是生成在此项目的src/main/java下面) .setOutputDir(\"E:\\\\develop\\\\Java\\\\workspace\\\\ideaworkspace\\\\mpg\\\\src\\\\main\\\\java\") .setFileOverride(true)//第二次生成会把第一次生成的覆盖掉 .setIdType(IdType.AUTO)//主键策略 .setServiceName(\"%sService\")//生成的service接口名字首字母是否为I，这样设置就没有I .setBaseResultMap(true)//生成resultMap .setBaseColumnList(true);//在xml中生成基础列 //2、数据源配置 DataSourceConfig dataSourceConfig = new DataSourceConfig(); dataSourceConfig.setDbType(DbType.MYSQL)//数据库类型 .setDriverName(\"com.mysql.jdbc.Driver\") .setUrl(\"jdbc:mysql:///数据库名\") .setUsername(\"数据库用户名\") .setPassword(\"数据库密码\"); //3、策略配置 StrategyConfig strategyConfig = new StrategyConfig(); strategyConfig.setCapitalMode(true)//开启全局大写命名 .setDbColumnUnderline(true)//表名字段名使用下划线 .setNaming(NamingStrategy.underline_to_camel)//下划线到驼峰的命名方式 .setTablePrefix(\"tb_\")//表名前缀 .setEntityLombokModel(true)//使用lombok .setInclude(\"表1\",\"表2\");//逆向工程使用的表 //4、包名策略配置 PackageConfig packageConfig = new PackageConfig(); packageConfig.setParent(\"com.zhu.mpg\")//设置包名的parent .setMapper(\"mapper\") .setService(\"service\") .setController(\"controller\") .setEntity(\"entity\") .setXml(\"mapper\");//设置xml文件的目录 //5、整合配置 AutoGenerator autoGenerator = new AutoGenerator(); autoGenerator.setGlobalConfig(config) .setDataSource(dataSourceConfig) .setStrategy(strategyConfig) .setPackageInfo(packageConfig); //6、执行 autoGenerator.execute(); &#125;&#125;注：以上便是示例代码，只要运行该junit测试，就会生成entity、mapper接口、mapper的xml文件、service、serviceImpl、controller代码。每一个设置代码中均有详细注释，此处不再赘述。自定义全局操作：AutoSqlInjector ：BaseMapper提供了17个常用方法，但是有些需求这些方法还是不能很好的实现，那么怎么办呢？大家肯定会想到是在xml文件中写sql语句解决。这样确实可以，因为MP是只做增强不做改变，我们完全可以按照mybatis的原来的方式来解决。不过MP也提供了另一种解决办法，那就是自定义全局操作。所谓自定义全局操作，也就是我们可以在mapper中自定义一些方法，然后通过某些操作，让自定义的这个方法也能像BaseMapper的内置方法，供全局调用。接下来就看看如何实现(以deleteAll方法为例)。1、在mapper接口中定义方法：123public interface EmplopyeeDao extends BaseMapper&lt;Employee&gt; &#123; int deleteAll();&#125;123public interface UserDao extends BaseMapper&lt;User&gt; &#123; int deleteAll();&#125;在这两个mapper接口中都定义了deleteAll方法。2、编写自定义注入类：123456789101112131415161718public class MySqlInjector extends AutoSqlInjector &#123; @Override public void inject(Configuration configuration, MapperBuilderAssistant builderAssistant, Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo table) &#123; /* 添加一个自定义方法 */ deleteAllUser(mapperClass, modelClass, table); System.out.println(table.getTableName()); &#125; public void deleteAllUser(Class&lt;?&gt; mapperClass, Class&lt;?&gt; modelClass, TableInfo table) &#123; /* 执行 SQL ，动态 SQL 参考类 SqlMethod */ String sql = \"delete from \" + table.getTableName(); /* mapper 接口方法名一致 */ String method = \"deleteAll\"; SqlSource sqlSource = languageDriver.createSqlSource(configuration, sql, modelClass); this.addDeleteMappedStatement(mapperClass, method, sqlSource); &#125;&#125;注：该类继承AutoSqlInjector，重写inject方法。然后编写sql语句，指定mapper接口中的方法，最后调用addDeleteMappedStatement方法即可。3、在spring配置文件中配置：12&lt;!-- 定义自定义注入器 --&gt;&lt;bean class=\"com.zhu.mybatisplus.injector.MySqlInjector\" id=\"mySqlInjector\"/&gt;1234567&lt;!-- 5、mybatisplus的全局策略配置 --&gt; &lt;bean id=\"globalConfiguration\" class=\"com.baomidou.mybatisplus.entity.GlobalConfiguration\"&gt; &lt;property name=\"idType\" value=\"0\"/&gt; &lt;property name=\"tablePrefix\" value=\"tb_\"/&gt; &lt;!-- 注入自定义全局操作 --&gt; &lt;property name=\"sqlInjector\" ref=\"mySqlInjector\"/&gt; &lt;/bean&gt;注：先把刚才自定义的类注册成bean，然后在全局策略配置的bean中引用自定义类的bean即可。4、测试：1234567891011@Testpublic void testMySqlInjector()&#123; Integer result = userDao.deleteAll(); System.out.println(result);&#125;@Testpublic void testMySqlInjector2()&#123; Integer result = emplopyeeDao.deleteAll(); System.out.println(result);&#125;注：经测试，当userDao调用deleteAll方法时，会删除tb_user表的所有数据，employeeDao调用deleteAll方法时，会删除tb_employee表的所有数据。说明deleteAll方法是有效的。不过在运行这两个测试时，由于是全表删除操作，所有要先把执行分析插件关了。逻辑删除：其实数据并不会轻易的删除掉，毕竟数据收集不易，所以就有了逻辑删除。逻辑删除: 并不会真正的从数据库中将数据删除掉，而是将当前被删除的这条数据中的一个逻辑删除字段置为删除状态，比如该数据有一个字段logic_flag，当其值为1表示未删除，值为-1表示删除，那么逻辑删除就是将1变成-1。1、数据表：在数据表中需要添加逻辑删除字段(logic_flag)。2、实体类：123456789@Datapublic class User&#123; private Integer id; private String name; private Integer age; private Integer gender; @TableLogic //标记逻辑删除属性 private Integer logicFlag;&#125;注：数据库中逻辑删除字段是logic_flag，所以实体类中的logicFlag需要用@TableLogic注解标记。3、mapper:12public interface UserDao extends BaseMapper&lt;User&gt; &#123;&#125;4、配置逻辑删除：需要在spring-dao.xml中做如下配置：首先定义逻辑删除的bean：12&lt;!-- 逻辑删除 --&gt;&lt;bean class=\"com.baomidou.mybatisplus.mapper.LogicSqlInjector\" id=\"logicSqlInjector\"/&gt;再在全局配置的bean中注入逻辑删除以及逻辑删除值：1234567891011&lt;!-- 5、mybatisplus的全局策略配置 --&gt; &lt;bean id=\"globalConfiguration\" class=\"com.baomidou.mybatisplus.entity.GlobalConfiguration\"&gt; &lt;!-- 此处省略其他全局配置 --&gt; &lt;!-- 注入自定义全局操作，做逻辑删除时需要先注释掉 --&gt; &lt;!--&lt;property name=\"sqlInjector\" ref=\"mySqlInjector\"/&gt;--&gt; &lt;!-- 注入逻辑删除，先要把自定义的注释掉 --&gt; &lt;property name=\"sqlInjector\" ref=\"logicSqlInjector\"/&gt; &lt;!-- 注入逻辑删除值 --&gt; &lt;property name=\"logicDeleteValue\" value=\"-1\"/&gt;&lt;!-- -1是删除状态 --&gt; &lt;property name=\"logicNotDeleteValue\" value=\"1\"/&gt;&lt;!-- 1是未删除状态 --&gt; &lt;/bean&gt;注：因为逻辑删除实际上也是一个sqlInjector，所以先要把刚才做自定义全局操作时注入的自定义全局操作注释掉，上面代码中已有详细注释说明。6、测试：1234567@Test public void testLogicDelete()&#123; Integer result = userDao.deleteById(1); System.out.println(result); //User user = userDao.selectById(1); //System.out.println(user); &#125;注：运行该测试，执行删除操作的时候，真正执行的sql语句是UPDATE tb_user SET logic_flag=-1 WHERE id=?，就是把逻辑删除字段的值设置为-1；当逻辑删除字段的值是-1时再执行查询操作，sql是SELECT ... FROM tb_user WHERE id=? AND logic_flag=1，所以查询结果是null。公共字段自动填充：我们知道，当我们进行插入或者更新操作时，没有设置值的属性，那么在数据表中要么是为null，要么是保留原来的值。有的时候我们我们没有赋值但是却不想让其为空，比如name属性，我们插入时会默认赋上“林志玲”，更新时会默认赋值上“朱茵”，那么就可以用公共字段自动填充。1、使用@TableField注解标记填充字段12@TableField(fill = FieldFill.INSERT_UPDATE)//插入和更新时填充 private String name;2、编写公共字段填充处理器类：1234567891011121314151617public class MyMetaObjectHandler extends MetaObjectHandler &#123; @Override public void insertFill(MetaObject metaObject) &#123; Object fieldValue = getFieldValByName(\"name\",metaObject); //获取需要填充的字段 if(fieldValue == null)&#123; //如果该字段没有设置值 setFieldValByName(\"name\",\"林志玲\",metaObject); //那就将其设置为\"林志玲\" &#125; &#125; @Override public void updateFill(MetaObject metaObject) &#123; Object fieldValue = getFieldValByName(\"name\",metaObject);//获取需要填充的字段 if(fieldValue == null)&#123; //如果该字段没有设置值 setFieldValByName(\"name\",\"朱茵\",metaObject); //那就将其设置为\"朱茵\" &#125; &#125;&#125;注：该类继承了MetaObjectHandler类，重写了insertFill和updateFill方法，在这两个方法获取需要填充的字段以及默认填充的值。3、在spring-dao.xml中配置：12&lt;!-- 公共字段填充处理器 --&gt;&lt;bean class=\"com.zhu.mybatisplus.handler.MyMetaObjectHandler\" id=\"myMetaObjectHandler\"/&gt;123456&lt;!-- 5、mybatisplus的全局策略配置 --&gt; &lt;bean id=\"globalConfiguration\" class=\"com.baomidou.mybatisplus.entity.GlobalConfiguration\"&gt; &lt;!-- 此处省略其他配置 --&gt; &lt;!-- 注入公共字段填充处理器 --&gt; &lt;property name=\"metaObjectHandler\" ref=\"myMetaObjectHandler\"/&gt; &lt;/bean&gt;注：和配置逻辑删除一样，都是先将自定义的类注册成bean，再在全局策略配置中引用这个bean即可。4、测试：12345678@Testpublic void testHandlerInsert() &#123; User user = new User(); user.setGender(1); user.setAge(22); user.setLogicFlag(1); userDao.insert(user);&#125;注：可以看到，虽然我们并没有给name赋值，但是已经自动把“林志玲”传进去了。更新时也一样有效，此处就不将测试代码贴出来了。","categories":[{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"https://me.obey.fun/categories/Mybatis-Plus/"},{"name":"ORM","slug":"Mybatis-Plus/ORM","permalink":"https://me.obey.fun/categories/Mybatis-Plus/ORM/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","permalink":"https://me.obey.fun/tags/Mybatis/"},{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"https://me.obey.fun/tags/Mybatis-Plus/"}],"keywords":[{"name":"Mybatis-Plus","slug":"Mybatis-Plus","permalink":"https://me.obey.fun/categories/Mybatis-Plus/"},{"name":"ORM","slug":"Mybatis-Plus/ORM","permalink":"https://me.obey.fun/categories/Mybatis-Plus/ORM/"}]},{"title":"SpringCloud简单入门","slug":"SpringCloud简单入门","date":"2020-05-02T13:05:38.000Z","updated":"2020-05-25T04:16:42.000Z","comments":true,"path":"SpringCloud简单入门.html","link":"","permalink":"https://me.obey.fun/SpringCloud简单入门.html","excerpt":"","text":"什么是SpringCloud？SpringCloud，基于SpringBoot提供了一套微服务解决方案，包括服务注册与发现，配置中心，全链路监控，服务网关，负载均衡，熔断器等组件，除了基于NetFlix的开源组件做高度抽象封装之外，还有一些选型中立的开源组件。SpringCloud利用springboot的开发便利性，巧妙的简化了分布式系统基础设施的开发，SpringCloud为开发人员提供了快速构建分布式系统的一些工具，包括配置管理，服务发现，断路器，路由，微代理，事件总线，全局锁，决策竞选，分布式会话等等，他们都可以用springboot的开发风格做到一键启动和部署。SpringCloud和SpringBoot的关系SpringBoot专注于快速方便的开发单个个体微服务SpringCloud是关注全局的微服务协调整理治理框架，它将SpringBoot开的一个个单体服务整合并管理起来，为各个服务之间提供：配置管理，服务发现，断路器，路由，微代理，时间总线，全局锁，决策竞选，分布式会话等等集成服务。SpringBoot可以离开SpringCloud独立使用，开发项目，SpringCloud关注全度的服务治理框架Dubbo和Spring Cloud对比解决的问题域不一样：Dubbo的定位是一款RPC框架，Spring Cloud的目的是微服务架构下的一站式解决方案SpringCloud初体验创建父工程创建普通maven项目，因为是父项目，所以把src目录删除掉pom文件导入所需依赖12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;artifactId&gt;ksspringcloud&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;modules&gt; &lt;module&gt;springcloud-api&lt;/module&gt; &lt;module&gt;springcloud-provider-dept-8001&lt;/module&gt; &lt;module&gt;springcloud-consumer-dept-80&lt;/module&gt; &lt;module&gt;springcloud-eureka-7001&lt;/module&gt; &lt;/modules&gt; &lt;!--打包方式 pom--&gt; &lt;packaging&gt;pom&lt;/packaging&gt; &lt;!--提取版本--&gt; &lt;properties&gt; &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt; &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt; &lt;junit.version&gt;4.12&lt;/junit.version&gt; &lt;lombok.version&gt;1.18.12&lt;/lombok.version&gt; &lt;log4j.version&gt;1.2.17&lt;/log4j.version&gt; &lt;logback.version&gt;1.2.3&lt;/logback.version&gt; &lt;mysql.version&gt;5.1.47&lt;/mysql.version&gt; &lt;druid.version&gt;1.1.14&lt;/druid.version&gt; &lt;/properties&gt; &lt;!--总的依赖管理--&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--SpringCloud的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Hoxton.SR3&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--SpringBoot的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.6.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;!--数据库--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--数据源--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;$&#123;druid.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;!--SpringBoot启动器--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.2&lt;/version&gt; &lt;/dependency&gt; &lt;!--日志和测试--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;$&#123;logback.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;$&#123;junit.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;version&gt;$&#123;lombok.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt;&lt;/project&gt;创建公共实体类api​ (管理pojo)，创建普通maven模块添加子工程所需依赖1234567&lt;!--当前的module自己需要的依赖，如果父依赖种已经配置了版本，这里就不用写版本号--&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;创建数据库右键root@localhost—&gt;创建数据库数据库：XXXXXX基字符集：utf8数据库排序规则：utf8_general_ci创建表格​ -Database-&gt;选中数据库–右键–new–Table往数据库插入数据创建实体类(所有实体类务必实现序列化)12345678910111213141516171819202122/** * 所有实体类务必实现序列化 */@Data@NoArgsConstructor@Accessors(chain = true) //链式写法public class Dept implements Serializable &#123; private Long deptno; //主键 private String deptname;//部门名称 //这个数据是存在哪个数据库的字段，微服务，一个服务对应一个数据库，同一个信息可能存在不同的数据库中 private String db_source; public Dept(String deptname) &#123; this.deptname = deptname; &#125; /** * 链式写法：可以连续写 * Dept dept = new Dept(); * dept.setDeptno(11).setDeptname(\"开发部\").set…… */&#125;这个微服务到此结束，此微服务只负责pojo创建服务的提供者模块springcloud-provider-dept-8001添加子服务依赖1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;springcloud&lt;/artifactId&gt; &lt;groupId&gt;com.kuang&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springcloud-provider-dept-8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--我们需要拿到实体类，所以要配置咱们的api module--&gt; &lt;dependency&gt; &lt;groupId&gt;com.kuang&lt;/groupId&gt; &lt;artifactId&gt;springcloud-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!--测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--数据库--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--数据源--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--jetty--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;application.yml配置文件1234567891011121314151617server: port: 8001spring: application: name: springcloud-provider-dept datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver #org.gjt.mm.mysql.Driver或者com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/scdb01?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true username: root password: 123456mybatis: type-aliases-package: cn.kgc.pojo config-location: classpath:mybatis/mybatis-config.xml mapper-locations: classpath:mybatis/mapper/*.xmlmybatis-config.xml配置123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;settings&gt; &lt;!--开启二级缓存--&gt; &lt;setting name=\"cacheEnabled\" value=\"true\"/&gt; &lt;/settings&gt;&lt;/configuration&gt;创建部门的dao接口：DeptDao123456789101112131415161718192021222324252627package cn.kgc.dao;import cn.kgc.pojo.Dept;import org.apache.ibatis.annotations.Mapper;import org.springframework.stereotype.Repository;import java.util.List;@Mapper@Repositorypublic interface DeptDao &#123; /** * 增加一个部门 */ public boolean addDept(Dept dept); /** * id查询部门 */ public Dept queryById(Integer id); /** * 查询所有部门 */ public List&lt;Dept&gt; queryAll();&#125;对应mapper文件(DeptMapper.xml)12345678910111213141516&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"cn.kgc.dao.DeptDao\"&gt; &lt;insert id=\"addDept\" parameterType=\"Dept\"&gt; insert into dept(deptName,db_source) values (#&#123;deptName&#125;,DATABASE()); &lt;/insert&gt; &lt;select id=\"queryById\" resultType=\"Dept\" parameterType=\"Integer\"&gt; select * from dept where deptNo = #&#123;deptNo&#125;; &lt;/select&gt; &lt;select id=\"queryAll\" resultType=\"Dept\"&gt; select * from dept; &lt;/select&gt;&lt;/mapper&gt;service层代码1234567891011121314151617181920212223242526package cn.kgc.service;import cn.kgc.pojo.Dept;import java.util.List;/** * @author Rock * @create 2020-06-16 16:09 */public interface DeptService &#123; /** * 增加一个部门 */ public boolean addDept(Dept dept); /** * id查询部门 */ public Dept queryById(Integer id); /** * 查询所有部门 */ public List&lt;Dept&gt; queryAll();&#125;123456789101112131415161718192021222324252627282930package cn.kgc.service;import cn.kgc.dao.DeptDao;import cn.kgc.pojo.Dept;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class DeptServiceImpl implements DeptService &#123; @Autowired private DeptDao deptDao; @Override public boolean addDept(Dept dept) &#123; return deptDao.addDept(dept); &#125; @Override public Dept queryById(Integer id) &#123; return deptDao.queryById(id); &#125; @Override public List&lt;Dept&gt; queryAll() &#123; return deptDao.queryAll(); &#125;&#125;控制器1234567891011121314151617181920212223/** * //提供RestFul服务 */@RestControllerpublic class DeptController &#123; @Autowired private DeptService deptService; @PostMapping(\"/dept/add\") public boolean addDept(@RequestBody Dept dept)&#123; return deptService.addDept(dept); &#125; @GetMapping(\"/dept/get/&#123;id&#125;\") public Dept get(@PathVariable(\"id\") Integer id)&#123; return deptService.queryById(id); &#125; @GetMapping(\"/dept/list\") public List&lt;Dept&gt; queryAll()&#123; return deptService.queryAll(); &#125;&#125;创建启动器123456789/** * 启动类 */@SpringBootApplicationpublic class DeptProvider8001Main &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptProvider8001Main.class,args); &#125;&#125;启动项目测试12http://localhost:8001/dept/get/11http://localhost:8001/dept/list创建服务的消费者模块​ springcloud-consumer-dept-80pom依赖1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;ksspringcloud&lt;/artifactId&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springcloud-consumer-dept-80&lt;/artifactId&gt; &lt;!--实体类+web--&gt; &lt;dependencies&gt; &lt;!--我们需要拿到实体类，所以要配置咱们的api module--&gt; &lt;dependency&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;artifactId&gt;springcloud-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;application.yml配置12server: port: 80注册RestTemplate(config目录内创建类ConfigBean)12345678@Configurationpublic class ConfigBean &#123; @Bean public RestTemplate getRestTemplate()&#123; return new RestTemplate(); &#125;&#125;控制器1234567891011121314151617181920212223242526272829303132333435package cn.kgc.controller;import cn.kgc.pojo.Dept;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.client.RestTemplate;import java.util.List;@RestControllerpublic class DeptConsumerController &#123; @Autowired private RestTemplate restTemplate; //提供多种便捷访问远程HTTP服务的方法，简单的RestFul服务模板 private static final String REST_URL_PREFIX = \"http://localhost:8001\"; @RequestMapping(\"/consumer/dept/add\") public Boolean add(Dept dept)&#123; return restTemplate.postForObject(REST_URL_PREFIX+\"/dept/add\",dept,boolean.class); &#125; @RequestMapping(\"/consumer/dept/get/&#123;id&#125;\") public Dept get(@PathVariable(\"id\") Integer id)&#123; return restTemplate.getForObject(REST_URL_PREFIX+\"/dept/get/\"+id,Dept.class); &#125; @RequestMapping(\"/consumer/dept/list\") public List&lt;Dept&gt; list()&#123; return restTemplate.getForObject(REST_URL_PREFIX+\"/dept/list\",List.class); &#125;&#125;启动类123456@SpringBootApplicationpublic class DeptConsumer80 &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptConsumer80.class,args); &#125;&#125;启动两个子项目测试123http://localhost/consumer/dept/get/12http://localhost/consumer/dept/listhttp://localhost/consumer/dept/add?deptName=225Eureka注册中心的使用什么是EurekaNetflix在涉及Eureka时，遵循的就是API原则.Eureka是Netflix的一个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.原理理解Eureka基本的架构Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.Eureka 包含两个组件：Eureka Server 和 Eureka Client.Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).三大角色Eureka Server：提供服务的注册与发现Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到服务方创建module，springcloud-eureka-7001导入依赖123456789101112131415161718192021222324252627282930&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;ksspringcloud&lt;/artifactId&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springcloud-eureka-7001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--eureka-server--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--热部署工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;配置application.yml123456789101112server: port: 7001eureka: instance: hostname: localhost # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/写启动类1234567@SpringBootApplication@EnableEurekaServer //注解：服务端的启动类，可以接受其他服务注册进来public class EurekaServer_7001 &#123; public static void main(String[] args) &#123; SpringApplication.run(EurekaServer_7001.class,args); &#125;&#125;启动项目测试1http://localhost:7001将服务提供者8001注册进Eureka中8001的pom加入Eureka依赖1234567891011&lt;!--Eureka--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt; &lt;!--完善监控信息--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;&lt;/dependency&gt;application.yml添加Eureka配置信息123456789101112#Eureka的配置，服务注册到哪里eureka: client: service-url: defaultZone: http://localhost:7001/eureka/ instance: instance-id: springboot-provader-dept8001 #修改Eureka上的默认描述信息 #info配置,监控里点击项目名可查看项目详情，开发公司，开发人等等自定义添加info: app-name: kuangshen-springcloud company.name: blog.kuangstudy.com启动类开启注解支持@EnableEurekaClient1234567@SpringBootApplication@EnableEurekaClient //在服务启动后自动注册到eureka中public class DeptProvider8001Main &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptProvider8001Main.class,args); &#125;&#125;启动7001和8001进行测试1234http://localhost:7001/成功发现服务点击 UP (1) - springboot-provader-dept8001会返回 &#123;\"app-name\":\"kuangshen-springcloud\",\"company\":&#123;\"name\":\"blog.kuangstudy.com\"&#125;&#125;Eureka自我保护机制，好死不如赖活着一句话总结就是：某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（默认是90秒），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），当一分钟内收到的心跳数大量减少时，会触发该保护机制。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：eureka.server.enable-self-preservation=falseEureka集群配置新建两个module分别为springcloud-eureka-7002、springcloud-eureka-7003，并把eureka依赖和热部署依赖导进pom文件，配置主启动类配置系统中的localsC:\\Windows\\System32\\drivers\\etc\\hosts最底部添加123127.0.0.1 eureka7001.com127.0.0.1 eureka7002.com127.0.0.1 eureka7003.com关联三个注册中心(每个这侧中心挂载其他两个)1234567891011121314server: port: 7001eureka: instance: hostname: eureka7001.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 单击-设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7002和7003 defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/1234567891011121314server: port: 7002eureka: instance: hostname: eureka7002.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7001和7003 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7003.com:7003/eureka/1234567891011121314server: port: 7003eureka: instance: hostname: eureka7003.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 # defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7001和7002 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/启动三个eureka服务中心和8001服务，可以看到成功挂载其他两个中心以及可发现8001服务12345678910111213141516171819访问http://eureka7002.com:7001 DS Replicas eureka7003.com eureka7002.com Application AMIs Availability Zones StatusSPRINGCLOUD-PROVIDER-DEPT n/a (1) (1) UP (1) - springboot-provader-dept8001访问http://eureka7002.com:7002 DS Replicas eureka7003.com eureka7001.com Application AMIs Availability Zones StatusSPRINGCLOUD-PROVIDER-DEPT n/a (1) (1) UP (1) - springboot-provader-dept8001访问http://eureka7002.com:7003 DS Replicas eureka7002.com eureka7001.com Application AMIs Availability Zones StatusSPRINGCLOUD-PROVIDER-DEPT n/a (1) (1) UP (1) - springboot-provader-dept8001如果其中一个崩了，其他两个还正常运行，这时服务不会 停止Eureka对比ZookeeperACID是什么？A (Atomicity) 原子性C (Consistency) 一致性I (Isolation) 隔离性D (Durability) 持久性CAP是什么?C (Consistency) 强一致性A (Availability) 可用性P (Partition tolerance) 分区容错性CAP的三进二：CA、AP、CPCAP理论的核心一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求根据CAP原理，将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类CA：单点集群，满足一致性，可用性的系统，通常可扩展性较差CP：满足一致性，分区容错的系统，通常性能不是特别高AP：满足可用性，分区容错的系统，通常可能对一致性要求低一些作为分布式服务注册中心，Eureka比Zookeeper好在哪里？著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性) 、A (可用性) 、P (容错性)，由于分区容错性P再分布式系统中是必须要保证的，因此我们只能再A和C之间进行权衡。Zookeeper保证的是CP当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接收服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。但zookeeper会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举leader的时间太长，30-120s，且选举期间整个zookeeper集群是不可用的，这就导致在选举期间注册服务瘫痪。在云部署的环境下，因为网络问题使得zookeeper集群失去master节点是较大概率发生的事件，虽然服务最终能够恢复，但是，漫长的选举时间导致注册长期不可用，是不可容忍的。Eureka保证的是APEureka看明白了这一点，因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在，就能保住注册服务的可用性，只不过查到的信息可能不是最新的，除此之外，Eureka还有之中自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况：Eureka不在从注册列表中移除因为长时间没收到心跳而应该过期的服务Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上 (即保证当前节点依然可用)当网络稳定时，当前实例新的注册信息会被同步到其他节点中因此，Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像zookeeper那样使整个注册服务瘫痪Eureka 注册中心刚开始看到Eureka这个单词的时候真心不会念，查了后发现他有一个好听的名字，来，大家一起念 [jʊ’rikə]简介Eureka本身是Netflix开源的一款提供服务注册和发现的产品，并且提供了相应的Java封装。在它的实现中，节点之间相互平等，部分注册中心的节点挂掉也不会对集群造成影响，即使集群只剩一个节点存活，也可以正常提供发现服务。哪怕是所有的服务注册节点都挂了，Eureka Clients（客户端）上也会缓存服务调用的信息。这就保证了我们微服务之间的互相调用足够健壮。Zookeeper主要为大型分布式计算提供开源的分布式配置服务、同步服务和命名注册。曾经是Hadoop项目中的一个子项目，用来控制集群中的数据，目前已升级为独立的顶级项目。很多场景下也用它作为Service发现服务解决方案。对比在分布式系统中有个著名的CAP定理（C-数据一致性；A-服务可用性；P-服务对网络分区故障的容错性，这三个特性在任何分布式系统中不能同时满足，最多同时满足两个）；ZookeeperZookeeper是基于CP来设计的，即任何时刻对Zookeeper的访问请求能得到一致的数据结果，同时系统对网络分割具备容错性，但是它不能保证每次服务请求的可用性。从实际情况来分析，在使用Zookeeper获取服务列表时，如果zookeeper正在选主，或者Zookeeper集群中半数以上机器不可用，那么将无法获得数据。所以说，Zookeeper不能保证服务可用性。诚然，在大多数分布式环境中，尤其是涉及到数据存储的场景，数据一致性应该是首先被保证的，这也是zookeeper设计成CP的原因。但是对于服务发现场景来说，情况就不太一样了：针对同一个服务，即使注册中心的不同节点保存的服务提供者信息不尽相同，也并不会造成灾难性的后果。因为对于服务消费者来说，能消费才是最重要的——拿到可能不正确的服务实例信息后尝试消费一下，也好过因为无法获取实例信息而不去消费。（尝试一下可以快速失败，之后可以更新配置并重试）所以，对于服务发现而言，可用性比数据一致性更加重要——AP胜过CP。Eureka而Spring Cloud Netflix在设计Eureka时遵守的就是AP原则。Eureka Server也可以运行多个实例来构建集群，解决单点问题，但不同于ZooKeeper的选举leader的过程，Eureka Server采用的是Peer to Peer对等通信。这是一种去中心化的架构，无master/slave区分，每一个Peer都是对等的。在这种架构中，节点通过彼此互相注册来提高可用性，每个节点需要添加一个或多个有效的serviceUrl指向其他节点。每个节点都可被视为其他节点的副本。如果某台Eureka Server宕机，Eureka Client的请求会自动切换到新的Eureka Server节点，当宕机的服务器重新恢复后，Eureka会再次将其纳入到服务器集群管理之中。当节点开始接受客户端请求时，所有的操作都会进行replicateToPeer（节点间复制）操作，将请求复制到其他Eureka Server当前所知的所有节点中。一个新的Eureka Server节点启动后，会首先尝试从邻近节点获取所有实例注册表信息，完成初始化。Eureka Server通过getEurekaServiceUrls()方法获取所有的节点，并且会通过心跳续约的方式定期更新。默认配置下，如果Eureka Server在一定时间内没有接收到某个服务实例的心跳，Eureka Server将会注销该实例（默认为90秒，通过eureka.instance.lease-expiration-duration-in-seconds配置）。当Eureka Server节点在短时间内丢失过多的心跳时（比如发生了网络分区故障），那么这个节点就会进入自我保护模式。什么是自我保护模式？默认配置下，如果Eureka Server每分钟收到心跳续约的数量低于一个阈值（instance的数量(60/每个instance的心跳间隔秒数)自我保护系数），并且持续15分钟，就会触发自我保护。在自我保护模式中，Eureka Server会保护服务注册表中的信息，不再注销任何服务实例。当它收到的心跳数重新恢复到阈值以上时，该Eureka Server节点就会自动退出自我保护模式。它的设计哲学前面提到过，那就是宁可保留错误的服务注册信息，也不盲目注销任何可能健康的服务实例。该模式可以通过eureka.server.enable-self-preservation = false来禁用，同时eureka.instance.lease-renewal-interval-in-seconds可以用来更改心跳间隔，eureka.server.renewal-percent-threshold可以用来修改自我保护系数（默认0.85）。总结ZooKeeper基于CP，不保证高可用，如果zookeeper正在选主，或者Zookeeper集群中半数以上机器不可用，那么将无法获得数据。Eureka基于AP，能保证高可用，即使所有机器都挂了，也能拿到本地缓存的数据。作为注册中心，其实配置是不经常变动的，只有发版和机器出故障时会变。对于不经常变动的配置来说，CP是不合适的，而AP在遇到问题时可以用牺牲一致性来保证可用性，既返回旧数据，缓存数据。所以理论上Eureka是更适合作注册中心。而现实环境中大部分项目可能会使用ZooKeeper，那是因为集群不够大，并且基本不会遇到用做注册中心的机器一半以上都挂了的情况。所以实际上也没什么大问题。Ribbon：负载均衡(基于客户端)负载均衡以及RibbonRibbon是什么？Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套客户端负载均衡的工具。简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法！Ribbon能干嘛？LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。常见的负载均衡软件有 Nginx、Lvs 等等。Dubbo、SpringCloud 中均给我们提供了负载均衡，SpringCloud 的负载均衡算法可以自定义。负载均衡简单分类：集中式LB即在服务的提供方和消费方之间使用独立的LB设施，如Nginx，由该设施负责把访问请求通过某种策略转发至服务的提供方！进程式LB将LB逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器。Ribbon 就属于进程内LB，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址！集成Ribbon1、springcloud-consumer-dept-80**向pom.xml中添加Ribbon和Eureka依赖123456789101112&lt;!--Ribbon--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;2、在application.yml文件中配置Eureka123456# Eureka配置eureka: client: register-with-eureka: false # 不向 Eureka注册自己 service-url: # 从三个注册中心中随机取一个去访问 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/3、主启动类加上@EnableEurekaClient注解，开启Eureka1234567@SpringBootApplication@EnableEurekaClientpublic class DeptConsumer80 &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptConsumer80.class,args); &#125;&#125;4、自定义Spring配置类：ConfigBean.java 配置负载均衡实现RestTemplate123456789@Configurationpublic class ConfigBean &#123;//@Configuration -- spring applicationContext.xml @LoadBalanced //配置负载均衡实现RestTemplate @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125;&#125;5、修改conroller：DeptConsumerController.java123//Ribbon:我们这里的地址，应该是一个变量，通过服务名来访问//private static final String REST_URL_PREFIX = \"http://localhost:8001\";private static final String REST_URL_PREFIX = \"http://SPRINGCLOUD-PROVIDER-DEPT\";6、测试123启动所有服务访问 http://localhost/consumer/dept/get/1 http://localhost/consumer/dept/list使用Ribbon实现负载均衡1、创建两个数据库scdb02、scdb03,表内容一直db_source为各自的数据库名2、新建两个服务提供者Moudle：springcloud-provider-dept-8003、springcloud-provider-dept-80023、将8001的依赖和resource目录粘贴入8002、8003项目中，将application.yml文件中更改相应的名称1234567891011121314151617181920212223242526272829303132server: port: 8003spring: application: name: springcloud-provider-dept #三个名称一致为前提，我们时通过名称连接的 datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver #org.gjt.mm.mysql.Driver或者com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/scdb03?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true username: root password: 123456#mybatis配置mybatis: type-aliases-package: cn.kgc.pojo config-location: classpath:mybatis/mybatis-config.xml mapper-locations: classpath:mybatis/mapper/*.xml#Eureka的配置，服务注册到哪里eureka: client: service-url: # 发布到集群，三个eureka注册中心 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ instance: instance-id: springboot-provader-dept8003#info配置info: app-name: kuangshen-springcloud company.name: blog.kuangstudy.com4、将8001的所有java代码拷贝粘贴入8002、8003，更改各自的启动类5、启动所有项目进行测试123456789http://eureka7001.com:7001/EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY'RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.DS Replicaseureka7003.comeureka7002.comInstances currently registered with EurekaApplication AMIs Availability Zones StatusSPRINGCLOUD-PROVIDER-DEPT n/a (3) (3) UP (3) - springboot-provader-dept8001 , springboot-provader-dept8002 , springboot-provader-dept8003可以看到三个实例12345访问http://localhost/consumer/dept/get/4会从三个服务中轮询（默认算法）查询：&#123;\"deptNo\":4,\"deptName\":\"市场部\",\"db_source\":\"scdb03\"&#125;&#123;\"deptNo\":4,\"deptName\":\"市场部\",\"db_source\":\"scdb02\"&#125;&#123;\"deptNo\":4,\"deptName\":\"市场部\",\"db_source\":\"scdb01\"&#125;以上这种每次访问http://localhost/consumer/dept/list随机访问集群中某个服务提供者，这种情况叫做轮询，轮询算法在SpringCloud中可以自定义。6、如何切换或者自定义规则呢？在springcloud-provider-dept-80模块下的ConfigBean中进行配置，切换使用不同的规则123456789101112131415161718192021@Configurationpublic class ConfigBean &#123;//@Configuration -- spring applicationContext.xml /** * IRule: * RoundRobinRule 轮询 * RandomRule 随机 * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~ * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试 */ @LoadBalanced //配置负载均衡实现RestTemplate @Bean public RestTemplate getRestTemplate() &#123; return new RestTemplate(); &#125; @Bean public IRule myRule()&#123; return new RandomRule();//使用随机规则 &#125;&#125;也可以自定义规则，在myRule包下自定义一个配置类MyRule.java，注意：该包不要和主启动类所在的包同级，要跟启动类所在包同级：12345678910111213/** * @Auther: huiprogramer * @Date: 2020/05/19/11:58 * @Description: 自定义规则 */@Configurationpublic class MyRule &#123; @Bean public IRule myRule()&#123; return new MyRandomRule();//默认是轮询RandomRule,现在自定义为自己的 &#125;&#125;主启动类开启负载均衡并指定自定义的MyRule配置类12345678910//Ribbon 和 Eureka 整合以后，客户端可以直接调用，不用关心IP地址和端口号@SpringBootApplication@EnableEurekaClient//在微服务启动的时候就能加载自定义的Ribbon类(自定义的规则会覆盖原有默认的规则)@RibbonClient(name = \"SPRINGCLOUD-PROVIDER-DEPT\",configuration = MyRule.class)//开启负载均衡,并指定自定义的规则public class DeptConsumer_80 &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptConsumer_80.class, args); &#125;&#125;自定义的规则(这里我们参考Ribbon中默认的规则代码自己稍微改动)：MyRandomRule.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091public class MyRandomRule extends AbstractLoadBalancerRule &#123; /** * 每个服务访问5次则换下一个服务(总共3个服务) * &lt;p&gt; * total=0,默认=0,如果=5,指向下一个服务节点 * index=0,默认=0,如果total=5,index+1 */ private int total = 0;//被调用的次数 private int currentIndex = 0;//当前是谁在提供服务 //@edu.umd.cs.findbugs.annotations.SuppressWarnings(value = \"RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE\") public Server choose(ILoadBalancer lb, Object key) &#123; if (lb == null) &#123; return null; &#125; Server server = null; while (server == null) &#123; if (Thread.interrupted()) &#123; return null; &#125; List&lt;Server&gt; upList = lb.getReachableServers();//获得当前活着的服务 List&lt;Server&gt; allList = lb.getAllServers();//获取所有的服务 int serverCount = allList.size(); if (serverCount == 0) &#123; /* * No servers. End regardless of pass, because subsequent passes * only get more restrictive. */ return null; &#125; //int index = chooseRandomInt(serverCount);//生成区间随机数 //server = upList.get(index);//从或活着的服务中,随机获取一个 //=====================自定义代码========================= if (total &lt; 5) &#123; server = upList.get(currentIndex); total++; &#125; else &#123; total = 0; currentIndex++; if (currentIndex &gt; upList.size()) &#123; currentIndex = 0; &#125; server = upList.get(currentIndex);//从活着的服务中,获取指定的服务来进行操作 &#125; //====================================================== if (server == null) &#123; /* * The only time this should happen is if the server list were * somehow trimmed. This is a transient condition. Retry after * yielding. */ Thread.yield(); continue; &#125; if (server.isAlive()) &#123; return (server); &#125; // Shouldn't actually happen.. but must be transient or a bug. server = null; Thread.yield(); &#125; return server; &#125; protected int chooseRandomInt(int serverCount) &#123; return ThreadLocalRandom.current().nextInt(serverCount); &#125; @Override public Server choose(Object key) &#123; return choose(getLoadBalancer(), key); &#125; @Override public void initWithNiwsConfig(IClientConfig clientConfig) &#123; // TODO Auto-generated method stub &#125;&#125;Feign：负载均衡(基于服务端)Feign简介Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端只需要创建一个接口，然后添加注解即可~Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法微服务名字 【ribbon】接口和注解 【feign】Feign能干什么？Feign旨在使编写Java Http客户端变得更容易前面在使用Ribbon + RestTemplate时，利用RestTemplate对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，Feign在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。Feign默认集成了Ribbon利用Ribbon维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与Ribbon不同的是，通过Feign只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。Feign的使用步骤1、创建springcloud-consumer-fdept-feign模块拷贝springcloud-consumer-dept-80模块下的pom.xml，resource，以及java代码到springcloud-consumer-feign模块，并添加feign依赖。123456&lt;!--Feign的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;2、springcloud-api的pom.xml中也添加openfeign依赖123456&lt;!--Feign的依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;3、springcloud-api项目中创建service包创建DeptFeignService接口12345678910111213@Component@FeignClient(value = \"SPRINGCLOUD-PROVIDER-DEPT\")public interface DeptFeignService &#123; @GetMapping(\"/dept/get/&#123;id&#125;\") public Dept queryById(@PathVariable(\"id\") Integer id); @GetMapping(\"/dept/list\") public List&lt;Dept&gt; queryAll(); @PostMapping(\"/dept/add\") public Boolean addDept(Dept dept);&#125;4、修改springcloud-consumer-fdept-feign项目中的Controller去引用feign接口123456789101112131415161718192021@RestControllerpublic class DeptConsumerController &#123; @Autowired private DeptFeignService deptFeignService; @RequestMapping(\"/consumer/dept/add\") public Boolean add(Dept dept)&#123; return deptFeignService.addDept(dept); &#125; @RequestMapping(\"/consumer/dept/get/&#123;id&#125;\") public Dept get(@PathVariable(\"id\") Integer id)&#123; return deptFeignService.queryById(id); &#125; @RequestMapping(\"/consumer/dept/list\") public List&lt;Dept&gt; list()&#123; return deptFeignService.queryAll(); &#125;&#125;5、启动类1234567@SpringBootApplication@EnableFeignClientspublic class FeignDeptConsumer_80 &#123; public static void main(String[] args) &#123; SpringApplication.run(FeignDeptConsumer_80.class,args); &#125;&#125;6、启动全部项目除了原有80消费端123http://localhost/consumer/dept/get/2http://localhost/consumer/dept/list可以看到随机切换数据库，达到负载均衡7、切换轮询与随机负载均衡123456789101112131415161718192021@Configurationpublic class ConfigBean &#123; /** * IRule: * RoundRobinRule 轮询 * RandomRule 随机 * AvailabilityFilteringRule ： 会先过滤掉，跳闸，访问故障的服务~，对剩下的进行轮询~ * RetryRule ： 会先按照轮询获取服务~，如果服务获取失败，则会在指定的时间内进行，重试 */ @LoadBalanced //配置负载均衡实现RestTemplate @Bean public RestTemplate getRestTemplate()&#123; return new RestTemplate();//使用轮询规则 &#125; @Bean public IRule myRule()&#123; return new RandomRule();//使用随机规则 &#125;&#125;Hystrix：服务熔断分布式系统面临的问题复杂分布式体系结构中的应用程序有数十个依赖关系，每个依赖关系在某些时候将不可避免失败！服务雪崩多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的“扇出”，如果扇出的链路上某个微服务的调用响应时间过长，或者不可用，对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，所谓的“雪崩效应”。对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几十秒内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障，这些都表示需要对故障和延迟进行隔离和管理，以便单个依赖关系的失败，不能取消整个应用程序或系统。我们需要，弃车保帅什么是Hystrix？Hystrix是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，Hystrix能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。“断路器”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，向调用方方茴一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用，从而避免了故障在分布式系统中的蔓延，乃至雪崩。Hystrix能干嘛？服务降级服务熔断服务限流接近实时的监控…服务熔断什么是服务熔断?熔断机制是赌赢雪崩效应的一种微服务链路保护机制。在微服务架构中，微服务之间的数据交互通过远程调用完成，微服务A调用微服务B和微服务C，微服务B和微服务C又调用其它的微服务，此时如果链路上某个微服务的调用响应时间过长或者不可用，那么对微服务A的调用就会占用越来越多的系统资源，进而引起系统崩溃，导致“雪崩效应”。服务熔断是应对雪崩效应的一种微服务链路保护机制。例如在高压电路中，如果某个地方的电压过高，熔断器就会熔断，对电路进行保护。同样，在微服务架构中，熔断机制也是起着类似的作用。当调用链路的某个微服务不可用或者响应时间太长时，会进行服务熔断，不再有该节点微服务的调用，快速返回错误的响应信息。当检测到该节点微服务调用响应正常后，恢复调用链路。当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，进而熔断该节点微服务的调用，快速返回错误的响应信息。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，当失败的调用到一定阀值缺省是5秒内20次调用失败，就会启动熔断机制。熔断机制的注解是：@HystrixCommand。服务熔断解决如下问题：当所依赖的对象不稳定时，能够起到快速失败的目的；快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复。入门案例1、新建springcloud-provider-dept-hystrix-8001模块并拷贝springcloud-provider-dept–8001内的pom.xml、resource和Java代码进行初始化并调整。2、导入hystrix依赖123456&lt;!--导入Hystrix依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt; &lt;version&gt;1.4.6.RELEASE&lt;/version&gt;&lt;/dependency&gt;3、调整yml配置文件123456789101112131415161718192021222324252627282930313233343536373839server: port: 8001# mybatis配置mybatis: # springcloud-api 模块下的pojo包 type-aliases-package: com.haust.springcloud.pojo # 本模块下的mybatis-config.xml核心配置文件类路径 config-location: classpath:mybatis/mybatis-config.xml # 本模块下的mapper配置文件类路径 mapper-locations: classpath:mybatis/mapper/*.xml# spring配置spring: application: #项目名 name: springcloud-provider-dept datasource: # 德鲁伊数据源 type: com.alibaba.druid.pool.DruidDataSource driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/db01?useUnicode=true&amp;characterEncoding=utf-8 username: root password: root# Eureka配置：配置服务注册中心地址eureka: client: service-url: # 注册中心地址7001-7003 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ instance: instance-id: springcloud-provider-dept-hystrix-8001 #修改Eureka上的默认描述信息 prefer-ip-address: true #改为true后默认显示的是ip地址而不再是localhost#info配置info: app.name: haust-springcloud #项目的名称 company.name: com.haust #公司的名称4、修改controller1234567891011121314151617181920212223242526//提供Restful服务@RestControllerpublic class DeptController &#123; @Autowired private DeptService deptService; @HystrixCommand(fallbackMethod = \"hystrixGet\")//如果根据id查询出现异常,走这段代码 @GetMapping(\"/dept/get/&#123;id&#125;\")//根据id查询 public Dept get(@PathVariable(\"id\") Long id)&#123; Dept dept = deptService.queryById(id); if (dept==null)&#123; throw new RuntimeException(\"这个id=&gt;\"+id+\",不存在该用户，或信息无法找到~\"); &#125; return dept; &#125; //根据id查询备选方案(熔断) public Dept hystrixGet(@PathVariable(\"id\") Long id)&#123; return new Dept().setDeptno(id) .setDname(\"这个id=&gt;\"+id+\",没有对应的信息,null---@Hystrix~\") .setDb_source(\"在MySQL中没有这个数据库\"); &#125;&#125;5、为主启动类添加对熔断的支持注解@EnableCircuitBreaker12345678@SpringBootApplication@EnableEurekaClient //在服务启动后自动注册到eureka中@EnableCircuitBreakerpublic class DeptHystrixProvider8001Main &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptHystrixProvider8001Main.class,args); &#125;&#125;6、测试不适用熔断,页面报错抛异常信息1\"java.lang.RuntimeException: 这个id=&gt;6,不存在该部门，或信息无法找到~\\r\\n\\tat cn.kgc... (5318 bytes)]使用熔断后，当访问一个不存在的id时，前台页展示数据如下1&#123;\"deptNo\":6,\"deptName\":\"这个id=&gt;6,没有对应的信息,null---@Hystrix~\",\"db_source\":\"在MySQL中没有这个数据库\"&#125;因此，为了避免因某个微服务后台出现异常或错误而导致整个应用或网页报错，使用熔断是必要的服务降级什么是服务降级?服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，就是尽可能的把系统资源让给优先级高的服务。资源有限，而请求是无限的。如果在并发高峰期，不做服务降级处理，一方面肯定会影响整体服务的性能，严重的话可能会导致宕机某些重要的服务不可用。所以，一般在高峰期，为了保证核心功能服务的可用性，都要对某些服务降级处理。比如当双11活动时，把交易无关的服务统统降级，如查看蚂蚁深林，查看历史订单等等。服务降级主要用于什么场景呢？当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，可以将一些 不重要 或 不紧急 的服务或任务进行服务的 延迟使用 或 暂停使用。降级的方式可以根据业务来，可以延迟服务，比如延迟给用户增加积分，只是放到一个缓存中，等服务平稳之后再执行 ；或者在粒度范围内关闭服务，比如关闭相关文章的推荐当某一时间内服务A的访问量暴增，而B和C的访问量较少，为了缓解A服务的压力，这时候需要B和C暂时关闭一些服务功能，去承担A的部分服务，从而为A分担压力，叫做服务降级。服务降级需要考虑的问题那些服务是核心服务，哪些服务是非核心服务那些服务可以支持降级，那些服务不能支持降级，降级策略是什么除服务降级之外是否存在更复杂的业务放通场景，策略是什么？自动降级分类超时降级：主要配置好超时时间和超时重试次数和机制，并使用异步机制探测回复情况失败次数降级：主要是一些不稳定的api，当失败调用次数达到一定阀值自动降级，同样要使用异步机制探测回复情况故障降级：比如要调用的远程服务挂掉了（网络故障、DNS故障、http服务返回错误的状态码、rpc服务抛出异常），则可以直接降级。降级后的处理方案有：默认值（比如库存服务挂了，返回默认现货）、兜底数据（比如广告挂了，返回提前准备好的一些静态页面）、缓存（之前暂存的一些缓存数据）限流降级：秒杀或者抢购一些限购商品时，此时可能会因为访问量太大而导致系统崩溃，此时会使用限流来进行限制访问量，当达到限流阀值，后续请求会被降级；降级后的处理方案可以是：排队页面（将用户导流到排队页面等一会重试）、无货（直接告知用户没货了）、错误页（如活动太火爆了，稍后重试）。入门案例1、在springcloud-api模块下的service包中新建降级配置类DeptClientServiceFallBackFactory.java1234567891011121314151617181920212223242526@Componentpublic class DeptClientServiceFallBackFactory implements FallbackFactory &#123; @Override public DeptFeignService create(Throwable throwable) &#123; return new DeptFeignService() &#123; @Override public Dept queryById(Integer id) &#123; return new Dept() .setDeptNo(id) .setDeptName(\"id=&gt;\" + id + \"没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭\") .setDb_source(\"没有数据~\"); &#125; @Override public List&lt;Dept&gt; queryAll() &#123; return null; &#125; @Override public Boolean addDept(Dept dept) &#123; return false; &#125; &#125;; &#125;&#125;2、在DeptFeignService中指定降级配置类DeptFeiGnServiceFallBackFactory1234567891011121314@Component //注册到spring容器中//@FeignClient:微服务客户端注解,value:指定微服务的名字,这样就可以使Feign客户端直接找到对应的微服务@FeignClient(value = \"SPRINGCLOUD-PROVIDER-DEPT\",fallbackFactory = DeptClientServiceFallBackFactory.class)//fallbackFactory指定降级配置类public interface DeptFeignService &#123; @GetMapping(\"/dept/get/&#123;id&#125;\") public Dept queryById(@PathVariable(\"id\") Long id); @GetMapping(\"/dept/list\") public List&lt;Dept&gt; queryAll(); @GetMapping(\"/dept/add\") public Boolean addDept(Dept dept);&#125;3、在springcloud-consumer-dept-feign模块中开启降级1234567891011121314server: port: 80# Eureka配置eureka: client: register-with-eureka: false # 不向 Eureka注册自己 service-url: # 从三个注册中心中随机取一个去访问 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/# 开启降级feign.hystrixfeign: hystrix: enabled: true4、测试(启动7001服务，feigen80服务和8001提供服务)1234如果项目正常启动中，那么浏览http://localhost/consumer/dept/get/1得到：&#123;\"deptNo\":1,\"deptName\":\"开发部\",\"db_source\":\"scdb01\"&#125;如果人为的去停掉8001服务，那么浏览http://localhost/consumer/dept/get/1得到：&#123;\"deptNo\":1,\"deptName\":\"id=&gt;1没有对应的信息，客户端提供了降级的信息，这个服务现在已经被关闭\",\"db_source\":\"没有数据~\"&#125;服务熔断和降级的区别​服务熔断—&gt;服务端：某个服务超时或异常，引起熔断~，类似于保险丝(自我熔断)服务降级—&gt;客户端：从整体网站请求负载考虑，当某个服务熔断或者关闭之后，服务将不再被调用，此时在客户端，我们可以准备一个 FallBackFactory ，返回一个默认的值(缺省值)。会导致整体的服务下降，但是好歹能用，比直接挂掉强。​触发原因不太一样，服务熔断一般是某个服务（下游服务）故障引起，而服务降级一般是从整体负荷考虑；​管理目标的层次不太一样，熔断其实是一个框架级的处理，每个微服务都需要（无层级之分），而降级一般需要对业务有层级之分（比如降级一般是从最外围服务开始）​实现方式不太一样，服务降级具有代码侵入性(由控制器完成/或自动降级)，熔断一般称为自我熔断。限流：限制并发的请求访问量，超过阈值则拒绝；降级：服务分优先级，牺牲非核心服务（不可用），保证核心服务稳定；从整体负荷考虑；熔断：依赖的下游服务故障触发熔断，避免引发本系统崩溃；系统自动执行和恢复Dashboard 流监控1、新建springcloud-consumer-hystrix-dashboard模块2、添加依赖1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;dependencies&gt; &lt;!--导入Hystrix依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--dashboard依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Feign的依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Ribbon--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Eureka--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--实体类+web--&gt; &lt;dependency&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;artifactId&gt;springcloud-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;3、配置端口application.yml1234567891011121314server: port: 9001# Eureka配置eureka: client: register-with-eureka: false # 不向 Eureka注册自己 service-url: # 从三个注册中心中随机取一个去访问 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/# 开启降级feign.hystrixfeign: hystrix: enabled: true4、主启动类123456789@SpringBootApplication//开启Dashboard@EnableHystrixDashboard@EnableFeignClientspublic class DeptConsumerDashboard_9001 &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptConsumerDashboard_9001.class,args); &#125;&#125;5、给springcloud-provider-dept-hystrix-8001模块下的主启动类添加如下代码,添加监控导入依赖hystrix123456&lt;!--导入Hystrix依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;12345678910111213141516171819@SpringBootApplication@EnableEurekaClient //EnableEurekaClient 客户端的启动类，在服务启动后自动向注册中心注册服务@EnableDiscoveryClient //服务发现@EnableCircuitBreakerpublic class DeptHystrixProvider8001Main &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptHystrixProvider8001Main.class,args); &#125; //增加一个 Servlet @Bean public ServletRegistrationBean hystrixMetricsStreamServlet()&#123; ServletRegistrationBean registrationBean = new ServletRegistrationBean(new HystrixMetricsStreamServlet()); //访问该页面就是监控页面 registrationBean.addUrlMappings(\"/actuator/hystrix.stream\"); return registrationBean; &#125;&#125;5、测试12345浏览：http://localhost:8001/actuator/hystrix.stream 看是否能ping到数据监控仪表盘页面：http://localhost:9001/hystrix 输入http://localhost:8001/actuator/hystrix.stream网址 点击Monitor Stream --显示项目监控仪表盘 浏览：http://localhost:8001/dept/get/5--看是否有变化--不断刷新可看到仪表盘中圆变大，心跳加快Zuul路由网关什么是zuul?Zull包含了对请求的路由(用来跳转的)和过滤两个最主要功能：其中路由功能负责将外部请求转发到具体的微服务实例上，是实现外部访问统一入口的基础，而过滤器功能则负责对请求的处理过程进行干预，是实现请求校验，服务聚合等功能的基础。Zuul和Eureka进行整合，将Zuul自身注册为Eureka服务治理下的应用，同时从Eureka中获得其他服务的消息，也即以后的访问微服务都是通过Zuul跳转后获得。​注意：Zuul服务最终还是会注册进Eureka​提供：代理+路由+过滤 三大功能！​Zuul能干嘛？验证与安全保障: 识别面向各类资源的验证要求并拒绝那些与要求不符的请求。审查与监控: 在边缘位置追踪有意义数据及统计结果，从而为我们带来准确的生产状态结论。动态路由: 以动态方式根据需要将请求路由至不同后端集群处。压力测试: 逐渐增加指向集群的负载流量，从而计算性能水平。负载分配: 为每一种负载类型分配对应容量，并弃用超出限定值的请求。静态响应处理: 在边缘位置直接建立部分响应，从而避免其流入内部集群。多区域弹性: 跨越AWS区域进行请求路由，旨在实现ELB使用多样化并保证边缘位置与使用者尽可能接近。入门案例1、新建springcloud-zuul模块，并导入依赖1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;dependencies&gt; &lt;!--导入zuul依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt; &lt;version&gt;1.4.6.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入Hystrix依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--dashboard依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Ribbon--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Eureka: Ribbon需要从Eureka服务中心获取要拿什么--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--实体类+web--&gt; &lt;dependency&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;artifactId&gt;springcloud-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;2、application.yml1234567891011121314151617181920212223242526server: port: 9527spring: application: name: springcloud-zuul #微服务名称eureka: client: service-url: defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ instance: #实例的id instance-id: zuul9527.com prefer-ip-address: true # 显示ipinfo: app.name: haust.springcloud #项目名称 company.name: haust #公司名称zuul: prefix: /king # 设置公共的前缀,实现隐藏原有路由 routes: mydept: path: /mydept/** service-id: springcloud-provider-dept ignored-services: \"*\" # 不向外界暴露出你配置的隐射之外的服务~,项目名访问不到数据king/springcloud-provider-dept/dept/get/2，必须用mydept3、添加网址信息（可选）12c:windows/system32/drivers/etc/hosts末尾添加172.0.0.1 www.kingqing.com4、主启动类1234567@SpringBootApplication@EnableZuulProxy //开启Zuulpublic class ZuulApplication_9527 &#123; public static void main(String[] args) &#123; SpringApplication.run(ZuulApplication_9527.class,args); &#125;&#125;5、测试1234启动7001注册服务中心，启动dept-hystrix-8001待熔断的服务，启动网关zuul服务1、访问http://eureka7001.com:7001/可以看到有两个服务注册进eureka中；2、访问http://localhost:8001/dept/get/3，可以拿到数据信息3、访问http://www.kingqing.com:9527/king/mydept/dept/get/3，也可以拿到数据，避免了暴露真实的微服务名称及端口，而http://www.kingqing.com:9527/king/springcloud-provider-dept/dept/get/2用服务名查询不到数据Spring Cloud Config 分布式配置Dalston.RELEASE​Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring Environment和PropertySource抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。很容易添加替代实现，并使用Spring配置将其插入。概述分布式系统面临的–配置文件问题​微服务意味着要将单体应用中的业务拆分成一个个子服务，每个服务的粒度相对较小，因此系统中会出现大量的服务，由于每个服务都需要必要的配置信息才能运行，所以一套集中式的，动态的配置管理设施是必不可少的。spring cloud提供了configServer来解决这个问题，我们每一个微服务自己带着一个application.yml，那上百个的配置文件修改起来，令人头疼！什么是SpringCloud config分布式配置中心？spring cloud config 为微服务架构中的微服务提供集中化的外部支持，配置服务器为各个不同微服务应用的所有环节提供了一个中心化的外部配置。spring cloud config 分为服务端和客户端两部分。服务端也称为 分布式配置中心，它是一个独立的微服务应用，用来连接配置服务器并为客户端提供获取配置信息，加密，解密信息等访问接口。客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理。并且可用通过git客户端工具来方便的管理和访问配置内容。spring cloud config 分布式配置中心能干嘛？集中式管理配置文件不同环境，不同配置，动态化的配置更新，分环境部署，比如 /dev /test /prod /beta /release运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息.当配置发生变动时，服务不需要重启，即可感知到配置的变化，并应用新的配置将配置信息以REST接口的形式暴露.spring cloud config 分布式配置中心与GitHub整合由于spring cloud config 默认使用git来存储配置文件 (也有其他方式，比如自持SVN 和本地文件)，但是最推荐的还是git ，而且使用的是 http / https 访问的形式。gitee的使用(码云)1、访问https://gitee.com/，注册账户2、创建远程仓库登入Gitee后，点击头像旁边的”+”加号–&gt;新建仓库；创库名称：springcloud-config仓库介绍：随意是否公开：公开语言：java添加.gitignore:java添加开源许可证：GPL-3.0勾选-使用Readme文件初始化这个仓库选择分支模型：但分支模型(只创建master分支)点击创建3、获取SSHKey首先要在本地创建一个ssh key 这个的目的就是你现在需要在你电脑上获得一个密匙。按如下命令来生成sshkey:1234$ ssh-keygen -t rsa -C \"417496479@qq.com\" # Generating public/private rsa key pair...# 三次回车即可生成 ssh key查看你的public key：12$ cat ~/.ssh/id_rsa.pub# ssh-rsa AAAAB3NzaC1yc2E... youremail@youremail.com并把他添加到Gitee123设置--安全设置子项SSh公钥标题：随意公钥：粘贴上一步得到的，ssh-rsa……代码，添加后，在终端中输入12345#Gitee$ ssh -T git@gitee.com#GitHub$ ssh -T git@github.com第一次绑定的时候输入上边的代码之后会提示是否continue,输入yes后程序会自动连接，如果要求登录，直接输入登录信息即可。再次执行上面的命令，检查是否成功连接，如果返回一下信息，则表示添加成功1Hi 冰糖葫芦娃! You've successfully authenticated, but GITEE.COM does not provide shell access.4、设置基本信息12$ git config --global user.name \"yourname\"$ git config --global user.email \"youremail@youremail.com\"name尽量和码云或GitHub保持一致，但email必须是码云或GitHub注册时使用的邮箱。命令不分前后，没有顺序。查看设计的信息12$ git config --list #可以查看用户名以及邮箱信息5、初始化本地库然后就是将你的远程仓库克隆到本地，或者你可以在本地初始化一个项目后再进行云端绑定。12345678#Gitee$ git clone https://gitee.com/yourname/repository#Github$ git clone https://github.com/yourname/repository.git#yourname 您在码云或github注册的用户名#repository 您创建的远程仓库名称成功将把gitee上的仓库下载到本机6、测试本机配置修改上传到gitee上在下载好的项目里创建文件application.yml123456789101112131415spring: profiles: active: dev ---spring: profiles: dev application: name: springcloud-config-dev ---spring: profiles: test application: name: springcloud-config-test将添加的application.yml提交到gittee上1234567891、将文件添加到暂存区$ git add . # .代表所有2、查看状态$ git status # 显示 new file: application.yml3、本地提交$ git commit -m \"第一次提交\"4、push到远程$ git push origin master成功将文件同步到gitee上入门案例服务端1、新建springcloud-config-server-3344模块导入pom.xml依赖123456789101112131415161718 &lt;dependencies&gt; &lt;!--web--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--config--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-config-server&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--完善监控信息--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;3、resource下创建application.yml配置文件，Spring Cloud Config服务器从git存储库（必须提供）为远程客户端提供配置：1234567891011121314server: port: 3344spring: application: name: springcloud-config-server # 连接码云远程仓库 cloud: config: server: git: #注意是https的而不是ssh uri: https://gitee.com/cao_shi_peng/springcloud-config.git # 通过 config-server可以连接到git，访问其中的资源以及配置~4、主启动类1234567@EnableConfigServer //开启spring cloud config server服务@SpringBootApplicationpublic class Config_server_3344 &#123; public static void main(String[] args) &#123; SpringApplication.run(Config_server_3344.class,args); &#125;&#125;5、测试1234567891011121314访问http://localhost:3344/application-dev.yml获取信息为： spring: application: name: springcloud-config-dev profiles: active: dev访问http://localhost:3344/application-test.yml获取信息为： spring: application: name: springcloud-config-test profiles: active: dev服务端搞定了客户端1、将本地git仓库springcloud-config文件夹下新建的configclient.yml提交到码云仓库：123456789101112131415161718192021222324252627282930313233spring: profiles: active: dev---server: port: 8201spring: profiles: dev application: name: springcloud-provider-dept#Eureka的配置，服务注册到哪里eureka: client: service-url: defaultZone: http://eureka7001.com:7001/eureka/ ---server: port: 8202spring: profiles: test application: name: springcloud-provider-dept#Eureka的配置，服务注册到哪里eureka: client: service-url: defaultZone: http://eureka7001.com:7001/eureka/push到远程1234$ git add .$ gir status #查看状态$ git commit -m \"抵四次提交\" #提交到本地仓库$ git push origin master #提交到远程库2、新建一个springcloud-config-client-3355模块，并导入依赖12345678910111213141516&lt;dependencies&gt; &lt;!--config--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt;3、resources下创建application.yml和bootstrap.yml配置文件bootstrap.yml是系统级别的配置12345678# 系统级别的配置（服务连接远程仓库那东西）spring: cloud: config: name: configclient # 需要从git上读取的资源名称，不要后缀 profile: dev #需要哪个环境 label: master #从哪个分支拿 uri: http://localhost:3344application.yml是用户级别的配置1234# 用户级别的配置（客户端连接服务器拿东西）spring: application: name: springcloud-config-client4、启动类123456@SpringBootApplicationpublic class ConfigClient &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigClient.class,args); &#125;&#125;5、创建controller包下的ConfigClientController.java用于测试12345678910111213141516@RestControllerpublic class ConfigClientController &#123; @Value(\"$&#123;spring.application.name&#125;\") private String applicationName; @Value(\"$&#123;eureka.client.service-url.defaultZone&#125;\") private String eurekaServer; @Value(\"$&#123;server.port&#125;\") private String port; @RequestMapping(\"/config\") public String getConfig()&#123; return \"applicationName:\"+applicationName+ \",eurekaServer\"+eurekaServer+ \",port\"+port; &#125;&#125;6、测试启动 config-server-3344项目，启动config-client-3355项目首先http://localhost:3344/master/configclient-dev.yml这个可以拿到数据；其次http://localhost:8201/config；可以拿到数据1234applicationName:springcloud-config- dev,eurekaServer:http://eureka7001.com:7001/eureka/,port:8201``` 将本地系统级别配置bootstrap.yml中的profile设置为test--》此时`http://localhost:8201/config`将访问不到任何数据，而`http://localhost:8202/config`可以读取到数据：applicationName:springcloud-config-test,eurekaServer:http://eureka7001.com:7001/eureka/,port:820212345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273**7、小案例**1、本地新建config-dept.yml和config-eureka.yml并提交到码云仓库config-eureka.yml```ymlspring: profiles: active: dev---server: port: 7001 spring: profiles: dev application: name: springcloud-provider-eureka eureka: instance: hostname: eureka7001.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 单击-设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7002和7003 defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ ---server: port: 7001 spring: profiles: pro application: name: springcloud-provider-depteureka: instance: hostname: eureka7001.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 单击-设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7002和7003 defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/---server: port: 7001 spring: profiles: test application: name: springcloud-provider-eureka eureka: instance: hostname: eureka7001.com # Eureka 服务端的实例名称 client: register-with-eureka: false # false 表示不向注册中心注册自己 fetch-registry: false # false 表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务 service-url: # 单击-设置与 Eureka Server 交互的地址查询服务和注册服务都需要依赖这个地址 #defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ # 集群-关联，挂载7002和7003 defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/push到远程1234$ git add .$ gir status #查看状态$ git commit -m \"抵四次提交\" #提交到本地仓库$ git push origin master #提交到远程库2、新建springcloud-config-eureka-7001模块，并将原来的springcloud-eureka-7001模块下的内容拷贝的该模块。新建bootstrap.yml连接远程配置1234567spring: cloud: config: name: config-eureka # 仓库中的配置文件名称 label: master profile: dev uri: http://localhost:3344application.yml配置123spring: application: name: config-eureka在pom.xml中添加spring cloud config依赖123456&lt;!--config--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;3、主启动类1234567@SpringBootApplication@EnableEurekaServer //EnableEurekaServer 服务端的启动类，可以接受别人注册进来~public class ConfigEurekaServer_7001 &#123; public static void main(String[] args) &#123; SpringApplication.run(ConfigEurekaServer_7001.class,args); &#125;&#125;4、测试第一步：启动 Config_Server_3344，并访问 http://localhost:3344/master/config-eureka-dev.yml 测试第二部：启动ConfigEurekaServer_7001，访问 http://localhost:7001/ 测试5、新建springcloud-config-dept-8001模块并拷贝springcloud-provider-dept-8001的内容同理导入spring cloud config依赖、清空application.yml 、新建bootstrap.yml配置文件并配置pom.xml1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;ksspringcloud&lt;/artifactId&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;springcloud-config-dept-8001&lt;/artifactId&gt; &lt;dependencies&gt; &lt;!--config--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--导入Hystrix依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--dashboard依赖--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix-dashboard&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--Eureka--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.2.2.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--完善监控信息--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--我们需要拿到实体类，所以要配置咱们的api module--&gt; &lt;dependency&gt; &lt;groupId&gt;cn.kgc&lt;/groupId&gt; &lt;artifactId&gt;springcloud-api&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;!--测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--数据库--&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--数据源--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--jetty--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--热部署工具--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;新建config-dept-yml并上传到git上123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475spring: profiles: active: dev---server: port: 8001spring: profiles: dev application: name: springcloud-config-dept datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver #org.gjt.mm.mysql.Driver或者com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/scdb03?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true username: root password: 123456#mybatis配置mybatis: type-aliases-package: cn.kgc.pojo config-location: classpath:mybatis/mybatis-config.xml mapper-locations: classpath:mybatis/mapper/*.xml#Eureka的配置，服务注册到哪里eureka: client: service-url: # 发布到集群，三个eureka注册中心 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ instance: instance-id: springboot-provader-dept8001#info配置info: app-name: kuangshen-springcloud company.name: blog.kuangstudy.com --- server: port: 8001spring: profiles: test application: name: springcloud-config-dept datasource: type: com.alibaba.druid.pool.DruidDataSource driver-class-name: org.gjt.mm.mysql.Driver #org.gjt.mm.mysql.Driver或者com.mysql.jdbc.Driver url: jdbc:mysql://localhost:3306/scdb02?useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true username: root password: 123456#mybatis配置mybatis: type-aliases-package: cn.kgc.pojo config-location: classpath:mybatis/mybatis-config.xml mapper-locations: classpath:mybatis/mapper/*.xml#Eureka的配置，服务注册到哪里eureka: client: service-url: # 发布到集群，三个eureka注册中心 defaultZone: http://eureka7001.com:7001/eureka/,http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ instance: instance-id: springboot-provader-dept8001#info配置info: app-name: kuangshen-springcloud company.name: blog.kuangstudy.combootstrap.yml1234567spring: cloud: config: name: config-dept # 仓库中的配置文件名称 label: master profile: dev uri: http://localhost:3344application.yml123spring: application: name: springcloud-config-dept-80016、主启动123456789@SpringBootApplication@EnableEurekaClient //在服务启动后自动注册到eureka中@EnableDiscoveryClient //服务发现@EnableCircuitBreakerpublic class DeptProvider8001Main &#123; public static void main(String[] args) &#123; SpringApplication.run(DeptProvider8001Main.class,args); &#125;&#125;7、启动项目测试12345678910111213http://localhost:3344/config-dept-dev.yml，http://localhost:3344/config-dept-test.yml分别能读取到配置的两个环境 http://localhost:7001/ 读取到客户端以启动：Application AMIs Availability Zones StatusSPRINGCLOUD-CONFIG-DEPT n/a (1) (1) UP (1) - springboot-provader-dept8001http://localhost:8001/dept/get/4 能读取到配置中的test环境&#123;\"deptNo\":4,\"deptName\":\"市场部\",\"db_source\":\"scdb02\"&#125;--&gt;从数据库scdb02获取的信息如果把客户端的bootstrap.yml中的profile：改成dev并重新启动客户端（或者热部署--&gt;启动类--Build--build module ******）http://localhost:8001/dept/get/4 能读取到配置中的dev环境 &#123;\"deptNo\":4,\"deptName\":\"市场部\",\"db_source\":\"scdb03\"&#125;--&gt;从数据库scdb03获取的信息","categories":[{"name":"Spring","slug":"Spring","permalink":"https://me.obey.fun/categories/Spring/"},{"name":"SpringCloud","slug":"Spring/SpringCloud","permalink":"https://me.obey.fun/categories/Spring/SpringCloud/"},{"name":"REST API","slug":"Spring/SpringCloud/REST-API","permalink":"https://me.obey.fun/categories/Spring/SpringCloud/REST-API/"}],"tags":[{"name":"微服务","slug":"微服务","permalink":"https://me.obey.fun/tags/微服务/"},{"name":"REST","slug":"REST","permalink":"https://me.obey.fun/tags/REST/"}],"keywords":[{"name":"Spring","slug":"Spring","permalink":"https://me.obey.fun/categories/Spring/"},{"name":"SpringCloud","slug":"Spring/SpringCloud","permalink":"https://me.obey.fun/categories/Spring/SpringCloud/"},{"name":"REST API","slug":"Spring/SpringCloud/REST-API","permalink":"https://me.obey.fun/categories/Spring/SpringCloud/REST-API/"}]},{"title":"Centos7系统的配置","slug":"centos7系统的配置","date":"2019-12-08T12:25:28.000Z","updated":"2020-02-03T14:45:40.919Z","comments":true,"path":"centos7系统的配置.html","link":"","permalink":"https://me.obey.fun/centos7系统的配置.html","excerpt":"","text":"Centos的配置静态IP的配置NAT适配器的配置首先，打开控制面板-网络和Internet-网络连接找到VMware Network Adapter VMnet8点击右键属性。然后，选择Internet协议版本4，再次点击属性。最后，选择使用下面的IP地址、使用下面的DNS服务器地址，自己设立ip地址、子网编码、默认网关等。虚拟机的虚拟网络编辑打开虚拟机，导航栏点击编辑-虚拟网络编辑器，进入到虚拟网络编辑器中，参考下图配置。记住NAT设置中的子网IP、子网掩码、网关IP三项，接下来配置文件主要是这三项。Centos的配置文件1、编辑网络配置文件。1vi /etc/sysconfig/network-scripts/ifcfg-ens33注：我的是ens33，不同的人或许会有不同。打开配置文件后，按 i 进行编辑。按ESC后输入:wq，意思是保存后退出。2、重启网络1service network restart3、测试网络1ping www.baidu.com测试是否能连接网络。4、查看IP地址输入ifconfig,看看是否地址为你配置的ip地址。防火墙的配置Centos7防火墙常用配置及说明Centos7和Centos6 防火墙的区别：使用的工具不一样了。Centos6 使用的是iptables ，Centos7 使用的是filewalliptables 用于过滤数据包，属于网络层防火墙。firewall 能够允许哪些服务可用，那些端口可用…属于更高一层的防火墙。常用命令：12345678910111213141516171819vi /usr/lib/firewalld/services/ssh.xmlvi /usr/lib/firewalld/services/html.xmlsystemctl enable firewalld.servicesystemctl restart firewalld.servicefirewall-cmd --statefirewall-cmd --list-allfirewall-cmd --zone=public --permanent --add-port=8502/tcp vi /etc/firewalld/zones/public.xml&lt;port protocol=&quot;tcp&quot; port=&quot;8502&quot;/&gt;systemctl restart firewalld.servicefirewall 配置The configuration for firewalld is stored in various XML filesin /usr/lib/firewalld and /etc/firewalld注意：以下firewalld 的操作只有重启之后才有效：service firewalld restart1、系统配置目录1/usr/lib/firewalld/services目录中存放定义好的网络服务和端口参数，系统参数，不能修改。2、用户配置目录1/etc/firewalld/3、如何自定义添加端口用户可以通过修改配置文件的方式添加端口，也可以通过命令的方式添加端口，注意：修改的内容会在/etc/firewalld/目录下的配置文件中体现。3.1、 命令的方式添加端口：1firwall-cmd --permanent --add-port=9527/tcp参数介绍：firwall-cmd：是Linux提供的操作firewall的一个工具；–permanent：表示设置为持久；–add-port：标识添加的端口；另外，firewall中有Zone的概念，可以将具体的端口制定到具体的zone配置文件中。例如：添加8010端口1firewall-cmd --zone=public --permanent --add-port=8010/tcp--zone=public：指定的zone为public；如果–zone=dmz 这样设置的话，会在dmz.xml文件中新增一条。3.2、修改配置文件的方式添加端口12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;zone&gt; &lt;short&gt;Public&lt;/short&gt; &lt;description&gt;For use in public areas.&lt;/description&gt; &lt;br&gt;&lt;rule family=\"ipv4\"&gt; &lt;br&gt; &lt;source address=\"122.10.70.234\"/&gt; &lt;br&gt; &lt;port protocol=\"udp\" port=\"514\"/&gt; &lt;br&gt; &lt;accept/&gt; &lt;br&gt;&lt;/rule&gt;&lt;rule family=\"ipv4\"&gt; &lt;source address=\"123.60.255.14\"/&gt; &lt;port protocol=\"tcp\" port=\"10050-10051\"/&gt; &lt;accept/&gt; &lt;/rule&gt; &lt;rule family=\"ipv4\"&gt; &lt;source address=\"192.249.87.114\"/&gt; 放通指定ip，指定端口、协议 &lt;port protocol=\"tcp\" port=\"80\"/&gt; &lt;accept/&gt; &lt;/rule&gt;&lt;rule family=\"ipv4\"&gt; 放通任意ip访问服务器的9527端口 &lt;port protocol=\"tcp\" port=\"9527\"/&gt; &lt;accept/&gt; &lt;/rule&gt;&lt;/zone&gt;上述的一个配置文件可以很好的看出：添加需要的规则，开放通源ip为122.10.70.234，端口514，协议tcp；开放通源ip为123.60.255.14，端口10050-10051，协议tcp；开放通源ip为任意，端口9527，协议tcp；4、firewall常用命令重启、关闭、开启、firewalld.serverice 服务123456789101112131415Service firewalld restart 重启Service firewalld start 开启Service firewalld stop 关闭systemctl status firewalldsystemctl stop firewalld 关闭systemctl start firewalld 开启systemctl restart firewalld 重启systemctl disable firewalld 关闭开机启动查看状态1firewall-cmd --state查看防火墙规则1firewall-cmd --list-all5、Centos 切换为iptables防火墙切换到iptables首先应该关掉默认的firewalld，然后安装iptables服务。关闭firewall：1service firewalld stop systemctl disable firewalld.service #禁止firewall开机启动安装iptables防火墙1yum install iptables-services #安装编辑iptables防火墙配置1vi /etc/sysconfig/iptables #编辑防火墙配置文件下边是一个完整的配置文件：12345678910Firewall configuration written by system-config-firewall Manual customization of this file is not recommended. *filter :INPUT ACCEPT [0:0] :FORWARD ACCEPT [0:0] :OUTPUT ACCEPT [0:0] -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT -A INPUT -p icmp -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT -A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT -A INPUT -j REJECT --reject-with icmp-host-prohibited -A FORWARD -j REJECT --reject-with icmp-host-prohibited COMMIT:wq! #保存退出12service iptables start #开启systemctl enable iptables.service #设置防火墙开机启动","categories":[{"name":"Linux","slug":"Linux","permalink":"https://me.obey.fun/categories/Linux/"},{"name":"Centos","slug":"Linux/Centos","permalink":"https://me.obey.fun/categories/Linux/Centos/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://me.obey.fun/tags/Linux/"},{"name":"Centos7","slug":"Centos7","permalink":"https://me.obey.fun/tags/Centos7/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"https://me.obey.fun/categories/Linux/"},{"name":"Centos","slug":"Linux/Centos","permalink":"https://me.obey.fun/categories/Linux/Centos/"}]},{"title":"Linux入门","slug":"Linux入门","date":"2019-12-04T12:57:28.000Z","updated":"2019-12-05T13:36:46.243Z","comments":true,"path":"Linux入门.html","link":"","permalink":"https://me.obey.fun/Linux入门.html","excerpt":"","text":"Linux 入门Linux 概述Unix 介绍UNIX操作系统（尤尼斯），是一个强大的多用户、多任务操作系统，支持多种处理器架构，按照操作系统的分类，属于分时操作系统，最早由KenThompson、Dennis Ritchie和Douglas McIlroy于1969年在AT&amp;T的贝尔实验室开发。目前它的商标权由国际开放标准组织所拥有，只有符合单一UNIX规范的UNIX系统才能使用UNIX这个名称，否则只能称为类UNIX（UNIX-like）。Linux 介绍Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和Unix的多用户、多任务、支持多线程和多CPU的操作系统。伴随着互联网的发展，Linux得到了来自全世界软件爱好者、组织、公司的支持。它除了在服务器操作系统方面保持着强劲的发展势头以外，在个人电脑、嵌入式系统上都有着长足的进步。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善这个操作系统，使其最大化地适应用户的需要。Linux不仅系统性能稳定，而且是开源软件。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux操作系统不仅仅是被网络运维人员当作服务器使用，Linux既可以当作服务器，又可以当作网络防火墙是Linux的 一大亮点。Linux与其他操作系统相比 ，具有开放源码、没有版权、技术社区用户多等特点 ，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈 ，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台Linux 的历史Linux操作系统的诞生、发展和成长过程始终依赖着五个重要支柱：Unix操作系统、MINIX操作系统、GNU计划、POSIX标准和Internet网络。20世纪80年代，计算机硬件的性能不断提高，PC的市场不断扩大，当时可供计算机选用的操作系统主要有Unix、DOS和MacOS这几种。Unix价格昂贵，不能运行于PC；DOS显得简陋，且源代码被软件厂商严格保密；MacOS是一种专门用于苹果计算机的操作系统。此时，计算机科学领域迫切需要一个更加完善、强大、廉价和完全开放的操作系统。由于供教学使用的典型操作系统很少，因此当时在荷兰当教授的美国人AndrewS.Tanenbaum编写了一个操作系统，名为MINIX，为了向学生讲述操作系统内部工作原理。MINIX虽然很好，但只是一个用于教学目的的简单操作系统，而不是一个强有力的实用操作系统，然而最大的好处就是公开源代码。全世界学计算机的学生都通过钻研MINIX源代码来了解电脑里运行的MINIX操作系统，芬兰赫尔辛基大学大学二年级的学生Linus Torvalds就是其中一个，在吸收了MINIX精华的基础上，Linus于1991年写出了属于自己的Linux操作系统，版本为Linux0.01，是Linux时代开始的标志。他利用Unix的核心，去除繁杂的核心程序，改写成适用于一般计算机的x86系统，并放在网络上供大家下载，1994年推出完整的核心Version1.0，至此，Linux逐渐成为功能完善、稳定的操作系统，并被广泛使用。Linux 系统的应用服务器系统：Web应用服务器、数据库服务器、接口服务器、DNS、FTP等等；嵌入式系统：路由器、防火墙、手机PDA、IP分享器、交换器、家电用品的微电脑控制器等等，高性能运算、计算密集型应用；Linux有强大的运算能力。桌面应用系统移动手持系统Linux 的版本Linux的版本分为两种：内核版本和发行版本。内核版本是指在linus领导下的内核小组开发维护的系统内核的版本号。发行版本是一些组织和公司根据自己发行版的不同而自定的。Linux 的主流版本Linux MintLinux Mint是一个基于Ubuntu的发行版，最早于2006年由居住在爱尔兰的法国出生的IT专家Clement Lefebvre发布。最初维护一个专门为新Linux用户提供帮助，技巧和文档的Linux网站，笔者看到了开发Linux发行版的必要性，该发行版致力于解决那些技术性较强的产品的使用问题，让它们更易于使用。在他的网站上向访问者征求反馈意见之后，他继续把许多人提到的“改进的Ubuntu”或“Ubuntu完善版”的东西建立起来。注：Ubuntu就是以易用，对新手友好著称的。可想而知Mint的目标更进一步，让Linux更加的贴近了普通用户。但是，Linux Mint不仅仅是一个具有新的应用程序和更新的桌面主题的Ubuntu。自开始以来，开发人员一直在增加各种Mint下的图形工具以提高可用性;这包括mintDesktop – 用于配置桌面环境的实用程序，mintMenu – 一个新的，优雅的菜单结构，以方便导航，mintInstall – 一个易于使用的软件安装程序，mintUpdate – 一个软件更新程序，提供了一些更突出的几个工具和数百个额外的改进。该项目还开发了很多替代的专有程序以避免一些潜在的法律版权问题，其中包括专利和专利设计的多媒体编解码器，这些编解码器在很多发行版中通常是不存在的。因此，Mint在易用性方面的声誉得到了进一步的加强，也许Linux Mint的最佳特性之一就是开发人员倾听用户的意见，并总是快速地实施好的建议。因为Linux Mint是可以免费下载，因此该项目通过捐赠，广告和专业支持服务获得收入。它没有固定的发布时间表或者计划的功能列表，但是在每个Ubuntu长期支持版本发布几周后，可以预期Linux Mint的新版本。除Mint的MATE和Cinnamon桌面两个主要版本之外，该项目还使用包括KDE和Xfce在内的其他桌面版本构建版本。这些版本通常在两个“主要”版本几周后完成，有时可能会缺少一些主要分支中中的一些“Mint”工具和其他功能。 Mint系列的另一个版本是基于Debian稳定版分支的“Debian版”。 Linux Mint的Debian版本提供了非常稳定的基础，而桌面软件包的更新速度比Mint的“主要分支”版本更快。 Linux Mint不适用软件自由原则，也不会发布安全公告。优点：精心整理的内部开发的“Mint”工具，数百个用户友好的增强功能，包含多媒体编解码器缺点：“社区”版本，因此可能并不总是包含最新的功能。另外，项目不会发布安全建议软件包管理： mintInstall包管理器,使用DEB包（与Ubuntu兼容）可用的版本：“主”版本（MATE和Cinnamon桌面），“社区”版本（KDE和Xfce桌面），Linux Mint“Debian”版本（MATE或Cinnamon桌面）UbuntuUbuntu的推出是在2004年9月首次宣布的。尽管这个项目在Linux发行版中是一个相对较新的，但是它的邮件列表很快就被热情的用户和开发人员所占领。随后的几年中，Ubuntu发展成为最受欢迎的桌面Linux发行版，并为开发易于使用和免费的桌面操作系统做出了巨大贡献，该操作系统成为市场上专有桌面操作系统强有力的竞争者。Ubuntu成功的原因是什么？首先，这个项目是由南非千万富翁，前Debian开发人员和全球第二位太空游客Mark Shuttleworth共同创建的，该公司是位于马恩岛的Canonical Ltd公司，目前正在为该项目提供资金。其次，Ubuntu从其他类似项目的错误中吸取教训，并从一开始就避免了这些错误 – 它创建了一个优秀的基于Web的基础架构，其中包含Wiki风格的文档，创造性的bug报告功能以及专业的管理方法。第三，由于其富有的创始人，Ubuntu能够向所有感兴趣的用户免费发送CD，从而有助于分发的快速普及。在技术方面，Ubuntu基于Debian“Sid”（不稳定分支），但是使用的是GNOME，Firefox和LibreOffice等一些著名软件包的最新版本。它使用称为“Unity”独创的用户界面。它具有可预测的6个月发布时间表，外加一个长期支持（LTS）版本，支持5年的安全更新，具体取决于版本（非LTS版本支持9个月）。 Ubuntu的其他特殊功能包括可安装的Live DVD，独占应用和桌面主题，Windows用户的迁移助理，支持3D桌面效果等最新技术，为ATI和NVIDIA图形卡以及无线网络轻松安装专有设备驱动程序，并为非免费或专利设计的媒体编解码器提供按需支持。优点：固定发布周期和支持期; 具有5年安全更新的长期支持（LTS）变体;新手友好; 丰富的文档，官方和用户无私贡献缺点：与Debian有一定的兼容性问题; 频繁的重大更新可能流失一些用户，Unity用户界面被批评为更适合移动设备，而不是电脑; 非LTS版本只有9个月的安全支持软件包管理：使用DEB包的高级包工具（APT）其他衍生版：Ubuntu，Kubuntu，Xubuntu，Lubuntu，Ubuntu GNOME，Ubuntu MATE，Ubuntu Budgie，Ubuntu Kylin，适用于64位（x86_64）处理器的Ubuntu Studio;基于Ubuntu的发行版： Linux Mint (桌面版本), elementary OS (桌面版本), Zorin OS (桌面版本), Pinguy OS (桌面版本),Trisquel GNU/Linux (自由软件), Bodhi Linux (Enlightenment桌面)Debian GNU/LinuxDebian GNU / Linux于1993年首次公布。它的创始人Ian Murdock的初始想法是在空闲时间创建一个由数百名志愿者开发的完全非商业项目。当时怀疑论者远远超过乐观主义者，似乎注定要夭折收尾，但实际情况却恰恰相反。 Debian不仅幸存下来，而且还在不到十年的时间里成为了最大的Linux发行版，也是有史以来创建的最大的协作软件项目！Debian GNU / Linux的成功可以用下面的数字来说明。它由1000多名志愿者开发，它的软件库包含近50,000个二进制包（编译为8个处理器架构），有120个基于Debian的发行版和live CD。这些数字是任何其他基于Linux的操作系统无法比拟的。 Debian主要有三个主要分支（或四个，如果包括增加稳定性的“实验”分支）：“unstable”（也称为“sid”），“testing”和“stable ”。软件包和功能的逐步整合和稳定性，以及项目完善的质量控制机制，使得Debian获得了今天可用的最佳测试和无缺陷发行版之一的声誉。然而，这种冗长而复杂的开发风格也有一些缺点：Debian的稳定版本并不是特别新，特别是因为新的稳定版本每1 – 3年才会发布一次。那些喜欢最新软件包和技术的用户被迫使用Debian testing(测试)或unstable(不稳定)分支。 Debian高度民主的结构导致了有争议的决定，并引发了开发者之间的分歧。这导致了项目的停滞不前，没有能将项目快速推进。优点：非常稳定;卓越的质量控制;包括超过30,000个软件包;支持比任何其他Linux发行版更多的处理器体系结构缺点：保守 – 由于支持许多处理器架构，并不总是包含更新的技术;缓释周期（每1 – 3年稳定释放一次）;对开发者邮件列表和博客的讨论有时是不可能的软件包管理：使用DEB包的高级包工具（APT）可用的版本：12个处理器架构的安装CD/DVD和live CD映像，包括来自Intel，AMD，Power和其他所有32位和64位处理器基于Debian的替代方案：Ubuntu, SparkyLinux(Enlightenment, JWM, LXDE, MATE, Openbox, Razor-qt, Xfce桌面), SolydXK (Xfce或KDE), KNOPPIX (LXDE), Tanglu(GNOME, KDE), siduction (LXQt)MageiaMageia可能是这个列表中的最新发行版，但它的来源可以追溯到1998年7月，当时GalDuval发布了Mandrake Linux。当时它只是一个红帽Linux的分支，KDE作为默认的桌面，更完善的硬件支持和一些用户友好的功能，加上媒体的积极评论，它获得了一定的知名度。Mandrake Linux后来变成了一个商业版本，并在2010年几乎破产之前更名为Mandriva（为了避免一些与商标有关的麻烦，并纪念与巴西的Conectiva合并），最终由一家俄罗斯风险投资公司拯救了，新管理层因为巨大的开支而决定在该公司巴黎总部裁减大部分的Mandriva开发人员。在没有工作的情况下，他们决定组建一个Mageia，这个社区项目是Mandrake和Mandriva的核心延续，或许比Mandriva本身更为合理。Mageia主要是一个桌面版本。其最受欢迎的功能是最优秀的软件应用，精良的系统管理套件（Mageia控制中心），吸引了大量志愿者贡献者以及广泛的国际化支持。它具有最简单但功能强大的系统安装程序之一，同时还可以使用KDE或GNOME桌面和全面的语言支持。而且可以来直接从桌面安装系统，无需刻录到U盘。该发行版具有良好的软件包管理功能，具有强大的命令行选项和图形化软件管理模块，可以轻松访问数千个软件包。独特的Mageia控制中心随着每个版本的不断改进，为Linux的新手提供了一个强大的工具来配置他们的计算机的任何方面，而无需使用终端命令行。尽管Mageia自2010年9月成立以来一直处于起步阶段，但仍有人担心其是否有能力维持长期开发的工作，毕竟大部分工作是由志愿者在完成的。此外，它缺乏一些更大的Linux发行版的完善的基础架构。项目的文档也需要做一些改进，而9个月的发布周期在引起新闻和媒体兴趣方面也可以被视为一个缺点，特别是与其他使用6个月的短期开发过程的主要发行版相比。优点：适合初学者;优秀的中央配置工具;支持数十种语言的开箱即用支持;可安装的Live镜像缺点：与Mandriva分开之后，缺乏声誉和资源，有人担心开发者没有能力长期维持开发软件包管理：使用RPM软件包，Rpmdrake（URPMI的图形前端）的URPMI包管理器可用版本：用于32位（i586）和64位（x86_64）处理器的安装DVD;可安装32位（i586）处理器的live CDFedora虽然Fedora仅在2004年9月才正式发布，但它的起源可追溯到1995年，当时它是由Bob Young和Marc Ewing以Red Hat Linux的名义发布的。该公司的第一款产品Red Hat Linux 1.0“母亲节”在同一年发布，之后很快又进行了一些错误修复更新。 1997年，红帽公司推出了革命性的RPM软件包管理系统，具有依赖解决方案和其他先进功能，极大地促进了分发的迅速普及并超越Slackware Linux成为世界上使用最广泛的Linux发行版。在以后的几年中，红帽将按照正常的6个月发布时间表进行开发。在2003年刚发布Red Hat Linux 9之后，该公司对其产品系列进行了一些根本性的改变。它保留了红帽商业产品的商标，特别是红帽企业Linux，并引入了Fedora Core（后来改名为Fedora），这是一个红帽赞助的，但面向社区的发行版，专为“Linux爱好者”设计。从刚开始的批评后，Linux社区接受了“新的”发行版作为Red Hat Linux的核心延续版本。 Fedora重新成为一个高质量的版本，成为市场上最受欢迎的操作系统之一。与此同时，红帽公司迅速成为全球规模最大，盈利能力最强的Linux公司，拥有创新的产品阵容，出色的客户支持以及红帽认证工程师（RHCE）认证计划等其他受欢迎的计划。尽管Fedora的方向仍然由Red Hat，Inc.主要控制，并且该产品有时被看作是对红帽企业Linux的测试平台(小白鼠)，无论是正确的还是错误的，无可否认，Fedora是最具创新性的分发版之一。它对Linux内核，glibc和GCC的贡献是众所周知的，它最近集成了SELinux功能，虚拟化技术，系统服务管理器，先进的日志文件系统以及其他企业级功能， 。不利的一面是，Fedora仍然缺乏明确的面向桌面的策略，以使产品更容易用于“Linux爱好者”目标以外的用户。优点：高度创新;突出的安全功能;大量支持的软件包;严格遵守自由软件的理念;具有许多流行桌面环境的Live CD的可用性缺点：Fedora的优先级倾向于倾向于企业功能，而不是桌面可用性;一些出色的边缘功能，比如早期切换到KDE 4和GNOME 3，偶尔会疏远一些桌面用户软件包管理：使用RPM软件包的YUM图形和命令行工具可用的版本：用于32位（i386）和64位（x86_64）处理器的Fedora;还有GNOME，KDE，LXDE，MATE和Xfce桌面的CD版本CentOSCentOS于2003年底推出，是一个社区项目，目标是将红帽企业Linux（RHEL）的源代码重建为可安装的Linux发行版，并为所有包含的软件包提供及时的安全更新。更直白地说，CentOS是一个RHEL克隆版。这两个发行版之间唯一的技术差异就是品牌 – CentOS用自己的所有代码取代了所有的红帽商标和标识。尽管如此，红帽与CentOS之间的关系仍然保持友好，许多CentOS开发者与Red Hat保持着紧密的联系，甚至直接受雇于Red Hat。CentOS经常被看作是一个可靠的服务器发行版。它配备了经过良好测试和稳定的Linux内核和软件包，构成了其母公司Red Hat Enterprise Linux的基础。尽管是志愿者维护的一个社区项目，但它已经赢得了市场上更高端服务器产品（尤其是经验丰富的Linux系统管理员）的稳定，免费替代品的声誉。 CentOS也适合作为企业桌面解决方案，特别是在稳定性，可靠性和长期支持优于最新软件和功能的地方。像RHEL一样，CentOS支持大约7 – 10年的安全更新。尽管有其优势，CentOS可能不是所有部署方案中的最佳解决方案。那些喜欢使用最新的Linux技术和最新的软件包进行发布的用户应该到别处去看看。主要的CentOS版本是在RHEL版本的基础上发布的，每2 – 3年才会发布一次，而小版本（例如5.1）则以6到9个月为间隔。小发行通常不包含任何主要功能（虽然有时包括支持更新的硬件），只有少数软件包可能会更新到新版本。 Linux内核，基本系统和大多数应用程序版本保持不变，但偶尔也可以在试验的基础上提供重要软件包（例如LibreOffice或Firefox）的新版本。当然也有一个分支项目，CentOS也为其发行版的用户构建了更新的软件包，但是包含它们的软件库默认是不启用的，因为它们可能会破坏上游的兼容性。优点：非常稳定和可靠;免费下载和使用;有7年以上的免费安全更新;缺点：缺乏最新的Linux技术;有时该项目未能履行其及时提供安全更新和新稳定版本的承诺软件包管理：使用RPM软件包的YUM图形和命令行工具可用版本：用于i386和x86_64处理器的安装DVD和可安装的Live CD（GNOME）;旧版本（3.x和4.x）也可用于Alpha，IA64和IBM z系列（s390，s390x）处理器。其他RHEL克隆和基于CentOS的发行版：Scientific Linux，Springdale Linux，SME服务器，Rocks Cluster Distribution，Oracle Enterprise LinuxPCLinuxOSPCLinuxOS于2003年由比尔·雷诺兹（Bill Reynolds）首先宣布，被称为“Texstar”。在创建自己的发行版之前，Texstar已经是Mandrake Linux社区用户的知名开发人员构建的最新的RPM包，并提供免费下载。 2003年，他决定建立一个新的发行版，最初基于Mandrake Linux，但有几个显著的可用性改进。理念是应该对初学者是友好的，具有专有内核模块，浏览器插件和媒体编解码器的开箱即用的支持，并应作为一个简单直观的图形安装程序的Live CD。几年后的发展，PCLinuxOS正在迅速接近其预期的状态。就可用性而言，该项目为大多数Windows到Linux移民希望从他们的新操作系统中获得的许多技术提供了开箱即用的支持。在软件方面，PCLinuxOS是一个面向KDE的发行版，具有定制且始终最新版本的流行桌面环境。不断增长的软件存储库包含其他桌面，并为许多常见任务提供各种各样的桌面软件包。对于系统配置，PCLinuxOS保留了很多Mandriva优秀的控制中心，但是用APT和Synaptic（一个图形化的包管理前端）取代了它的包管理系统。不利的一面是，PCLinuxOS缺乏任何形式的路线图或发布目标。尽管越来越多的社区参与这个项目，大多数的发展和决策仍然掌握在Texstar的手中，他们在判断发布的稳定性时倾向于保守的一面。因此，PCLinuxOS的开发过程往往是艰巨的。例如，尽管频繁要求64位版本，但开发者直到最近才开始生产64位版本。此外，该项目不提供任何安全建议，而是依靠用户通过所包括的管理工具保持系统最新的状态。优点：对图形驱动程序，浏览器插件和媒体编解码器的开箱即用支持;滚动更新机制;最新的软件缺点：对非英语语言没有开箱即用的支持;缺乏发布计划和安全建议软件包管理：使用RPM包的高级包工具（APT）可用的版本：KDE，完整的Monty，KDE Minime，LXDE，LXDE Mini，Openbox，Openbox盆景，用于64位（x86_64）处理器体系结构的KDELinux 目录结构/root — 启动Linux时使用的一些核心文件。如操作系统内核、引导程序Grub等。home — 存储普通用户的个人文件ftp — 用户所有服务httpdsambauser1user2bin — 系统启动时需要的执行文件（二进制）sbin — 可执行程序的目录，但大多存放涉及系统管理的命令。只有root权限才能执行proc — 虚拟，存在linux内核镜像；保存所有内核参数以及系统配置信息1 — 进程编号usr — 用户目录，存放用户级的文件bin — 几乎所有用户所用命令，另外存在与/bin，/usr/local/binsbin — 系统管理员命令，与用户相关，例如，大部分服务器程序include — 存放C/C++头文件的目录lib — 固定的程序数据local — 本地安装软件保存位置man — 手工生成的目录info — 信息文档doc — 不同包文档信息tmpX11R6 — 该目录用于保存运行X-Window所需的所有文件。该目录中还包含用于运行GUI要的配置文件和二进制文件。X386 — 功能同X11R6，X11 发行版5 的系统文件boot — 引导加载器所需文件，系统所需图片保存于此lib — 根文件系统目录下程序和核心模块的公共库modules — 可加载模块，系统崩溃后重启所需模块dev — 设备文件目录etc — 配置文件skel — home目录建立，该目录初始化sysconfig — 网络，时间，键盘等配置目录varfilelib — 该目录下的文件在系统运行时，会改变local — 安装在/usr/local的程序数据，变化的lock — 文件使用特定外设或文件，为其上锁，其他文件暂时不能访问log — 记录日志run — 系统运行合法信息spool — 打印机、邮件、代理服务器等假脱机目录tmpcatman — 缓存目录mnt — 临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备挂载在这个目录上，这样我们就可访问文件了。tmp — 临时文件目录，系统启动后的临时文件存放在/var/tmplost+found — 在文件系统修复时恢复的文件/：根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中/bin:/usr/bin:可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。/boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。建议单独分区，分区大小100M即可/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt。/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。注：/etc/X11存放与x windows有关的设置。/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，~表示当前用户的家目录，~test表示用户test的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据/lib:/usr/lib:/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules。/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found/mnt:/media：光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载。/opt：给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*等/root：系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。/sbin:/usr/sbin:/usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。/tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下/srv：服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内/usr：应用程序存放目录，/usr/bin存放应用程序，/usr/share存放共享数据，/usr/lib存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local:存放软件升级包。/usr/share/doc:系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容建议单独分区，设置较大的磁盘空间/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件/var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间Linux 的常用命名磁盘管理ls 命令ls（list）功能：列出目录内容格式：ls [参数] [文件或目录]-a或–all &emsp; 显示所有文件和目录。注意隐藏文件、特殊目录、. 和 .. 。-l &emsp; 使用详细格式列表，ls -l 可简化成 ll 。-t &emsp; 用文件和目录的更改时间排序。-r &emsp; 反向排序–help &emsp; 在线帮助cd 命令cd（change directory）功能：切换目录语法：cd [目录]常用cd ~ ,切换到当前用户目录cd / ,切换到根目录cd - ,切换到上一次访问的目录cd .. ,切换到上一级目录cd ,切换到缺省当前用户目录pwd 命令pwd（print working directory）功能：显示工作目录mkdir 命令mkdir（make directory）功能：创建目录-p &emsp; 父目录不存在情况下先生成父目录（parents）-v &emsp; 显示命令执行过程中的详细信息文件管理 - 文件浏览cat 命令cat（catenate）功能：显示文本文件内容语法：cat [文件] ,显示指定文件的所有内容more 命令more功能：分页显示文件内容，还支持直接跳转行等功能。语法：more file操作Enter &emsp; 向下n行，需要定义。默认1行空格键 &emsp; 向下滚动一屏 或 Ctrl+FB &emsp; 返回上一页 或 Ctrl+Bq &emsp; 退出moreless 命令less 功能：分页显示文件内容，操作更详细。语法：less[参数] 文件-m &emsp; 显示类似 more 命令的百分比-N &emsp; 显示每行的行号操作空格键：前进一页 或 page downb：后退一页 或 page upd：前进半页u：后退半页回车键：前进一行 或 方向键向下y：后退一行 或 方向键向上/字符串：向下搜索？字符串：向上搜索v：进入vim编辑器左右方向键：相当于水平滚动条q：退出tail 命令功能：用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。格式：tail[必要参数] [选择参数] [文件]-n&lt;行数&gt; &emsp; 显示行数-f &emsp; 循环读取&amp; 表示后台运行，否则占用终端ctrl+C退出文件管理-文件操作cp 命令cp(copy)功能：复制文件或目录语法：cp [参数] [源文件或目录] [目标文件或目录]-r 或 –recursive 递归处理，将指定目录下的文件与子目录一并处理。mv 命令mv(move)功能：移动或更名现有的文件或目录。语法：mv [源文件或目录] [目标文件或目录]-f 或 –force &emsp; 若目标文件或目录与现有的文件或目录重复，则直接覆盖现有的文件 或 目录。rm 命令rm(remove) rm 功能：删除文件或目录语法：rm[-dfirv] [–help] [–version] [文件或目录…]-f 或 –force &emsp; 强制删除文件或目录-r 或 -R 或 –recursive &emsp; 递归处理，将指定目录下的所有文件及子目录一并处理。find 命令find 功能：查找文件或目录语法：find [目录…] [参数]-name &emsp; 指定字符串作为寻找文件或目录的范本样式。文档编辑vi 或 vim 命令基本操作输入 “vim 文件名” 进入 “一般模式”按下 “i” 从一般模式，进入 “插入模式”按下 “esc” 从 “插入模式” 退出到 “一般模式”在 “一般模式” 下，输入 “：wq”，退出编辑vi 基本概念基本上 vi 可以分为三种状态，分别是命令模式（command mode）、插入模式（insert mode）和底行模式（last line mode），各模式的功能区分如下：命令行模式 command mode控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入 inert mode 下，或者到 last line mode。插入模式（insert mode）只有在 insert mode 下，才可以做文字输出，按 [ESC] 键可回到命令行模式。底行模式（last line mode）将文件保存或退出 vi，也可以设置编辑环境，如寻找字符串、列出行号….等。常用命令分组命令描述&emsp;i在光标前插入&emsp;shift + i在光标当前行开始插入插入a在光标后插入(从一般模式进入到插入模式)shift+a在光标当前行末尾插入&emsp;o在光标当前行的下一行插入新行&emsp;shift+o在光标当前行的上一行插入新行&emsp;&emsp;&emsp;复制或粘贴(在插入模式下)yy单行复制将光标移动到将要复制的行处复制或粘贴(在插入模式下)nyy多行复制将光标移动到将要复制的首行处复制或粘贴(在插入模式下)p粘贴将光标移动到将要粘贴的行处&emsp;&emsp;&emsp;定位gg到文本的第一行定位shift+g到文本的最后一行&emsp;&emsp;&emsp;删除dd删除光标所在行删除ndd删除n行&emsp;&emsp;&emsp;退出:q退出vi（没有做任何修改时）退出:q!强制退出文件退出:w保存不退出退出:wq保存后退出管道 |linux提供管道符号 “|”。作用是 “命令1” 的输出内容，将作为 “命令2” 的输入内容，一般与 grep 命令一起使用。格式： 命令1 | 命令2grep 命令grep 全称是 Global Regular Expression Print,表示全局正则表达式版本功能：用于过滤/搜索的特定字符。可使用正则表达式能多种命令配合使用，使用上十分灵活。格式：grep [option] pattern [file]-i 或 –ignore-case &emsp; #忽略字符大小写的差别系统命令ps 命令功能：ps命令是Process Status的缩写。提供对进程的一次性查看。及执行 ps 命令的那个时刻进程信息格式：ps[参数]-e &emsp; 此参数的效果和指定 “A” 参数相同，显示所有程序-f &emsp; 显示UID,PPIP,C与STIME栏位kill 命令kill功能：删除执行中的程序或工作。语法：kill[参数] [程序]-l&lt;信息编号&gt; &emsp; 若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。kill -9 &emsp; 表示强制终止ifconfig 命令功能：显示网络设备命令：ifconfigping 命令功能：测试与目标主机的连通性命令：ping 主机名或ip地址备份压缩：tar命令tar功能：文件备份压缩语法：tar命令-c &emsp; 建立一个压缩文件的参数指令（create）–压缩-x &emsp; 解开一个压缩文件的参数指令（extract）–解压-z &emsp; 是否需要用 gzip 压缩-v &emsp; 压缩的过程中显示文件（verbose）-f &emsp; 使用档名，在 f 之后要立即接档名（file）常用解压参数组合：zxvf常用压缩参数组合：zcvf关机重启重启命令：reboot关机命令：halt 立刻关机文件权限：chmod 命令chmod（change mode）功能：变更文件或目录的权限。语法：chmod[参数] [&lt;权限范围&gt;&lt;符号&gt;&lt;权限代号&gt;]-R 或 –recursive 递归处理，将指定目录下的所有文件及目录一并处理。权限范围的表示法如下：u: User,即文件或目录的拥有者。g: Group,即文件或目录的所属群组。o: Other,除了文件或目录拥有者或所属群组之外，其他用户皆属于这个范围。a: All，即全部的用户，包含拥有者，所属群组以及其他用户符号：+ &emsp; 添加权限— &emsp; 取消权限有关权限代号的部分，列表于下：r：读取权限，数字代码为 “4”。w：写入权限，数字代号为 “2”。x：执行或切换权限，数字代号为 “1”。-：不具有任何权限，数字代号为 “0”。","categories":[{"name":"Linux","slug":"Linux","permalink":"https://me.obey.fun/categories/Linux/"}],"tags":[{"name":"CentOS","slug":"CentOS","permalink":"https://me.obey.fun/tags/CentOS/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://me.obey.fun/tags/Ubuntu/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"https://me.obey.fun/categories/Linux/"}]},{"title":"初识Dubbo","slug":"初识Dubbo","date":"2019-07-02T14:27:15.000Z","updated":"2019-07-03T14:27:15.000Z","comments":true,"path":"初识Dubbo.html","link":"","permalink":"https://me.obey.fun/初识Dubbo.html","excerpt":"","text":"初入Dubbo什么是dubboDubbo是Alibaba开源的分布式服务框架，它最大的特点是按照分层的方式来架构，使用这种方式可以使各个层之间解耦合（或者最大限度地松耦合）。从服务模型的角度来看，Dubbo采用的是一种非常简单的模型，要么是提供方提供服务，要么是消费方消费服务，所以基于这一点可以抽象出服务提供方（Provider）和服务消费方（Consumer）两个角色。关于注册中心、协议支持、服务监控等内容，详见后面描述。 Webservice也是一种服务框架，但是webservice并不是分布式的服务框架，他需要结合F5实现负载均衡。因此，dubbo除了可以提供服务之外，还可以实现软负载均衡。它还提供了两个功能Monitor 监控中心和调用中心。这两个是可选的，需要单独配置。Dubbo是阿里巴巴SOA服务化治理方案的核心框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。其核心部分包含:远程通讯: 提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。集群容错: 提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。自动发现: 基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。那么，Dubbo能做什么？透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。Dubbo产生的背景随着互联网的发展，网站应用的规模不断扩大，常规的垂直应用架构已无法应对，分布式服务架构以及流动计算架构势在必行，亟需一个治理系统确保架构有条不紊的演进。单一应用架构当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM) 是关键。垂直应用架构当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC) 是关键。分布式服务架构当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC) 是关键。流动计算架构当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA) 是关键。Dubbo的诞生在互联网的发展过程中，在以前，我们只需要一个服务器，将程序全部打包好就可以，但是，随着流量的增大，常规的垂直应用架构已无法应对，所以，架构就发生了演变。单一应用架构应用和数据库单独部署应用和数据库集群部署数据库压力变大，读写分离使用缓存技术加快速度数据库分库分表应用分为不同的类型拆分发展到这个阶段的时候，我们发现，应用与应用之间的关系已经十分的复杂了，就会出现以下几个问题（以下摘录于官网）：当服务越来越多时，服务 URL 配置管理变得非常困难，F5 硬件负载均衡器的单点压力也越来越大。当进一步发展，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。接着，服务的调用量越来越大，服务的容量问题就暴露出来，这个服务需要多少机器支撑？什么时候该加机器？为了解决这由于架构的演变所产生的问题几个问题，于是，dubbo 产生了。当然，解决这个问题的技术不止 dubbo 。Dubbo技术架构我们已经非常清楚的知道为什么在我们的系统中需要 Dubbo 这项技术了，下面，我们接着唠叨唠叨 Dubbo 的架构。首先，上一张图（摘自官网）。看到图之后，可能你对上面的几个概念还是一脸懵逼，无从下手，下面，带你看看这几个角色到底是什么意思？节点角色说明节点角色说明Provider暴露服务的服务提供方Consumer调用远程服务的服务消费方Registry服务注册于发现的注册中心Monitor统计服务的调用次数和调用时间的监控中心Container服务运行容器看了这几个概念后似乎发现，其实 Dubbo 的架构也是很简单的（其实现细节是复杂的），为什么这么说呢，有没有发现，其实很像 生产者-消费者 模型。只是在这种模型上，加上了 注册中心和监控中心 ，用于管理提供方提供的 url ，以及管理整个过程。那么，整个发布-订阅的过程就非常的简单了。启动容器，加载， 运行服务提供者 。服务提供者在启动时，在注册中心 发布注册 自己提供的 服务 。服务消费者在启动时，在注册中心 订阅 自己所需的 服务 。如果考虑 失败或变更 的情况，就需要考虑下面的过程。注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。通过这番讲解，我相信 Dubbo 的架构我们也轻车熟路了，那就直接就可以直接上手了。Dubbo开始入门服务端首先，我们先把服务端的接口写好，因为其实 dubbo 的作用简单来说就是给消费端提供接口。接口定义1234567 /** * xml方式服务提供者接口 */ public interface ProviderService &#123; String SayHello(String word); &#125;这个接口非常简单，只是包含一个 SayHello 的方法。接着，定义它的实现类。123456789/** * xml方式服务提供者实现类 */public class ProviderServiceImpl implements ProviderService&#123; public String SayHello(String word) &#123; return word; &#125;&#125;这样我们就把我们的接口写好了，那么我们应该怎么将我们的服务暴露出去呢？导入 maven 依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.ouyangsihai&lt;/groupId&gt; &lt;artifactId&gt;dubbo-provider&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.6.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.netty&lt;/groupId&gt; &lt;artifactId&gt;netty-all&lt;/artifactId&gt; &lt;version&gt;4.1.32.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-framework&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;这里使用的 dubbo 的版本是 2.6.6 ，需要注意的是，如果你只导入 dubbo 的包的时候是 会报错 的， 找不到 netty 和 curator 的依赖 ，所以，在这里我们需要把这两个的依赖加上，就不会报错了。另外，这里我们使用 zookeeper 作为注册中心。到目前为止，dubbo 需要的环境就已经可以了，下面，我们就把上面刚刚定义的接口暴露出去。暴露接口（xml 配置方法）首先，我们在我们项目的 resource 目录下 创建 META-INF.spring 包 ，然后再创建 provider.xml 文件，名字可以任取哦，如下图。12345678910111213141516171819202122232425262728293031&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt; &lt;dubbo:application name=\"provider\" owner=\"sihai\"&gt; &lt;dubbo:parameter key=\"qos.enable\" value=\"true\"/&gt; &lt;dubbo:parameter key=\"qos.accept.foreign.ip\" value=\"false\"/&gt; &lt;dubbo:parameter key=\"qos.port\" value=\"55555\"/&gt; &lt;/dubbo:application&gt; &lt;dubbo:monitor protocol=\"registry\"/&gt; &lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt; &lt;!--&lt;dubbo:registry address=\"N/A\"/&gt;--&gt; &lt;dubbo:registry address=\"N/A\" /&gt; &lt;!--当前服务发布所依赖的协议；webserovice、Thrift、Hessain、http--&gt; &lt;dubbo:protocol name=\"dubbo\" port=\"20880\"/&gt; &lt;!--服务发布的配置，需要暴露的服务接口--&gt; &lt;dubbo:service interface=\"com.sihai.dubbo.provider.service.ProviderService\" ref=\"providerService\"/&gt; &lt;!--Bean bean定义--&gt; &lt;bean id=\"providerService\" class=\"com.sihai.dubbo.provider.service.ProviderServiceImpl\"/&gt;&lt;/beans&gt;上面的文件其实就是类似 spring 的配置文件，而且，dubbo 底层就是 spring。节点：dubbo:application 就是整个项目在分布式架构中的唯一名称，可以在 name 属性中配置，另外还可以配置 owner 字段，表示属于谁。 下面的参数是可以不配置的，这里配置是因为出现了端口的冲突，所以配置。节点：dubbo:monitor 监控中心配置， 用于配置连接监控中心相关信息，可以不配置，不是必须的参数。节点：dubbo:registry 配置注册中心的信息，比如，这里我们可以配置 zookeeper 作为我们的注册中心。 address 是注册中心的地址，这里我们配置的是 N/A 表示由 dubbo 自动分配地址。或者说是一种直连的方式，不通过注册中心。节点：dubbo:protocol 服务发布的时候 dubbo 依赖什么协议，可以配置 dubbo、webserovice、Thrift、Hessain、http等协议。节点：dubbo:service 这个节点就是我们的重点了，当我们服务发布的时候，我们就是通过这个配置将我们的服务发布出去的。 interface 是接口的包路径， ref 是需要配置的接口的 bean。最后，我们需要像配置 spring 的接口一样，配置接口的 bean。到这一步，关于服务端的配置就完成了，下面我们通过 main 方法 将接口发布出去。发布接口1234567891011121314151617181920212223242526package com.sihai.dubbo.provider;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ProtocolConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.alibaba.dubbo.config.ServiceConfig;import com.alibaba.dubbo.container.Main;import com.sihai.dubbo.provider.service.ProviderService;import com.sihai.dubbo.provider.service.ProviderServiceImpl;import org.springframework.context.support.ClassPathXmlApplicationContext;import java.io.IOException;/** * xml方式启动 * */public class App &#123; public static void main( String[] args ) throws IOException &#123; //加载xml配置文件启动 ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(\"META-INF/spring/provider.xml\"); context.start(); System.in.read(); // 按任意键退出 &#125;&#125;发布接口非常简单，因为 dubbo 底层就是依赖 spring 的，所以，我们只需要通过 ClassPathXmlApplicationContext 拿到我们刚刚配置好的 xml ，然后调用 context.start() 方法就启动了。看到下面的截图，就算是启动成功了，接口也就发布出去了。你以为到这里就结束了了，并不是的，我们拿到 dubbo 暴露出去的 url 分析分析。dubbo 暴露的 url1dubbo://192.168.234.1:20880/com.sihai.dubbo.provider.service.ProviderService?anyhost=true&amp;application=provider&amp;bean.name=com.sihai.dubbo.provider.service.ProviderService&amp;bind.ip=192.168.234.1&amp;bind.port=20880&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.sihai.dubbo.provider.service.ProviderService&amp;methods=SayHello&amp;owner=sihai&amp;pid=8412&amp;qos.accept.foreign.ip=false&amp;qos.enable=true&amp;qos.port=55555&amp;side=provider&amp;timestamp=1562077289380分析首先，在形式上我们发现，其实这么牛逼的 dubbo 也是用 类似于 http 的协议 发布自己的服务的，只是这里我们用的是 dubbo 协议 。dubbo://192.168.234.1:20880/com.sihai.dubbo.provider.service.ProviderService 上面这段链接就是 ? 之前的链接，构成： 协议://ip:端口/接口 。发现是不是也没有什么神秘的。anyhost=true&amp;application=provider&amp;bean.name=com.sihai.dubbo.provider.service.ProviderService&amp;bind.ip=192.168.234.1&amp;bind.port=20880&amp;dubbo=2.0.2&amp;generic=false&amp;interface=com.sihai.dubbo.provider.service.ProviderService&amp;methods=SayHello&amp;owner=sihai&amp;pid=8412&amp;qos.accept.foreign.ip=false&amp;qos.enable=true&amp;qos.port=55555&amp;side=provider&amp;timestamp=1562077289380 ? 之后的字符串，分析后你发现，这些都是刚刚在 provider.xml 中配置的字段，然后通过 &amp; 拼接而成的，闻到了 http 的香味了吗？终于，dubbo 服务端入门了。下面我们看看拿到了 url 后，怎么消费呢？消费端上面提到，我们在服务端提供的只是点对点的方式提供服务，并没有使用注册中心，所以，下面的配置也是会有一些不一样的。消费端环境配置首先，我们在消费端的 resource 下建立配置文件 consumer.xml 。 下建立配置文件 consumer.xml 。123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:dubbo=\"http://code.alibabatech.com/schema/dubbo\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd\"&gt; &lt;!--当前项目在整个分布式架构里面的唯一名称，计算依赖关系的标签--&gt; &lt;dubbo:application name=\"consumer\" owner=\"sihai\"/&gt; &lt;!--dubbo这个服务所要暴露的服务地址所对应的注册中心--&gt; &lt;!--点对点的方式--&gt; &lt;dubbo:registry address=\"N/A\" /&gt; &lt;!--&lt;dubbo:registry address=\"zookeeper://localhost:2181\" check=\"false\"/&gt;--&gt; &lt;!--生成一个远程服务的调用代理--&gt; &lt;!--点对点方式--&gt; &lt;dubbo:reference id=\"providerService\" interface=\"com.sihai.dubbo.provider.service.ProviderService\" url=\"dubbo://192.168.234.1:20880/com.sihai.dubbo.provider.service.ProviderService\"/&gt; &lt;!--&lt;dubbo:reference id=\"providerService\" interface=\"com.sihai.dubbo.provider.service.ProviderService\"/&gt;--&gt;&lt;/beans&gt;分析发现这里的 dubbo:application 和 dubbo:registry 是一致的。dubbo:reference ：我们这里采用 点对点 的方式，所以，需要配置在服务端暴露的 url 。maven 依赖和服务端一样12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;com.ouyangsihai&lt;/groupId&gt; &lt;artifactId&gt;dubbo-consumer&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;com.ouyangsihai&lt;/groupId&gt; &lt;artifactId&gt;dubbo-provider&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!-- https://mvnrepository.com/artifact/com.alibaba/dubbo --&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.6.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.10&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.netty&lt;/groupId&gt; &lt;artifactId&gt;netty-all&lt;/artifactId&gt; &lt;version&gt;4.1.32.Final&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-framework&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.curator&lt;/groupId&gt; &lt;artifactId&gt;curator-recipes&lt;/artifactId&gt; &lt;version&gt;2.8.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt;调用服务123456789101112131415161718192021222324252627package com.sihai.dubbo.consumer;import com.alibaba.dubbo.config.ApplicationConfig;import com.alibaba.dubbo.config.ReferenceConfig;import com.alibaba.dubbo.config.RegistryConfig;import com.sihai.dubbo.provider.service.ProviderService;import org.springframework.context.support.ClassPathXmlApplicationContext;import java.io.IOException;/** * xml的方式调用 * */public class App &#123; public static void main( String[] args ) throws IOException &#123; ClassPathXmlApplicationContext context=new ClassPathXmlApplicationContext(\"consumer.xml\"); context.start(); ProviderService providerService = (ProviderService) context.getBean(\"providerService\"); String str = providerService.SayHello(\"hello\"); System.out.println(str); System.in.read(); &#125;&#125;这里和服务端的发布如出一辙。如此，我们就成功调用接口了。","categories":[{"name":"rpc框架","slug":"rpc框架","permalink":"https://me.obey.fun/categories/rpc框架/"},{"name":"SOA","slug":"rpc框架/SOA","permalink":"https://me.obey.fun/categories/rpc框架/SOA/"}],"tags":[{"name":"rpc","slug":"rpc","permalink":"https://me.obey.fun/tags/rpc/"},{"name":"SOA","slug":"SOA","permalink":"https://me.obey.fun/tags/SOA/"}],"keywords":[{"name":"rpc框架","slug":"rpc框架","permalink":"https://me.obey.fun/categories/rpc框架/"},{"name":"SOA","slug":"rpc框架/SOA","permalink":"https://me.obey.fun/categories/rpc框架/SOA/"}]},{"title":"Maven的使用与介绍","slug":"Maven的使用与介绍","date":"2019-06-08T09:25:39.000Z","updated":"2019-06-09T09:25:39.000Z","comments":true,"path":"Maven的使用与介绍.html","link":"","permalink":"https://me.obey.fun/Maven的使用与介绍.html","excerpt":"","text":"Maven的使用入门什么是MavenMaven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。Maven的功能Maven 能够帮助开发者完成以下工作：构建文档生成报告依赖SCMs发布分发邮件列表Maven的标准目录结构Maven 提倡使用一个共同的标准目录结构，Maven 使用约定优于配置的原则，大家尽可能的遵守这样的目录结构。如下所示：目录目的${basedir}存放pom.xml和所有的子目录${basedir}/src/main/java项目的java源代码${basedir}/src/main/resources项目的资源，比如说property文件，springmvc.xml${basedir}/src/test/java项目的测试类，比如说Junit代码${basedir}/src/test/resources测试用的资源${basedir}/src/main/webapp/WEB-INFweb应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面${basedir}/target打包输出目录${basedir}/target/classes编译输出目录${basedir}/target/test-classes测试编译输出目录Test.javaMaven只会自动运行符合该命名规则的测试类~/.m2/repositoryMaven默认的本地仓库目录位置Maven的特点项目设置遵循统一的规则。任意工程中共享。依赖管理包括自动更新。一个庞大且不断增长的库。可扩展，能够轻松编写 Java 或脚本语言的插件。只需很少或不需要额外配置即可即时访问新功能。基于模型的构建 − Maven能够将任意数量的项目构建到预定义的输出类型中，如 JAR，WAR 或基于项目元数据的分发，而不需要在大多数情况下执行任何脚本。项目信息的一致性站点 − 使用与构建过程相同的元数据，Maven 能够生成一个网站或PDF，包括您要添加的任何文档，并添加到关于项目开发状态的标准报告中。发布管理和发布单独的输出 − Maven 将不需要额外的配置，就可以与源代码管理系统（如 Subversion 或 Git）集成，并可以基于某个标签管理项目的发布。它也可以将其发布到分发位置供其他项目使用。Maven 能够发布单独的输出，如 JAR，包含其他依赖和文档的归档，或者作为源代码发布。向后兼容性 − 您可以很轻松的从旧版本 Maven 的多个模块移植到 Maven 3 中。子项目使用父项目依赖时，正常情况子项目应该继承父项目依赖，无需使用版本号，并行构建 − 编译的速度能普遍提高20 - 50 %。更好的错误报告 − Maven 改进了错误报告，它为您提供了 Maven wiki 页面的链接，您可以点击链接查看错误的完整描述。Maven的环境配置Maven 是一个基于 Java 的工具，所以要做的第一件事情就是安装 JDK。系统要求项目要求JDKMaven 3.3 要求 JDK 1.7 或以上Maven3.2 要求 JDK 1.6 或以上Maven3.0/3.1 要求 JDK 1.5 或以上内存没有最低要求磁盘Maven 自身安装需要大约 10 MB 空间。除此之外，额外的磁盘空间将用于你的本地 Maven 仓库。你本地仓库的大小取决于使用情况，但预期至少 500 MB操作系统没有最低要求Maven的下载Maven 下载地址：http://maven.apache.org/download.cgi不同平台下载对应的包系统包名Windowsapache-maven-3.6.1-bin.zipLinuxapache-maven-3.6.1-bin.tar.gzMacapache-maven-3.6.1-bin.tar.gz下载包后解压到对应路径系统存储位置（根据自己情况而定）WindowsE:\\Maven\\apache-maven-3.6.1Linux/usr/local/apache-maven-3.6.1Mac/usr/local/apache-maven-3.6.1设置Maven的环境变量右键 “计算机”，选择 “属性”，之后点击 “高级系统设置”，点击”环境变量”，来设置环境变量，有以下系统变量需要配置：新建系统变量 MAVEN_HOME，变量值：E:\\Maven\\apache-maven-3.6.1编辑系统变量 Path，添加变量值：;%MAVEN_HOME%\\bin注意：注意多个值之间需要有分号隔开，然后点击确定。Maven POMPOM( Project Object Model，项目对象模型 ) 是 Maven 工程的基本工作单元，是一个XML文件，包含了项目的基本信息，用于描述项目如何构建，声明项目依赖，等等。执行任务或目标时，Maven 会在当前目录中查找 POM。它读取 POM，获取所需的配置信息，然后执行目标。POM 中可以指定以下配置：项目依赖插件执行目标项目构建 profile项目版本项目开发者列表相关邮件列表信息在创建 POM 之前，我们首先需要描述项目组 (groupId), 项目的唯一ID。12345678910111213141516&lt;project xmlns = \"http://maven.apache.org/POM/4.0.0\" xmlns:xsi = \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation = \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;!-- 模型版本 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：/com/companyname/project-group --&gt; &lt;groupId&gt;com.companyname.project-group&lt;/groupId&gt; &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt; &lt;artifactId&gt;project&lt;/artifactId&gt; &lt;!-- 版本号 --&gt; &lt;version&gt;1.0&lt;/version&gt;&lt;/project&gt;所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。节点描述project工程的根标签。modelVersion模型版本需要设置为 4.0。groupId这是工程组的标识。它在一个组织或者项目中通常是唯一的。例如，一个银行组织 com.companyname.project-group 拥有所有的和银行相关的项目。artifactId这是工程的标识。它通常是工程的名称。例如，消费者银行。groupId 和 artifactId 一起定义了 artifact 在仓库中的位置。version这是工程的版本号。在 artifact 的仓库中，它用来区分不同的版本。父（Super）POM父（Super）POM是 Maven 默认的 POM。所有的 POM 都继承自一个父 POM（无论是否显式定义了这个父 POM）。父 POM 包含了一些可以被继承的默认设置。因此，当 Maven 发现需要下载 POM 中的 依赖时，它会到 Super POM 中配置的默认仓库 http://repo1.maven.org/maven2 去下载。POM标签大全详解lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd\"&gt; &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 version。 --&gt; &lt;parent&gt; &lt;!--被继承的父项目的构件标识符 --&gt; &lt;artifactId /&gt; &lt;!--被继承的父项目的全球唯一标识符 --&gt; &lt;groupId /&gt; &lt;!--被继承的父项目的版本 --&gt; &lt;version /&gt; &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt; &lt;relativePath /&gt; &lt;/parent&gt; &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt; &lt;groupId&gt;asia.banseon&lt;/groupId&gt; &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt; &lt;artifactId&gt;banseon-maven2&lt;/artifactId&gt; &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;!--项目的名称, Maven产生的文档用 --&gt; &lt;name&gt;banseon-maven&lt;/name&gt; &lt;!--项目主页的URL, Maven产生的文档用 --&gt; &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt; &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt; &lt;description&gt;A maven project to study maven.&lt;/description&gt; &lt;!--描述了这个项目构建环境中的前提条件。 --&gt; &lt;prerequisites&gt; &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt; &lt;maven /&gt; &lt;/prerequisites&gt; &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt; &lt;issueManagement&gt; &lt;!--问题管理系统（例如jira）的名字， --&gt; &lt;system&gt;jira&lt;/system&gt; &lt;!--该项目使用的问题管理系统的URL --&gt; &lt;url&gt;http://jira.baidu.com/banseon&lt;/url&gt; &lt;/issueManagement&gt; &lt;!--项目持续集成信息 --&gt; &lt;ciManagement&gt; &lt;!--持续集成系统的名字，例如continuum --&gt; &lt;system /&gt; &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt; &lt;url /&gt; &lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt; &lt;notifiers&gt; &lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt; &lt;notifier&gt; &lt;!--传送通知的途径 --&gt; &lt;type /&gt; &lt;!--发生错误时是否通知 --&gt; &lt;sendOnError /&gt; &lt;!--构建失败时是否通知 --&gt; &lt;sendOnFailure /&gt; &lt;!--构建成功时是否通知 --&gt; &lt;sendOnSuccess /&gt; &lt;!--发生警告时是否通知 --&gt; &lt;sendOnWarning /&gt; &lt;!--不赞成使用。通知发送到哪里 --&gt; &lt;address /&gt; &lt;!--扩展配置项 --&gt; &lt;configuration /&gt; &lt;/notifier&gt; &lt;/notifiers&gt; &lt;/ciManagement&gt; &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt; &lt;inceptionYear /&gt; &lt;!--项目相关邮件列表信息 --&gt; &lt;mailingLists&gt; &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt; &lt;mailingList&gt; &lt;!--邮件的名称 --&gt; &lt;name&gt;Demo&lt;/name&gt; &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt; &lt;post&gt;banseon@126.com&lt;/post&gt; &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt; &lt;subscribe&gt;banseon@126.com&lt;/subscribe&gt; &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt; &lt;unsubscribe&gt;banseon@126.com&lt;/unsubscribe&gt; &lt;!--你可以浏览邮件信息的URL --&gt; &lt;archive&gt;http:/hi.baidu.com/banseon/demo/dev/&lt;/archive&gt; &lt;/mailingList&gt; &lt;/mailingLists&gt; &lt;!--项目开发者列表 --&gt; &lt;developers&gt; &lt;!--某个项目开发者的信息 --&gt; &lt;developer&gt; &lt;!--SCM里项目开发者的唯一标识符 --&gt; &lt;id&gt;HELLO WORLD&lt;/id&gt; &lt;!--项目开发者的全名 --&gt; &lt;name&gt;banseon&lt;/name&gt; &lt;!--项目开发者的email --&gt; &lt;email&gt;banseon@126.com&lt;/email&gt; &lt;!--项目开发者的主页的URL --&gt; &lt;url /&gt; &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt; &lt;roles&gt; &lt;role&gt;Project Manager&lt;/role&gt; &lt;role&gt;Architect&lt;/role&gt; &lt;/roles&gt; &lt;!--项目开发者所属组织 --&gt; &lt;organization&gt;demo&lt;/organization&gt; &lt;!--项目开发者所属组织的URL --&gt; &lt;organizationUrl&gt;http://hi.baidu.com/banseon&lt;/organizationUrl&gt; &lt;!--项目开发者属性，如即时消息如何处理等 --&gt; &lt;properties&gt; &lt;dept&gt;No&lt;/dept&gt; &lt;/properties&gt; &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt; &lt;timezone&gt;-5&lt;/timezone&gt; &lt;/developer&gt; &lt;/developers&gt; &lt;!--项目的其他贡献者列表 --&gt; &lt;contributors&gt; &lt;!--项目的其他贡献者。参见developers/developer元素 --&gt; &lt;contributor&gt; &lt;name /&gt; &lt;email /&gt; &lt;url /&gt; &lt;organization /&gt; &lt;organizationUrl /&gt; &lt;roles /&gt; &lt;timezone /&gt; &lt;properties /&gt; &lt;/contributor&gt; &lt;/contributors&gt; &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt; &lt;licenses&gt; &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt; &lt;license&gt; &lt;!--license用于法律上的名称 --&gt; &lt;name&gt;Apache 2&lt;/name&gt; &lt;!--官方的license正文页面的URL --&gt; &lt;url&gt;http://www.baidu.com/banseon/LICENSE-2.0.txt&lt;/url&gt; &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt; &lt;distribution&gt;repo&lt;/distribution&gt; &lt;!--关于license的补充信息 --&gt; &lt;comments&gt;A business-friendly OSS license&lt;/comments&gt; &lt;/license&gt; &lt;/licenses&gt; &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt; &lt;scm&gt; &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt; &lt;connection&gt; scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk) &lt;/connection&gt; &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt; &lt;developerConnection&gt; scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk &lt;/developerConnection&gt; &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt; &lt;tag /&gt; &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt; &lt;url&gt;http://svn.baidu.com/banseon&lt;/url&gt; &lt;/scm&gt; &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt; &lt;organization&gt; &lt;!--组织的全名 --&gt; &lt;name&gt;demo&lt;/name&gt; &lt;!--组织主页的URL --&gt; &lt;url&gt;http://www.baidu.com/banseon&lt;/url&gt; &lt;/organization&gt; &lt;!--构建项目需要的信息 --&gt; &lt;build&gt; &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt; &lt;sourceDirectory /&gt; &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt; &lt;scriptSourceDirectory /&gt; &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt; &lt;testSourceDirectory /&gt; &lt;!--被编译过的应用程序class文件存放的目录。 --&gt; &lt;outputDirectory /&gt; &lt;!--被编译过的测试class文件存放的目录。 --&gt; &lt;testOutputDirectory /&gt; &lt;!--使用来自该项目的一系列构建扩展 --&gt; &lt;extensions&gt; &lt;!--描述使用到的构建扩展。 --&gt; &lt;extension&gt; &lt;!--构建扩展的groupId --&gt; &lt;groupId /&gt; &lt;!--构建扩展的artifactId --&gt; &lt;artifactId /&gt; &lt;!--构建扩展的版本 --&gt; &lt;version /&gt; &lt;/extension&gt; &lt;/extensions&gt; &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt; &lt;defaultGoal /&gt; &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt; &lt;resources&gt; &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt; &lt;resource&gt; &lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt; &lt;targetPath /&gt; &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt; &lt;filtering /&gt; &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt; &lt;directory /&gt; &lt;!--包含的模式列表，例如**/*.xml. --&gt; &lt;includes /&gt; &lt;!--排除的模式列表，例如**/*.xml --&gt; &lt;excludes /&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt; &lt;testResources&gt; &lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt; &lt;testResource&gt; &lt;targetPath /&gt; &lt;filtering /&gt; &lt;directory /&gt; &lt;includes /&gt; &lt;excludes /&gt; &lt;/testResource&gt; &lt;/testResources&gt; &lt;!--构建产生的所有文件存放的目录 --&gt; &lt;directory /&gt; &lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt; &lt;finalName /&gt; &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt; &lt;filters /&gt; &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt; &lt;pluginManagement&gt; &lt;!--使用的插件列表 。 --&gt; &lt;plugins&gt; &lt;!--plugin元素包含描述插件所需要的信息。 --&gt; &lt;plugin&gt; &lt;!--插件在仓库里的group ID --&gt; &lt;groupId /&gt; &lt;!--插件在仓库里的artifact ID --&gt; &lt;artifactId /&gt; &lt;!--被使用的插件的版本（或版本范围） --&gt; &lt;version /&gt; &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt; &lt;extensions /&gt; &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt; &lt;executions&gt; &lt;!--execution元素包含了插件执行需要的信息 --&gt; &lt;execution&gt; &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt; &lt;id /&gt; &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt; &lt;phase /&gt; &lt;!--配置的执行目标 --&gt; &lt;goals /&gt; &lt;!--配置是否被传播到子POM --&gt; &lt;inherited /&gt; &lt;!--作为DOM对象的配置 --&gt; &lt;configuration /&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;!--项目引入插件所需要的额外依赖 --&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--任何配置是否被传播到子项目 --&gt; &lt;inherited /&gt; &lt;!--作为DOM对象的配置 --&gt; &lt;configuration /&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;!--使用的插件列表 --&gt; &lt;plugins&gt; &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt; &lt;plugin&gt; &lt;groupId /&gt; &lt;artifactId /&gt; &lt;version /&gt; &lt;extensions /&gt; &lt;executions&gt; &lt;execution&gt; &lt;id /&gt; &lt;phase /&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt; &lt;profiles&gt; &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt; &lt;profile&gt; &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt; &lt;id /&gt; &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt; &lt;activation&gt; &lt;!--profile默认是否激活的标志 --&gt; &lt;activeByDefault /&gt; &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt; &lt;jdk /&gt; &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt; &lt;os&gt; &lt;!--激活profile的操作系统的名字 --&gt; &lt;name&gt;Windows XP&lt;/name&gt; &lt;!--激活profile的操作系统所属家族(如 'windows') --&gt; &lt;family&gt;Windows&lt;/family&gt; &lt;!--激活profile的操作系统体系结构 --&gt; &lt;arch&gt;x86&lt;/arch&gt; &lt;!--激活profile的操作系统版本 --&gt; &lt;version&gt;5.1.2600&lt;/version&gt; &lt;/os&gt; &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt; &lt;property&gt; &lt;!--激活profile的属性的名称 --&gt; &lt;name&gt;mavenVersion&lt;/name&gt; &lt;!--激活profile的属性的值 --&gt; &lt;value&gt;2.0.3&lt;/value&gt; &lt;/property&gt; &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt; &lt;file&gt; &lt;!--如果指定的文件存在，则激活profile。 --&gt; &lt;exists&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ &lt;/exists&gt; &lt;!--如果指定的文件不存在，则激活profile。 --&gt; &lt;missing&gt;/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ &lt;/missing&gt; &lt;/file&gt; &lt;/activation&gt; &lt;!--构建项目所需要的信息。参见build元素 --&gt; &lt;build&gt; &lt;defaultGoal /&gt; &lt;resources&gt; &lt;resource&gt; &lt;targetPath /&gt; &lt;filtering /&gt; &lt;directory /&gt; &lt;includes /&gt; &lt;excludes /&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;testResources&gt; &lt;testResource&gt; &lt;targetPath /&gt; &lt;filtering /&gt; &lt;directory /&gt; &lt;includes /&gt; &lt;excludes /&gt; &lt;/testResource&gt; &lt;/testResources&gt; &lt;directory /&gt; &lt;finalName /&gt; &lt;filters /&gt; &lt;pluginManagement&gt; &lt;plugins&gt; &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt; &lt;plugin&gt; &lt;groupId /&gt; &lt;artifactId /&gt; &lt;version /&gt; &lt;extensions /&gt; &lt;executions&gt; &lt;execution&gt; &lt;id /&gt; &lt;phase /&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/pluginManagement&gt; &lt;plugins&gt; &lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt; &lt;plugin&gt; &lt;groupId /&gt; &lt;artifactId /&gt; &lt;version /&gt; &lt;extensions /&gt; &lt;executions&gt; &lt;execution&gt; &lt;id /&gt; &lt;phase /&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;goals /&gt; &lt;inherited /&gt; &lt;configuration /&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt; &lt;modules /&gt; &lt;!--发现依赖和扩展的远程仓库列表。 --&gt; &lt;repositories&gt; &lt;!--参见repositories/repository元素 --&gt; &lt;repository&gt; &lt;releases&gt; &lt;enabled /&gt; &lt;updatePolicy /&gt; &lt;checksumPolicy /&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled /&gt; &lt;updatePolicy /&gt; &lt;checksumPolicy /&gt; &lt;/snapshots&gt; &lt;id /&gt; &lt;name /&gt; &lt;url /&gt; &lt;layout /&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt; &lt;pluginRepositories&gt; &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt; &lt;pluginRepository&gt; &lt;releases&gt; &lt;enabled /&gt; &lt;updatePolicy /&gt; &lt;checksumPolicy /&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled /&gt; &lt;updatePolicy /&gt; &lt;checksumPolicy /&gt; &lt;/snapshots&gt; &lt;id /&gt; &lt;name /&gt; &lt;url /&gt; &lt;layout /&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt; &lt;reports /&gt; &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行\"mvn site\"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt; &lt;reporting&gt; ...... &lt;/reporting&gt; &lt;!--参见dependencyManagement元素 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!--参见distributionManagement元素 --&gt; &lt;distributionManagement&gt; ...... &lt;/distributionManagement&gt; &lt;!--参见properties元素 --&gt; &lt;properties /&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt; &lt;modules /&gt; &lt;!--发现依赖和扩展的远程仓库列表。 --&gt; &lt;repositories&gt; &lt;!--包含需要连接到远程仓库的信息 --&gt; &lt;repository&gt; &lt;!--如何处理远程仓库里发布版本的下载 --&gt; &lt;releases&gt; &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt; &lt;enabled /&gt; &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt; &lt;updatePolicy /&gt; &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt; &lt;checksumPolicy /&gt; &lt;/releases&gt; &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt; &lt;snapshots&gt; &lt;enabled /&gt; &lt;updatePolicy /&gt; &lt;checksumPolicy /&gt; &lt;/snapshots&gt; &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt; &lt;id&gt;banseon-repository-proxy&lt;/id&gt; &lt;!--远程仓库名称 --&gt; &lt;name&gt;banseon-repository-proxy&lt;/name&gt; &lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt; &lt;url&gt;http://192.168.1.169:9999/repository/&lt;/url&gt; &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt; &lt;layout&gt;default&lt;/layout&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt; &lt;pluginRepositories&gt; &lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt; &lt;pluginRepository&gt; ...... &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;!--依赖的group ID --&gt; &lt;groupId&gt;org.apache.maven&lt;/groupId&gt; &lt;!--依赖的artifact ID --&gt; &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt; &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt; &lt;version&gt;3.8.1&lt;/version&gt; &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， 尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt; &lt;type&gt;jar&lt;/type&gt; &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt; &lt;classifier&gt;&lt;/classifier&gt; &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt; &lt;systemPath&gt;&lt;/systemPath&gt; &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt; &lt;reports&gt;&lt;/reports&gt; &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行\"mvn site\"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt; &lt;reporting&gt; &lt;!--true，则，网站不包括默认的报表。这包括\"项目信息\"菜单中的报表。 --&gt; &lt;excludeDefaults /&gt; &lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt; &lt;outputDirectory /&gt; &lt;!--使用的报表插件和他们的配置。 --&gt; &lt;plugins&gt; &lt;!--plugin元素包含描述报表插件需要的信息 --&gt; &lt;plugin&gt; &lt;!--报表插件在仓库里的group ID --&gt; &lt;groupId /&gt; &lt;!--报表插件在仓库里的artifact ID --&gt; &lt;artifactId /&gt; &lt;!--被使用的报表插件的版本（或版本范围） --&gt; &lt;version /&gt; &lt;!--任何配置是否被传播到子项目 --&gt; &lt;inherited /&gt; &lt;!--报表插件的配置 --&gt; &lt;configuration /&gt; &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt; &lt;reportSets&gt; &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt; &lt;reportSet&gt; &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt; &lt;id /&gt; &lt;!--产生报表集合时，被使用的报表的配置 --&gt; &lt;configuration /&gt; &lt;!--配置是否被继承到子POMs --&gt; &lt;inherited /&gt; &lt;!--这个集合里使用到哪些报表 --&gt; &lt;reports /&gt; &lt;/reportSet&gt; &lt;/reportSets&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/reporting&gt; &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;!--参见dependencies/dependency元素 --&gt; &lt;dependency&gt; ...... &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt; &lt;distributionManagement&gt; &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt; &lt;repository&gt; &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt; &lt;uniqueVersion /&gt; &lt;id&gt;banseon-maven2&lt;/id&gt; &lt;name&gt;banseon maven2&lt;/name&gt; &lt;url&gt;file://$&#123;basedir&#125;/target/deploy&lt;/url&gt; &lt;layout /&gt; &lt;/repository&gt; &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt; &lt;snapshotRepository&gt; &lt;uniqueVersion /&gt; &lt;id&gt;banseon-maven2&lt;/id&gt; &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;/name&gt; &lt;url&gt;scp://svn.baidu.com/banseon:/usr/local/maven-snapshot&lt;/url&gt; &lt;layout /&gt; &lt;/snapshotRepository&gt; &lt;!--部署项目的网站需要的信息 --&gt; &lt;site&gt; &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt; &lt;id&gt;banseon-site&lt;/id&gt; &lt;!--部署位置的名称 --&gt; &lt;name&gt;business api website&lt;/name&gt; &lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt; &lt;url&gt; scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web &lt;/url&gt; &lt;/site&gt; &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt; &lt;downloadUrl /&gt; &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt; &lt;relocation&gt; &lt;!--构件新的group ID --&gt; &lt;groupId /&gt; &lt;!--构件新的artifact ID --&gt; &lt;artifactId /&gt; &lt;!--构件新的版本号 --&gt; &lt;version /&gt; &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt; &lt;message /&gt; &lt;/relocation&gt; &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt; &lt;status /&gt; &lt;/distributionManagement&gt; &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt; &lt;properties /&gt;&lt;/project&gt;Maven 构建生命周期Maven 构建生命周期定义了一个项目构建跟发布的过程。一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的：阶段处理描述验证 validate验证项目验证项目是否正确且所有必须信息是可用的编译 compile执行编译源代码编译在此阶段完成测试 Test测试使用适当的单元测试框架（例如JUnit）运行测试。包装 package打包创建JAR/WAR包如在 pom.xml 中定义提及的包检查 verify检查对集成测试的结果进行检查，以保证质量达标安装 install安装安装打包的项目到本地仓库，以供其他项目使用部署 deploy部署拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程为了完成 default 生命周期，这些阶段（包括其他未在上面罗列的生命周期阶段）将被按顺序地执行。Maven 有以下三个标准的生命周期：clean：项目清理的处理default(或 build)：项目部署的处理site：项目站点文档创建的处理Clean生命周期当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期，它包含以下阶段：pre-clean：执行一些需要在clean之前完成的工作clean：移除所有上一次构建生成的文件post-clean：执行一些需要在clean之后立刻完成的工作mvn clean 中的 clean 就是上面的 clean，在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行 mvn clean 将运行以下两个生命周期阶段：1pre-clean,clean如果我们运行 mvn post-clean ，则运行以下三个生命周期阶段：1pre-clean,clean，post-cleanDefault（Build）生命周期这是 Maven 的主要生命周期，被用于构建应用，包括下面的 23 个阶段：生命周期阶段描述validate（校验）校验项目是否正确并且所有必要的信息可以完成项目的构建过程。initialize（初始化）初始化构建状态，比如设置属性值。generate-sources（生成源代码）生成包含在编译阶段中的任何源代码。process-sources（处理源代码）处理源代码，比如说，过滤任意值。generate-resources（生成资源文件）生成将会包含在项目包中的资源文件。process-resources （处理资源文件）复制和处理资源到目标目录，为打包阶段最好准备。compile（编译）编译项目的源代码。process-classes（处理类文件）处理编译生成的文件，比如说对Java class文件做字节码改善优化。generate-test-sources（生成测试源代码）生成包含在编译阶段中的任何测试源代码。process-test-sources（处理测试源代码）处理测试源代码，比如说，过滤任意值。generate-test-resources（生成测试资源文件）为测试创建资源文件。process-test-resources（处理测试资源文件）复制和处理测试资源到目标目录。test-compile（编译测试源码）编译测试源代码到测试目标目录.process-test-classes（处理测试类文件）处理测试源码编译生成的文件。test（测试）使用合适的单元测试框架运行测试（Juint是其中之一）。prepare-package（准备打包）在实际打包之前，执行任何的必要的操作为打包做准备。package（打包）将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。pre-integration-test（集成测试前）在执行集成测试前进行必要的动作。比如说，搭建需要的环境。integration-test（集成测试）处理和部署项目到可以运行集成测试环境中。post-integration-test（集成测试后）在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。verify （验证）运行任意的检查来验证项目包有效且达到质量标准。install（安装）安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。deploy（部署）将最终的项目包复制到远程仓库中与其他开发者和项目共享。有一些与 Maven 生命周期相关的重要概念需要说明：当一个阶段通过 Maven 命令调用时，例如 mvn compile，只有该阶段之前以及包括该阶段在内的所有阶段会被执行。不同的 maven 目标将根据打包的类型（JAR / WAR / EAR），被绑定到不同的 Maven 生命周期阶段。Site生命周期Maven Site 插件一般用来创建新的报告文档、部署站点等。pre-site：执行一些需要在生成站点文档之前完成的工作site：生成项目的站点文档post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备site-deploy：将生成的站点文档部署到特定的服务器上项目构建（Idea）现在我们开始构建项目了，本项目由IDEA来进行构建。首先我们打开Idea，选择新键项目，选择Maven项目。点击next.填写GroupId和artifactId后，继续点击next。其中groupid一般为工程组的id，而artifactId一般为工程的id。然后选择保存的文件夹，就这样一个Maven项目建立成功","categories":[{"name":"依赖管理","slug":"依赖管理","permalink":"https://me.obey.fun/categories/依赖管理/"},{"name":"项目一键构建","slug":"依赖管理/项目一键构建","permalink":"https://me.obey.fun/categories/依赖管理/项目一键构建/"}],"tags":[{"name":"版本控制","slug":"版本控制","permalink":"https://me.obey.fun/tags/版本控制/"},{"name":"依赖管理","slug":"依赖管理","permalink":"https://me.obey.fun/tags/依赖管理/"}],"keywords":[{"name":"依赖管理","slug":"依赖管理","permalink":"https://me.obey.fun/categories/依赖管理/"},{"name":"项目一键构建","slug":"依赖管理/项目一键构建","permalink":"https://me.obey.fun/categories/依赖管理/项目一键构建/"}]},{"title":"Hibernate（了解与使用）","slug":"Hibernate（了解与使用）","date":"2019-05-12T01:43:47.000Z","updated":"2019-10-28T05:44:55.188Z","comments":true,"path":"Hibernate（了解与使用）.html","link":"","permalink":"https://me.obey.fun/Hibernate（了解与使用）.html","excerpt":"","text":"Hiberante的了解框架的概述框架（framework）是一个框子——指其约束性，也是一个架子——指其支撑性。是一个基本概念上的结构，用于去解决或者处理复杂的问题。什么是框架框架：指的是软件的半成品，已经完成了部分功能。EE的三层架构EE的经典三层结构Hibernate的概述Hibernate 是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，它将POJO与数据库表建立映射关系，是一个全自动的orm框架，hibernate可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。 Hibernate可以应用在任何使用JDBC的场合，既可以在Java的客户端程序使用，也可以在Servlet/JSP的Web应用中使用，最具革命意义的是，Hibernate可以在应用EJB的JaveEE架构中取代CMP，完成数据持久化的重任。什么是HibernateHibernate是一种ORM框架，在Java对象与关系数据库之间建立某种映射，以实现直接存取Java对象！什么是ORMORM：Object Relational Mapping（对象关系映射）。指的是将一个Java中的对象与关系型数据库中的表建立一种映射关系，从而操作对象就可以操作数据库中的表。为什么要学习Hibernate与其他操作数据库的技术相比，Hibernate具有以下几点优势Hibernate对 JBDC 访问数据库的代码做了轻量级封装，大大简化了数据访问层繁琐的重复性代码，并且减少了内存消耗，加快了运行效率。Hibernate 是一个基于 JDBC 的主流持久化框架，是一个优秀的ORM实现，它很大程度的简化 DAO（Date Access Object，数据访问对象）层编码工作。Hibernate 的性能非常好，映射的灵活性很出色。它支持很多关系型数据库，从一对一到多对多的各种复杂关系。可扩展性强，由于源代码的开源以及API的开放，当本身功能不够用时，可以自行编码进行扩展。Hibernate的入门下载Hibernate开发环境Hibernate3.x &emsp; Hibernate4.x &emsp; Hibernate5.xhttps://sourceforge.net/projects/hibernate/files/hibernate-orm/5.0.7.Final/解压 Hibernate解压完成会看到三个文件夹：documentation :Hibernate开发的文档lib :Hibernate开发包required :Hibernate开发的必须的依赖包optional :Hibernate开发的可选的jar包project :Hibernate提供的项目创建一个项目，引入jar包数据库驱动包Hibernate开发的必须的jar包Hibernate引入日志记录包创建表12345678910CREATE TABLE `cst_customer` ( `cust_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)', `cust_name` varchar(32) NOT NULL COMMENT '客户名称(公司名称)', `cust_source` varchar(32) DEFAULT NULL COMMENT '客户信息来源', `cust_industry` varchar(32) DEFAULT NULL COMMENT '客户所属行业', `cust_level` varchar(32) DEFAULT NULL COMMENT '客户级别', `cust_phone` varchar(64) DEFAULT NULL COMMENT '固定电话', `cust_mobile` varchar(16) DEFAULT NULL COMMENT '移动电话', PRIMARY KEY (`cust_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;创建实体类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class Customer &#123; private Long cust_id; private String cust_name; private String cust_source; private String cust_industry; private String cust_level; private String cust_phone; private String cust_mobile; public Long getCust_id() &#123; return cust_id; &#125; public void setCust_id(Long cust_id) &#123; this.cust_id = cust_id; &#125; public String getCust_name() &#123; return cust_name; &#125; public void setCust_name(String cust_name) &#123; this.cust_name = cust_name; &#125; public String getCust_source() &#123; return cust_source; &#125; public void setCust_source(String cust_source) &#123; this.cust_source = cust_source; &#125; public String getCust_industry() &#123; return cust_industry; &#125; public void setCust_industry(String cust_industry) &#123; this.cust_industry = cust_industry; &#125; public String getCust_level() &#123; return cust_level; &#125; public void setCust_level(String cust_level) &#123; this.cust_level = cust_level; &#125; public String getCust_phone() &#123; return cust_phone; &#125; public void setCust_phone(String cust_phone) &#123; this.cust_phone = cust_phone; &#125; public String getCust_mobile() &#123; return cust_mobile; &#125; public void setCust_mobile(String cust_mobile) &#123; this.cust_mobile = cust_mobile; &#125; @Override public String toString() &#123; return \"Customer [cust_id=\" + cust_id + \", cust_name=\" + cust_name + \", cust_source=\" + cust_source + \", cust_industry=\" + cust_industry + \", cust_level=\" + cust_level + \", cust_phone=\" + cust_phone + \", cust_mobile=\" + cust_mobile + \"]\"; &#125; &#125;创建映射映射需要通过XML的配置文件来完成，这个配置文件可以任意命名。尽量统一命名规范（类名.hbm.xml）123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;!-- 建立类与表的映射 --&gt; &lt;class name=\"com.hibernate.demo1.Customer\" table=\"cst_customer\"&gt; &lt;!-- 建立类中的属性与表中的主键对应 --&gt; &lt;id name=\"cust_id\" column=\"cust_id\" &gt; &lt;generator class=\"native\"/&gt; &lt;/id&gt; &lt;!-- 建立类中的普通的属性和表的字段的对应 --&gt; &lt;property name=\"cust_name\" column=\"cust_name\" length=\"32\" /&gt; &lt;property name=\"cust_source\" column=\"cust_source\" length=\"32\"/&gt; &lt;property name=\"cust_industry\" column=\"cust_industry\"/&gt; &lt;property name=\"cust_level\" column=\"cust_level\"/&gt; &lt;property name=\"cust_phone\" column=\"cust_phone\"/&gt; &lt;property name=\"cust_mobile\" column=\"cust_mobile\"/&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt;创建一个Hibernate的核心配置文件Hibernate的核心配置文件的名称：hibernate.cfg.xml12345678910111213141516171819202122232425262728293031323334353637&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;!-- 连接数据库的基本参数 --&gt; &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql:///hibernate_day01&lt;/property&gt; &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt; &lt;property name=\"hibernate.connection.password\"&gt;abc&lt;/property&gt; &lt;!-- 配置Hibernate的方言 --&gt; &lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt; &lt;!-- 可选配置================ --&gt; &lt;!-- 打印SQL --&gt; &lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt; &lt;!-- 格式化SQL --&gt; &lt;property name=\"hibernate.format_sql\"&gt;true&lt;/property&gt; &lt;!-- 自动创建表 --&gt; &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt; &lt;!-- 配置C3P0连接池 --&gt; &lt;property name=\"connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt; &lt;!--在连接池中可用的数据库连接的最少数目 --&gt; &lt;property name=\"c3p0.min_size\"&gt;5&lt;/property&gt; &lt;!--在连接池中所有数据库连接的最大数目 --&gt; &lt;property name=\"c3p0.max_size\"&gt;20&lt;/property&gt; &lt;!--设定数据库连接的过期时间,以秒为单位, 如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt; &lt;property name=\"c3p0.timeout\"&gt;120&lt;/property&gt; &lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt; &lt;property name=\"c3p0.idle_test_period\"&gt;3000&lt;/property&gt; &lt;mapping resource=\"com/hibernate/demo1/Customer.hbm.xml\"/&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt;编写测试代码1234567891011121314151617181920212223242526272829public class HibernateDemo1 &#123; @Test // 保存客户的案例 public void demo1()&#123; // 1.加载Hibernate的核心配置文件 Configuration configuration = new Configuration().configure(); // 手动加载映射 // configuration.addResource(\"com/itheima/hibernate/demo1/Customer.hbm.xml\"); // 2.创建一个SessionFactory对象：类似于JDBC中连接池 SessionFactory sessionFactory = configuration.buildSessionFactory(); // 3.通过SessionFactory获取到Session对象：类似于JDBC中Connection Session session = sessionFactory.openSession(); // 4.手动开启事务： Transaction transaction = session.beginTransaction(); // 5.编写代码 Customer customer = new Customer(); customer.setCust_name(\"王西\"); session.save(customer); // 6.事务提交 transaction.commit(); // 7.资源释放 session.close(); sessionFactory.close(); &#125;&#125;Hibernate的常见配置Hibernate的映射的配置映射的配置【class标签的配置】标签用来建立类与表的映射关系属性：name ：类的全路径table ：表名（类名与表名一致，table可以省略）catalog ：数据库名【id标签的配置】标签用来建立类中的属性与表中的主键的对应关系属性：name ：类中的属性名column ：表中的字段名（类中的属性名和表中的字段名如果一致，column可以省略）length ：长度type ：类型【property标签的配置】标签用来建立类中的普通属性与表的字段的对应关系属性：name ：类中的属性名column ：表中的字段名length ：长度type ：类型not-null ：设置非空unique ：设置唯一Hibernate的核心的配置Hibernate的核心配置方式（了解）一种方式:属性文件的方式hibernate.propertieshibernate.connection.driver_class=com.mysql.jdbc.Driver…hibernate.show_sql=true属性文件的方式不能引入映射文件（手动编写代码加载映射文件）二种方式:XML文件的方式hibernate.cfg.xml核心的配置必须的配置连接数据库的基本的参数驱动类url路径用户名密码方言可选的配置显示SQL ：hibernate.show_sql格式化SQL ：hibernate.format_sql自动建表 ：hibernate.hbm2ddl.autonone ：不使用hibernate的自动建表create ：如果数据库中已经有表，删除原有表，重新创建，如果没有表，新建表。（测试）create-drop ：如果数据库中已经有表，删除原有表，执行操作，删除这个表。如果没有表，新建一个，使用完了删除该表。（测试）update ：如果数据库中有表，使用原有表，如果没有表，创建新表（更新表结构）validate ：如果没有表，不会创建表。只会使用数据库中原有的表。（校验映射和表结构）。映射文件的引入引入映射文件的位置Hibernate的核心APIHibernate的APIConfiguration：Hibernate的配置对象Configurationconfiguration类的作用是对Hibernate进行配置，以及对它进行启动，在启动过程中，Configuration类的实例首先定位映射文档的位置，读取这些配置，然后创建一个SessionFactory对象，虽然Configuration类在整个Hibernate项目中只扮演着一个很小的角色，但它是启动hibernate时所遇到的第一个对象作用：加载核心配置文件hibernate.propertiesConfiguration cfg = new Configuration();hibernate.cfg.xmlConfiguration cfg = new Configuration().configure();加载映射文件12// 手动加载映射configuration.addResource(\"com/itheima/hibernate/demo1/ Customer.hbm.xml\");SessionFactory：Session工厂SessionFactorySessionFactory接口负责初始化Hibernate，它充当数据存储源的代理，并负责创建Session对象，这里用到了工厂模式。需要注意的事SessionFactory并不是轻量级的，因为在一般情况下，一个项目通常只需要一个SessionFactory就够，当需要操作多个数据库时，可以为每个库指定一个SessionFactory。SessionFactory内部维护了Hibernate的连接池和Hibernate的二级缓存。是线程安全的对象。一个项目创建一个对象即可。配置连接池：（了解）1234567891011&lt;!-- 配置C3P0连接池 --&gt; &lt;property name=\"connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt; &lt;!--在连接池中可用的数据库连接的最少数目 --&gt; &lt;property name=\"c3p0.min_size\"&gt;5&lt;/property&gt; &lt;!--在连接池中所有数据库连接的最大数目 --&gt; &lt;property name=\"c3p0.max_size\"&gt;20&lt;/property&gt; &lt;!--设定数据库连接的过期时间,以秒为单位, 如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt; &lt;property name=\"c3p0.timeout\"&gt;120&lt;/property&gt; &lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt; &lt;property name=\"c3p0.idle_test_period\"&gt;3000&lt;/property&gt;抽取工具类1234567891011121314public class HibernateUtils &#123; public static final Configuration cfg; public static final SessionFactory sf; static&#123; cfg = new Configuration().configure(); sf = cfg.buildSessionFactory(); &#125; public static Session openSession()&#123; return sf.openSession(); &#125;&#125;Session：类似Connection对象是连接对象Session接口负责执行被持久化对象的CRUD操作（CRUD的任务是完成与数据库的交流，包含很多藏剑的SQL语句）。但需要注意的事Session对象是非线程安全的。同时，Hibernate的Session不同于JSP应用中的HttpSession。这里当使用Session这个术语时，其实指的是Hibernate中的Session，而以后会将HttpSession对象称为用户Session。Session代表的是Hibernate与数据库的链接对象。不是线程安全的。与数据库交互桥梁。Session中的API保存方法：Serializable save(Object obj);查询方法：T get(Class c,Serializable id);T load(Class c,Serializable id);get方法和load方法的区别？12345678910111213141516171819202122232425public void demo2()&#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); /** * get方法 * * 采用的是立即加载，执行到这行代码的时候，就会马上发送SQL语句去查询。 * * 查询后返回是真实对象本身。 * * 查询一个找不到的对象的时候，返回null * * load方法 * * 采用的是延迟加载（lazy懒加载），执行到这行代码的时候，不会发送SQL语句，当真正使用这个对象的时候才会发送SQL语句。 * * 查询后返回的是代理对象。javassist-3.18.1-GA.jar 利用javassist技术产生的代理。 * * 查询一个找不到的对象的时候，返回ObjectNotFoundException */ // 使用get方法查询 /*Customer customer = session.get(Customer.class, 100l); // 发送SQL语句 System.out.println(customer);*/ // 使用load方法查询 Customer customer = session.load(Customer.class, 200l); System.out.println(customer); tx.commit(); session.close(); &#125;修改方法void update(Object obj);123456789101112131415161718public void demo3()&#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 直接创建对象，进行修改 /*Customer customer = new Customer(); customer.setCust_id(1l); customer.setCust_name(\"王聪\"); session.update(customer);*/ // 先查询，再修改(推荐) Customer customer = session.get(Customer.class, 1l); customer.setCust_name(\"王小贱\"); session.update(customer); tx.commit(); session.close(); &#125;删除方法void delete(Object obj);1234567891011121314151617// 删除操作 public void demo4()&#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 直接创建对象，删除 /* Customer customer = new Customer(); customer.setCust_id(1l); session.delete(customer);*/ // 先查询再删除(推荐)--级联删除 Customer customer = session.get(Customer.class, 2l); session.delete(customer); tx.commit(); session.close(); &#125;保存或更新void saveOrUpdate(Object obj)12345678910111213141516public void demo5()&#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); /*Customer customer = new Customer(); customer.setCust_name(\"王凤\"); session.saveOrUpdate(customer);*/ Customer customer = new Customer(); customer.setCust_id(3l); customer.setCust_name(\"李如花\"); session.saveOrUpdate(customer); tx.commit(); session.close(); &#125;查询所有1234567891011121314151617181920// 查询所有 public void demo6()&#123; Session session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); // 接收HQL：Hibernate Query Language 面向对象的查询语言 /*Query query = session.createQuery(\"from Customer\"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125;*/ // 接收SQL： SQLQuery query = session.createSQLQuery(\"select * from cst_customer\"); List&lt;Object[]&gt; list = query.list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; tx.commit(); session.close(); &#125;Transaction：事务对象Hibernate中管理事务的对象。commit();rollback();主键生成策略&amp;一级缓存&amp;事物管理Hibernate持久化类的编写规则什么是持久化类Hibernate 是持久层的ORM映射框架，专注于数据的持久化工作。所谓的持久化，就是将内存中的数据永久存储到关系型数据库中。那么知道了什么是持久化，什么又是持久化类呢？其实所谓的持久化类指的是一个Java类与数据库表建立了映射关系，那么这个类称为持久化类。其实你可以简单的理解为持久化类就是一个Java类有了一个映射文件与数据库的表建立了关系。持久化类的编写规则我们在编写持久化类的时候需要有以下几点需要注意：持久化类需要提供无参数的构造方法。因为在Hibernate的底层需要使用反射生成类的实例。持久化类的属性需要私有，对私有的属性提供公有的get和set方法。因为在Hibernate底层会将查询到的数据进行封装。持久化类的属性要尽量使用包装类的类型。因为包装类和基本数据类型的默认值不同，包装类的类型语义描述更清晰而基本数据类型不容易描述。持久化类要有一个唯一标识OID与表的主键对应。因为Hibernate中需要通过这个唯一标识OID区分在内存中是否是同一个持久化类。在Java中通过地址区分是否是同一个对象的，在关系型数据库的表中式通过主键区分是否同一条记录。那么Hibernate就是通过这个OID来进行区分的。Hibernate是不允许在内存中出现两个ODI相同的持久化对象的。持久化类尽量不要使用final进行修饰。因为Hibernate中有延迟加载的机制，这个机制中会产生代理对象，Hibernate产生代理对象使用的是字节码的增强技术完成的，其实就是产生了当前类的一个子类对象实现的。如果使用了final修饰持久化类。那么久不能产生子类，从而就不会产生代理对象，那么Hibernate的延迟加载策略（是一种优化手段）就会失效。Hibernate主键生成策略主键的类型在讲解Hibernate的逐渐生成策略之前，先来了解两个概念，即自然主键和代理主键，具体如下：自然主键：把具有业务含义的字段作为主键，称之为自然主键。例如在customer表中，如果把那么字段作为主键，其前提条件必须是：每一个客户的姓名不允许为null，不允许客户重名，并且不允许修改客户姓名。尽管着也是可行的，但是不能满足不断变化的业务需求，一旦出现了允许客户重名的业务需求，就必须修改数据模型，重新定义表的主键，这给数据库的维护增加了难度。代理主键：把不具备业务含义的字段作为主键，称之为代理主键。该字段一般取名为“ID”，通常为整数类型，因为整数类型比字符串类型要节省更多的数据库空间。Hibernate的主键生成策略：Hibernate中，提供了几个内置的主键生成策略，其常用主键生成策略的名称和描述如下名称描述increment用于long、short、或int类型，由Hibernate自动以递增的方式生成唯一标识符，每次增量为1。只有当没有用其它进程想同一张表中插入数据时才可以使用，不能在集群环境下使用。适用于代理主键。identity采用底层数据库本身提供的主键生成标识符，条件是数据库支持自动增长数据类型。在DB2、MySQL、MS SQL Server、Sybase和HypersonicSQL数据库中可以使用该生成器，该生成器要求在数据库中把主键定义成为自增长类型。适用于代理主键。sequenceHiberante根据底层数据库序列生成标识符。条件是数据库支持序列。适用于代理主键。native根据底层数据库对自动生成标识符的能力来选择identity、sequence、hilo三种生成器中的一种，适合跨数据库平台开发。适用于代理主键。uuidHibernate采用128位的UUID算法来生成标识符。该算法能够在网络环境中生成唯一的字符串标识符，其UUID被编码为一个长度为32为的十六进制字符串。这种策略并不流行，因为字符串类型的主键比整数类型的主键占用更多的数据库空间。适用于代理主键。assigned由java程序负责生成标识符，如果不指定id元素的generator属性，则默认使用该主键策略。适用于自然主键。Hibernate的持久化对象的三种状态持久化对象三种状态的概述了解了主键的生成策略之后，我们可以进一步来了解持久化类了。Hibernate为了更好的来管理持久化类，特将持久化类分成了三种状态。在Hibernate中持久化的对象可以划分为三种状态，分别是瞬时态、持久态和脱管态，一个持久化类的实例可能处于三种不同状态中的某一种，三种状态详细介绍如下。瞬时态（transient）也被称为临时态或者自由态，瞬时态的实例是由new命令创建、开辟内存空间的对象，不存在持久化标识OID（相当于主键值），尚未与Hiberante Session关联，在数据库中也米有记录，失去引用后将被JVM回收。瞬时状态的对象在内存中式孤立存在的，与数据库中的数据无如何关联，仅是一个信息携带的载体。持久态（persistent）的对象存在持久化标识OID，加入到了Session缓存中，并且相关联的Session没有关闭，在数据库中有对应的记录，每条记录只对应唯一的持久化对象，需要注意的是，持久态对象是在事务还未提交前变成持久态的。脱管态（detached）也被称为离线态或者游离态，当某个持久化状态的实例与Session的管理被关闭时就变成了脱管态。脱管态对象存在持久化标识OID，并且仍然与数据库中的数据存在关联，只是失去了与当前Session的关联，脱管状态对象发生改变时Hibernate不能检测到。区分对象的三种状态为了帮助大家更好的理解持久化对象的三种状态，接下来通过具体的案例来演示持久化对象的三种状态。12345678910111213141516171819202122232425//测试对象的三种状态public class Demo &#123; @Test //查看三种状态 public void fun1()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 Customer c = new Customer(); // 没有id, 没有与session关联 =&gt; 瞬时状态 c.setCust_name(\"联想\"); // 瞬时状态 Serializable id = session.save(c); // 持久化状态, 有id,有关联 //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 System.out.println(c);//托管态对象：有持久化标识OID，没有被session管理 &#125;&#125;c 对象由new关键字创建,此时还未与Session进行关联，它的状态称为瞬时态；在执行了session.save(c)操作后，c对象纳入了Session的管理范围，这时的 c 对象变成了持久态对象，此时Session的事务还没有被提交；程序执行完commit()操作并关闭了Session后，c对象与Session的关联被关闭，此时 c 对象就变成脱管态。Hibernate持久化对象的三种状态转换从图中可以看出，当一个对象被执行new关键字创建后，该对象处于瞬时态；当对瞬时态对象执行Session的save()或saveOrUpdate()方法后，该对象将被放入Session的以及缓存，对象进入持久态；当对持久态对象执行evict()、close()或clear()操作后，对象进入托管态；当直接执行Session的get()、load()、find()或iterate()等方法从数据库里查询对象时，查询到的对象也处于持久态；当对数据库中的记录进行update()、saveOrUpdate()以及lock()等操作后，此时脱管态的对象就过渡到持久态；由于瞬时态和脱管态的对象不在session的管理范围，所以会在一段时间后被JVM回收。持久化对象的三种状态可以通过调用Session中的一系列方法实现状态间的转换，具体如下：瞬时态转换到其他状态通过前面学习可知，瞬时态的对象由new关键字创建，瞬时态对象转换到其他状态总结如下：瞬间态转换为持久态：执行Session的save()或saveOrUpdate()方法。瞬时态转换为脱管态：为瞬时态对象设置持久化标识OID。由于持久化对象状态演化图中没有涉及到瞬时态转换到脱管态的情况，这里做下简要的说明，在前面学习中可知，脱管态对象窜OID，但是没有Session的关联，也就是说脱管态和瞬时态的区别就是OID有没有值，所以可以通过为瞬时态对象设置OID，使其变成脱管态对象。12Customer customer = new Customer(); //瞬时态customer.setCust_id(1); //脱管态持久态对象转换到其他状态持久化对象可以直接通过Hibernate中Session的get()、load()方法，或者Query查询从数据库中获得，持久态对象转换到其他的状态总结如下：持久态转换为瞬时态：执行Session的delete()方法，需要注意的是被删除的持久化对象，不建议再次使用持久态转换为脱管态：执行Session的evict()、close()或clear()方法。evict()方法用于清除异己缓存的所有对象。脱管态对象转换到其他状态脱管态对象无法直接获得，是由其他状态对象转换而来的，脱管态对象转换到其他状态总结如下：脱管态转换为持久态：执行Session的update()、saveOrUpdate()或lock()方法。脱管态转换为瞬时态：将脱管态对象的持久化标识OID设置为null。由于持久化对象状态演化图中没有涉及到脱管态换到瞬时态的情况，这里做下简要的说明，跟瞬时态转换到脱管态的情况相似，脱管态和瞬时态的区别就是OID有没有值，所以可以通过将脱管对象的OID设置为null，使其变成瞬时态对象。例如在session.close()操作后，加入代码customer.setCust_id(null);，customer对象将由脱管态转换为瞬时态。持久态对象能够自动更新数据库我们已经持久化对象的三种状态了，其实我们主要去研究持久态对象就够了，持久态对象其实有一个非常重要的特性：持久态对象可以自动更新数据库。123456789101112131415161718// 持久化状态特点: 持久化状态对象的任何变化都会自动同步到数据库中. public void fun3()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 Customer c = session.get(Customer.class, 1l);//持久化状态对象 c.setCust_name(\"微软公司\"); //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125;执行测试我们会发现，我们并没有手动调用update方法，Hibernate就可以将数据自动更新了。持久态对象就有这样的一个功能。持久态对象之所以有这样的功能其实都依赖了Hibernate的一级缓存。接下来我们就开始学习Hibernate缓存。Hibernate的一级缓存缓存是计算机领域非常通用的概念。它介于应用程序和永久性数据存储源(如硬盘上的文件或者数据库）之间，其作用是降低应用程序直接读写永久性数据存储源的频率，从而提高应用的运行性能。缓存中的数据是数据存储源中数据的拷贝。缓存的物理介质通常是内存。Hibernate的缓存分为一级缓存和二级缓存,Hibernate的这两级缓存都位于持久化层，存储的都是数据的备份。其中第一级缓存为Hibernate的内置缓存，不能被卸载。接下来围绕Hibernate的一级缓存进行详细地讲解。什么是Hibernate的一级缓存Hibernate的一级缓存就是指Session缓存，Session缓存是一块内存空间，用来存放相互管理的java对象，在使用Hibernate查询对象的时候，首先会使用对象属性的OID值在Hibernate的一级缓存中进行查找，如果找到匹配OID值的对象，就知己将该对象从一级缓存中取出使用，不会再查询数据库；如果没有找到相同OID值的对象，则会去数据库中查找相应数据。当从数据库中查询到所需数据时，该数据信息也会放置到一级缓存中。Hibernate的一级缓存的作用就是减少对数据库的访问次数。在Session接口的实现中包含一系列的Java集合，这些Java集合构成了Session缓存。只要Session实例没有结束生命周期，存放在它缓存中的对象也不会结束生命周期。固一级缓存也被称为是Session基本的缓存。Hibernate的一级缓存有如下特点：当应用程序调用Session接口的save()、update()、saveOrUpdate，如果Session缓存中没有相应的对象，Hibernate就会自动的把从数据库中查询到的相应对象信息加入到一级缓存中去。当调用Session接口的load()、get()方法，一级Query接口的list()、iterator()方法时，会判断缓存中是否存在该对象，有则返回，不会查询数据库，如果缓存中没有要查询对象，在去数据库中查询对应对象，并添加到一级缓存中。当调用Session的close()方法时，Session缓存会被清空。测试一级缓存我们已经大致了解什么是一级缓存，那么一级缓存具体是否存在呢，我们可以通过如下的程序来证明以及缓存是存在的。1234567891011121314@Test//证明Hibernate的一级缓存的存在：public void demo1()&#123; Sesion session = HibernateUtils.openSession(); Transaction tx = session.beginTransaction(); Customer customer1 = session.get(Customer.class,1l)//马上发送一条sql查询1号客服，并将数据存入了一级缓存 System.out.println(customer1); Customer customer2 = session.get(Customer.class,1l)//没有发生SQL语句从一级缓存中获取数据 System.out.println(customer2); System.out.println(customer1 == customer2);//true 一级缓存 缓存的是对象的地址。 tx.commit(); session.close();&#125;在以上代码中，第一次执行Session的get()方法获取customer1对象时，由于一级缓存中没有数据，所以Hibernate会向数据库发送一条sql语句，查询id等于1的对象；当再次调用了session的get()方法获取customer2对象时，将不会再发送sql语句，这是因为customer2对象是从一级缓存中获取的。一级缓存的内部结构：（快照区）Hibernate向一级缓存放入数据时，同时复制一份数据放入到Hibernate快照中，当使用commit()方法提交事务时，同时会清理Session的一级缓存，这时会使用OID判断一级缓存中的对象和快照中的对象是否一致，如果两个对象中的属性发生变化，则执行update语句，将缓存的内容同步到数据库，并更新快照；如果一致，则不执行update语句。Hibernate快照的作用就是确保一级缓存中的数据和数据库中的数据一致。Hibernate 的事务控制Hibernate是对JDBC的轻量级封装，其主要功能是操作数据库。在操作数据库过程中，经常会遇到事务处理的问题，那么我们接下来就来介绍Hibernate中的事务管理。什么是事务在数据库操作中，一项事务(Transaction)是由一条或多条操作数据库的SQL语句组成的一个不可分割的工作单元。当食物中的所有操作都正常完成时，整个事务才能被提交到数据库中，如果有一项操作没有完成，则整个事务都会被回滚。事务的四个特性事务有很严格的定义，需要同时满足四个特性，即原子性、一致性、隔离性、持久性。这四个特性通常称之为ACID特性，具体如下：原子性（Atomic）: 表示将事务中所做的操作捆绑成一个不可分割的单元，即对事务所进行的数据修改等操作，要么全部执行，要么全都不执行。一致性（Consistency）: 表示事务完成时，必须使所有的数据都保持一致状态。隔离性（Isolation）: 指一个事物的执行不能被其它事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离性的，并发执行的各个事务之间不能相互干扰。持久性（Durability）: 持久性也称为永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。提交后的其他操作或故障不会对其有任何影响。事务的并发问题在实际应用过程中，数据库是要被多个用户所共同访问的。在多个事务同时使用相同的数据时，可能会发生并发的问题，具体如下。脏读：一个事务读取到另一个事务未提交的数据。不可重复读：一个事务读到了另一个事务已经提交的update的数据，导致在同一个事务中的多次查询结果不一致。虚读/幻读：一个事务读到了另一个事务已经提交的insert的数据，导致在同一个事务中的多次查询结果不一致事务的隔离级别为了避免事务并发问题的发生，在标准SQL规范中，定义了4个事务隔离级别，不同隔离级别对事务的处理不同。读未提交（ReadUncommitted，1级）：一个事务在执行过程中，既可以访问其他事务未提交的新插入的数据，又可以访问未提交的修改数据。如果一个事务已经开始写数据，则另外一个事务则不允许同时进行写操作，但允许其他事务读此行数据。此隔离级别可防止丢失更新。已提交读（Read Committed，2级）：一个事务在执行过程中，既可以访问其他事务成功提交的新插入的数据，又可以访问成功修改的数据。读取数据的事务允许其他事务继续访问该行数据，但是未提交的写事务将会禁止其他事务访问该行。此隔离级别可有效防止脏读。可重复读（Repeatable Read，4级）：一个事务在执行过程中，可以访问其他事务成功提交的新插入数据，但不可以访问成功修改的数据。读取数据的事务将会禁止写事务（但允许读事务），写事务则禁止任何其他事务，此隔离级别可有效的防止不可重复读和脏读。序列化/串行化（Serializable，8级）：提供严格的事务隔离，它要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行。此隔离级别可有效的防止脏读、不可重复读和幻读。隔离级别含义READ_UNCOMMITTED允许你读取还未提交的改变了的数据。可能导致脏、幻、不可重复读READ_COMMITED允许在并发事务已经提交后读取。可防止脏读，但幻读和不可重复读仍可发生REPEATABLE_READ对相同字段的多次读取是一致的，除非数据被事务本身改变。可以防止脏、不可重复读，但幻读仍可能发生。SERIALIZABLE完全服从ACID的隔离级别，确保不发生脏、幻、不可重复读。这在所有的隔离级别中是最慢的，它是典型的通过完全锁定在事务中涉及的数据表来完成的事务的隔离界别，是由数据库提供的，并不是所有数据库都支持四种隔离级别MySQL：READ_UNCOMMITTED、READ_COMMITTED、REPEATABLE_READ、SERIALIZABLE(默认 REPEATABLE_READ)Oracle：READ_UNCOMMITTED、READ_COMMITTED、SERIALIZABLE(默认 READ_COMMITTED)在使用数据库时候，隔离级别越高，安全性越高，性能越低。实际开发中，不会选择最高或者最低隔离级别，选择READ_COMMITTED(Oracle 默认)、REPEATABLE_READ(Mysql 默认)Hibernate 中的事务管理在 Hibernate 中，可以通过代码来操作管理实务，如通过 Transaction tx = session.beginTransaction(); 开启一个事务；持久化操作后，通过 tx.commit();提交事务；如果食物出现异常，又通过tx.rollback();操作来撤销事务（事务回滚）。除了在代码块中队事务开启，提交和回滚操作外，还可以在 Hibernate 的配置文件中队事务进行配置。配置文件中，可以设置事务的隔离级别。其具体的配置方法是在 hibernate.cfg.xml 文件中的&lt;session-factory&gt;标签元素中进行的。配置方法如下所示。1234567891011&lt;!-- 引入orm元数据 路径书写: 填写src下的路径 --&gt; &lt;!-- 指定hibernate操作数据库时的隔离级别 #hibernate.connection.isolation 1|2|4|8 0001 1 读未提交 0010 2 读已提交 0100 4 可重复读 1000 8 串行化 --&gt; &lt;property name=\"hibernate.connection.isolation\"&gt;4&lt;/property&gt;到这我们已经设置了事务的隔离级别，那么我们在真正进行事务管理的时候，需要考虑事务的应用的场景，也就是说我们的事务控制不应该是在DAO层实现的，应该在Service层实现，并且在Service中调用多个Dao实现一个业务逻辑的操作。具体操作如下显示：其实最主要的是如何保证在Service中开启的事务时使用的Session对象和DAO中多个操作使用的是同一个Session对象。其实有两个方法可以实现：可以在业务层获取到Session，并将Session作为参数传递给DAO。可以使用ThreadLocal将业务层获取的Session绑定到当前线程中，然后再DAO中获取Session的时候，都从当前线程中获取。其实使用第二种方式肯定是最优方案，那么具体的实现已经不用我们来完成了，Hibernate的内部已经将这个事情做完了。我们只需要完成一段配置即可。Hibernate5中自身提供了三种管理Session对象的方法Session对象的生命周期与本地线程绑定、Session对象的生命周期与 JTA 事务绑定Hibernate委托程序管理 Session 对象的生命周期在 Hibernate 的配置文件中，hibernate.current_session_context_class 属性用于指定 Session 管理方式，可选值包括Thread：Session对象的生命周期与本地线程绑定jta： Session对象的生命周期与JTA事务绑定managed： Hibernate 委托程序来管理 Session 对象的生命周期在hibernate.cfg.xml中进行如下配置：12&lt;!-- 指定session与当前线程绑定 --&gt; &lt;property name=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt;hibernate提供sessionFactory.getCurrentSession()创建一个session和ThreadLocal绑定方法。在HibernateUtil工具类中更改getCurrentSession方法：1234//获取当前线程绑定的会话public static Session getCurrentSession()&#123; return sessionFactory.getCurrentSession();&#125;而且Hibernate中提供的这个与线程绑定的 session 可以不用关闭，当线程执行结束后，就会自动关闭了。Hibernate的其他APIQueryQuery代表面向对象的一个 Hibernate 查询操作。在 Hibernate 中，通常使用session.createQuery()方法接受一个HQL语句，然后调用 Query 的list()或uniqueResult() 方法执行查询。所谓的 HQL 是Hibernate Query Language 缩写，其语法很像 SQL 语法，但它是完全面向对象的。在 Hibernate中使用 Query对象的步骤，具体所示：获得Hibernate的Session对象。编写HQL语句。调用session.createQuery 创建查询对象。如果HQL语句包含参数，则调用Query的 setXxx 设置参数。调用 Query 对象的 list()或 uniqueResult() 方法执行查询。了解了使用 Query 对象的步骤后，接下来，通过具体示例来演示 Query 对象的查询操作。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141//测试HQL语句public class Demo &#123; @Test //基本查询 public void fun1()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1&gt; 书写HQL语句// String hql = \" from cn.itheima.domain.Customer \"; String hql = \" from Customer \"; // 查询所有Customer对象 //2&gt; 根据HQL语句创建查询对象 Query query = session.createQuery(hql); //3&gt; 根据查询对象获得查询结果 List&lt;Customer&gt; list = query.list(); // 返回list结果 //query.uniqueResult();//接收唯一的查询结果 System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //条件查询 //HQL语句中,不可能出现任何数据库相关的信息的 public void fun2()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1&gt; 书写HQL语句 String hql = \" from Customer where cust_id = 1 \"; // 查询所有Customer对象 //2&gt; 根据HQL语句创建查询对象 Query query = session.createQuery(hql); //3&gt; 根据查询对象获得查询结果 Customer c = (Customer) query.uniqueResult(); System.out.println(c); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //条件查询 //问号占位符 public void fun3()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1&gt; 书写HQL语句 String hql = \" from Customer where cust_id = ? \"; // 查询所有Customer对象 //2&gt; 根据HQL语句创建查询对象 Query query = session.createQuery(hql); //设置参数 //query.setLong(0, 1l); query.setParameter(0, 1l); //3&gt; 根据查询对象获得查询结果 Customer c = (Customer) query.uniqueResult(); System.out.println(c); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //条件查询 //命名占位符 public void fun4()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1&gt; 书写HQL语句 String hql = \" from Customer where cust_id = :cust_id \"; // 查询所有Customer对象 //2&gt; 根据HQL语句创建查询对象 Query query = session.createQuery(hql); //设置参数 query.setParameter(\"cust_id\", 1l); //3&gt; 根据查询对象获得查询结果 Customer c = (Customer) query.uniqueResult(); System.out.println(c); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //分页查询 public void fun5()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1&gt; 书写HQL语句 String hql = \" from Customer \"; // 查询所有Customer对象 //2&gt; 根据HQL语句创建查询对象 Query query = session.createQuery(hql); //设置分页信息 limit ?,? query.setFirstResult(1); query.setMaxResults(1); //3&gt; 根据查询对象获得查询结果 List&lt;Customer&gt; list = query.list(); System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125;&#125;Query中出来使用list()方法查询全部数据外，还有其它一些常用方法，具体如下：setter方法： Query接口中提供了一系列的 setter 方法用于设置查询语句的参数，针对不同的数据类型，需要用到不同的setter方法。iterator()方法：该方法用于查询语句，返回的结果是一个Iterator对象，在读取时只能按照顺序方式读取，它仅把使用到的数据转换成Java实体对象。uniqueResult()方法：该方法用于返回唯一的结果，在确保只有一条记录的查询时可以使用该方法。executeUpdate()方法：该方法是 Hibernate 的新特性，它支持 HQL 语句的更新和删除操作。setFirstResult()方法：该方法可以设置获取第一个记录的位置，也就是它表示从第几条记录开始查询，默认从0开始计算。setMaxResult()方法：该方法用于设置结果集的最大记录数，通常与setFirstResult() 方法结合使用，用于限制结果集的范围，以实现分页功能。CriteriaCriteria 是一个完全面向对象，可扩展的条件查询API，通过它完全不需要考虑数据库底层如何实现，以及SQL语句如何编写，它是Hibernate框架的核心查询对象。Criteria查询，又称为 QBC 查询（Query By Criteria），它是Hibernate的另一种对象检索方式。org.hibernate.criterion.Criterion是 Hibernate 提供的一个面向对象查询条件接口，一个单独的查询就是 Criterion 接口的一个实例，用于限制 Criteria 对象的查询，在 Hibernate 中 Criterion 对象的创建通常是通过 Restrictions 工厂类完成的，它提供饿了条件查询方法。通常，使用 Criteria 对象查询数据的主要步骤，具体如下：获得Hibernate的 Session 对象。通过 Session 获得 Criteria 对象。使用 Restrictions 的静态方法创建 Criterion 条件对象。Restrictions 类中提供了一系列用于设定查询条件的静态方法，这些静态方法都返回Criterion 实例，每个 Criterion 实例代表一个查询条件。向 Criteria 对象中添加 Criterion 查询条件。Criteria的 add() 方法用于查询条件。执行 Criterita 的 list() 或 uniqueResult() 获得结果。了解了 Criteria 对象的使用步骤后，接下来，通过具体示例来演示 Criterria 对象的查询操作。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121//测试Criteria查询public class Demo &#123; @Test //基本查询 public void fun1()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //查询所有的Customer对象 Criteria criteria = session.createCriteria(Customer.class); List&lt;Customer&gt; list = criteria.list(); System.out.println(list); // Customer c = (Customer) criteria.uniqueResult(); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //条件查询 //HQL语句中,不可能出现任何数据库相关的信息的 // &gt; gt // &gt;= ge // &lt; lt // &lt;= le // == eq // != ne // in in // between and between // like like // is not null isNotNull // is null isNull // or or // and and public void fun2()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //创建criteria查询对象 Criteria criteria = session.createCriteria(Customer.class); //添加查询参数 =&gt; 查询cust_id为1的Customer对象 criteria.add(Restrictions.eq(\"cust_id\", 1l)); //执行查询获得结果 Customer c = (Customer) criteria.uniqueResult(); System.out.println(c); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //分页查询 public void fun3()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //创建criteria查询对象 Criteria criteria = session.createCriteria(Customer.class); //设置分页信息 limit ?,? criteria.setFirstResult(1); criteria.setMaxResults(2); //执行查询 List&lt;Customer&gt; list = criteria.list(); System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //查询总记录数 public void fun4()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //创建criteria查询对象 Criteria criteria = session.createCriteria(Customer.class); //设置查询的聚合函数 =&gt; 总行数 criteria.setProjection(Projections.rowCount()); //执行查询 Long count = (Long) criteria.uniqueResult(); System.out.println(count); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125;&#125;SQLQuerySQLQuery 这个就比较简单了，这个接口用于接收一个sql语句进行查询，然后调用 list()或者 uniqueResult() 方法进行查询。但是 sql 语句不会直接封装到实体对象中，需要我们手动写代码才可以封装到实体中。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126//测试原生SQL查询public class Demo &#123; @Test //基本查询 public void fun1()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1 书写sql语句 String sql = \"select * from cst_customer\"; //2 创建sql查询对象 SQLQuery query = session.createSQLQuery(sql); //3 调用方法查询结果 List&lt;Object[]&gt; list = query.list(); //query.uniqueResult(); for(Object[] objs : list)&#123; System.out.println(Arrays.toString(objs)); &#125; //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //基本查询 public void fun2()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1 书写sql语句 String sql = \"select * from cst_customer\"; //2 创建sql查询对象 SQLQuery query = session.createSQLQuery(sql); //指定将结果集封装到哪个对象中 query.addEntity(Customer.class); //3 调用方法查询结果 List&lt;Customer&gt; list = query.list(); System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //条件查询 public void fun3()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1 书写sql语句 String sql = \"select * from cst_customer where cust_id = ? \"; //2 创建sql查询对象 SQLQuery query = session.createSQLQuery(sql); query.setParameter(0, 1l); //指定将结果集封装到哪个对象中 query.addEntity(Customer.class); //3 调用方法查询结果 List&lt;Customer&gt; list = query.list(); System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125; @Test //分页查询 public void fun4()&#123; //1 获得session Session session = HibernateUtils.openSession(); //2 控制事务 Transaction tx = session.beginTransaction(); //3执行操作 //------------------------------------------- //1 书写sql语句 String sql = \"select * from cst_customer limit ?,? \"; //2 创建sql查询对象 SQLQuery query = session.createSQLQuery(sql); query.setParameter(0, 0); query.setParameter(1, 1); //指定将结果集封装到哪个对象中 query.addEntity(Customer.class); //3 调用方法查询结果 List&lt;Customer&gt; list = query.list(); System.out.println(list); //------------------------------------------- //4提交事务.关闭资源 tx.commit(); session.close();// 游离|托管 状态, 有id , 没有关联 &#125;&#125;Hibernate的进阶表操作-多对多配置数据库表与表之间的关系一对多关系什么样关系属于一对多？一个部门对应多个员工，一个员工只能属于某一个部门。一个客户对应多个联系人，一个联系人只能属于某一个客服。多对多关系什么关系属于多对多？一个学生可以选择多门课程，一门课程也可以被多个学生选择。一个用户可以选择多个角色，一个角色也可以被多个用户选择一对一关系（了解）什么样关系属于一对一？一个公司只能有一个注册地址，一个注册地址只能被一个公司注册。Hibernate 一对多的关系配置创建一个项目，引入相应 jar 包创建数据库和表12345678910111213141516171819202122232425262728CREATE TABLE `cst_customer` ( `cust_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '客户编号(主键)', `cust_name` varchar(32) NOT NULL COMMENT '客户名称(公司名称)', `cust_source` varchar(32) DEFAULT NULL COMMENT '客户信息来源', `cust_industry` varchar(32) DEFAULT NULL COMMENT '客户所属行业', `cust_level` varchar(32) DEFAULT NULL COMMENT '客户级别', `cust_phone` varchar(64) DEFAULT NULL COMMENT '固定电话', `cust_mobile` varchar(16) DEFAULT NULL COMMENT '移动电话', PRIMARY KEY (`cust_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;CREATE TABLE `cst_linkman` ( `lkm_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '联系人编号(主键)', `lkm_name` varchar(16) DEFAULT NULL COMMENT '联系人姓名', `lkm_cust_id` bigint(32) DEFAULT NULL COMMENT '客户id', `lkm_gender` char(1) DEFAULT NULL COMMENT '联系人性别', `lkm_phone` varchar(16) DEFAULT NULL COMMENT '联系人办公电话', `lkm_mobile` varchar(16) DEFAULT NULL COMMENT '联系人手机', `lkm_email` varchar(64) DEFAULT NULL COMMENT '联系人邮箱', `lkm_qq` varchar(16) DEFAULT NULL COMMENT '联系人qq', `lkm_position` varchar(16) DEFAULT NULL COMMENT '联系人职位', `lkm_memo` varchar(512) DEFAULT NULL COMMENT '联系人备注', PRIMARY KEY (`lkm_id`), KEY `FK_cst_linkman_lkm_cust_id` (`lkm_cust_id`), CONSTRAINT `FK_cst_linkman_lkm_cust_id` FOREIGN KEY (`lkm_cust_id`) REFERENCES `cst_customer` (`cust_id`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;创建实体一的一方的实体12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public class Customer &#123; private Long cust_id; private String cust_name; private String cust_source; private String cust_industry; private String cust_level; private String cust_phone; private String cust_mobile; // 通过ORM方式表示：一个客户对应多个联系人。 // 放置的多的一方的集合。Hibernate默认使用的是Set集合。 private Set&lt;LinkMan&gt; linkMans = new HashSet&lt;LinkMan&gt;(); public Long getCust_id() &#123; return cust_id; &#125; public void setCust_id(Long cust_id) &#123; this.cust_id = cust_id; &#125; public String getCust_name() &#123; return cust_name; &#125; public void setCust_name(String cust_name) &#123; this.cust_name = cust_name; &#125; public String getCust_source() &#123; return cust_source; &#125; public void setCust_source(String cust_source) &#123; this.cust_source = cust_source; &#125; public String getCust_industry() &#123; return cust_industry; &#125; public void setCust_industry(String cust_industry) &#123; this.cust_industry = cust_industry; &#125; public String getCust_level() &#123; return cust_level; &#125; public void setCust_level(String cust_level) &#123; this.cust_level = cust_level; &#125; public String getCust_phone() &#123; return cust_phone; &#125; public void setCust_phone(String cust_phone) &#123; this.cust_phone = cust_phone; &#125; public String getCust_mobile() &#123; return cust_mobile; &#125; public void setCust_mobile(String cust_mobile) &#123; this.cust_mobile = cust_mobile; &#125; public Set&lt;LinkMan&gt; getLinkMans() &#123; return linkMans; &#125; public void setLinkMans(Set&lt;LinkMan&gt; linkMans) &#123; this.linkMans = linkMans; &#125; &#125;多的一方的实体12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576public class LinkMan &#123; private Long lkm_id; private String lkm_name; private String lkm_gender; private String lkm_phone; private String lkm_mobile; private String lkm_email; private String lkm_qq; private String lkm_position; private String lkm_memo; // 通过ORM方式表示：一个联系人只能属于某一个客户。 // 放置的是一的一方的对象。 private Customer customer; public Long getLkm_id() &#123; return lkm_id; &#125; public void setLkm_id(Long lkm_id) &#123; this.lkm_id = lkm_id; &#125; public String getLkm_name() &#123; return lkm_name; &#125; public void setLkm_name(String lkm_name) &#123; this.lkm_name = lkm_name; &#125; public String getLkm_gender() &#123; return lkm_gender; &#125; public void setLkm_gender(String lkm_gender) &#123; this.lkm_gender = lkm_gender; &#125; public String getLkm_phone() &#123; return lkm_phone; &#125; public void setLkm_phone(String lkm_phone) &#123; this.lkm_phone = lkm_phone; &#125; public String getLkm_mobile() &#123; return lkm_mobile; &#125; public void setLkm_mobile(String lkm_mobile) &#123; this.lkm_mobile = lkm_mobile; &#125; public String getLkm_email() &#123; return lkm_email; &#125; public void setLkm_email(String lkm_email) &#123; this.lkm_email = lkm_email; &#125; public String getLkm_qq() &#123; return lkm_qq; &#125; public void setLkm_qq(String lkm_qq) &#123; this.lkm_qq = lkm_qq; &#125; public String getLkm_position() &#123; return lkm_position; &#125; public void setLkm_position(String lkm_position) &#123; this.lkm_position = lkm_position; &#125; public String getLkm_memo() &#123; return lkm_memo; &#125; public void setLkm_memo(String lkm_memo) &#123; this.lkm_memo = lkm_memo; &#125; public Customer getCustomer() &#123; return customer; &#125; public void setCustomer(Customer customer) &#123; this.customer = customer; &#125; &#125;创建映射文件多的一方的映射的创建1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.hibernate.domain.LinkMan\" table=\"cst_linkman\"&gt; &lt;!-- 建立OID与主键映射 --&gt; &lt;id name=\"lkm_id\" column=\"lkm_id\"&gt; &lt;generator class=\"native\"/&gt; &lt;/id&gt; &lt;!-- 建立普通属性与表字段映射 --&gt; &lt;property name=\"lkm_name\"/&gt; &lt;property name=\"lkm_gender\"/&gt; &lt;property name=\"lkm_phone\"/&gt; &lt;property name=\"lkm_mobile\"/&gt; &lt;property name=\"lkm_email\"/&gt; &lt;property name=\"lkm_qq\"/&gt; &lt;property name=\"lkm_position\"/&gt; &lt;property name=\"lkm_memo\"/&gt; &lt;!-- 配置多对一的关系：放置的是一的一方的对象 --&gt; &lt;!-- many-to-one标签 * name :一的一方的对象的属性名称。 * class :一的一方的类的全路径。 * column :在多的一方的表的外键的名称。 --&gt; &lt;many-to-one name=\"customer\" class=\"com.hibernate.domain.Customer\" column=\"lkm_cust_id\"/&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt;一的一方的映射的创建1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.hibernate.domain.Customer\" table=\"cst_customer\"&gt; &lt;!-- 建立OID与主键映射 --&gt; &lt;id name=\"cust_id\" column=\"cust_id\"&gt; &lt;generator class=\"native\"/&gt; &lt;/id&gt; &lt;!-- 建立普通属性与数据库表字段映射 --&gt; &lt;property name=\"cust_name\" column=\"cust_name\" /&gt; &lt;property name=\"cust_source\" column=\"cust_source\"/&gt; &lt;property name=\"cust_industry\" column=\"cust_industry\"/&gt; &lt;property name=\"cust_level\" column=\"cust_level\"/&gt; &lt;property name=\"cust_phone\" column=\"cust_phone\"/&gt; &lt;property name=\"cust_mobile\" column=\"cust_mobile\"/&gt; &lt;!-- 配置一对多的映射：放置的多的一方的集合 --&gt; &lt;!-- set标签 ： * name ：多的一方的对象集合的属性名称。 * cascade：级联 * inverse：放弃外键维护权。 --&gt; &lt;set name=\"linkMans\" cascade=\"save-update\" inverse=\"true\"&gt; &lt;!-- key标签 * column：多的一方的外键的名称。 --&gt; &lt;key column=\"lkm_cust_id\"/&gt; &lt;!-- one-to-many标签 * class :多的一方的类的全路径 --&gt; &lt;one-to-many class=\"com.hibernate.domain.LinkMan\"/&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt;创建核心配置文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC \"-//Hibernate/Hibernate Configuration DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd\"&gt;&lt;hibernate-configuration&gt; &lt;session-factory&gt; &lt;!-- 连接数据库的基本参数 --&gt; &lt;property name=\"hibernate.connection.driver_class\"&gt;com.mysql.jdbc.Driver&lt;/property&gt; &lt;property name=\"hibernate.connection.url\"&gt;jdbc:mysql:///hibernate&lt;/property&gt; &lt;property name=\"hibernate.connection.username\"&gt;root&lt;/property&gt; &lt;property name=\"hibernate.connection.password\"&gt;abc&lt;/property&gt; &lt;!-- 配置Hibernate的方言 --&gt; &lt;property name=\"hibernate.dialect\"&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt; &lt;!-- 可选配置================ --&gt; &lt;!-- 打印SQL --&gt; &lt;property name=\"hibernate.show_sql\"&gt;true&lt;/property&gt; &lt;!-- 格式化SQL --&gt; &lt;property name=\"hibernate.format_sql\"&gt;true&lt;/property&gt; &lt;!-- 自动创建表 --&gt; &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt; &lt;!-- 配置C3P0连接池 --&gt; &lt;property name=\"connection.provider_class\"&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/property&gt; &lt;!--在连接池中可用的数据库连接的最少数目 --&gt; &lt;property name=\"c3p0.min_size\"&gt;5&lt;/property&gt; &lt;!--在连接池中所有数据库连接的最大数目 --&gt; &lt;property name=\"c3p0.max_size\"&gt;20&lt;/property&gt; &lt;!--设定数据库连接的过期时间,以秒为单位, 如果连接池中的某个数据库连接处于空闲状态的时间超过了timeout时间,就会从连接池中清除 --&gt; &lt;property name=\"c3p0.timeout\"&gt;120&lt;/property&gt; &lt;!--每3000秒检查所有连接池中的空闲连接 以秒为单位--&gt; &lt;property name=\"c3p0.idle_test_period\"&gt;3000&lt;/property&gt; &lt;!-- 设置事务隔离级别 --&gt; &lt;property name=\"hibernate.connection.isolation\"&gt;4&lt;/property&gt; &lt;!-- 配置当前线程绑定的Session --&gt; &lt;property name=\"hibernate.current_session_context_class\"&gt;thread&lt;/property&gt; &lt;!-- 引入映射 --&gt; &lt;!-- &lt;mapping resource=\"com/hibernate/domain/Customer.hbm.xml\"/&gt; &lt;mapping resource=\"com/hibernate/domain/LinkMan.hbm.xml\"/&gt; --&gt; &lt;mapping resource=\"com/hibernate/domain/User.hbm.xml\"/&gt; &lt;mapping resource=\"com/hibernate/domain/Role.hbm.xml\"/&gt; &lt;/session-factory&gt;&lt;/hibernate-configuration&gt;引入工具类123456789101112131415161718public class HibernateUtils &#123; public static final Configuration cfg; public static final SessionFactory sf; static&#123; cfg = new Configuration().configure(); sf = cfg.buildSessionFactory(); &#125; public static Session openSession()&#123; return sf.openSession(); &#125; public static Session getCurrentSession()&#123; return sf.getCurrentSession(); &#125;&#125;编写测试类12345678910111213141516171819202122232425262728293031323334353637383940public class HibernateDemo1 &#123; @Test // 保存2个客户 和 3个联系人 并且建立好关系 public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建两个客户 Customer customer1 = new Customer(); customer1.setCust_name(\"王东\"); Customer customer2 = new Customer(); customer2.setCust_name(\"赵洪\"); // 创建三个联系人 LinkMan linkMan1 = new LinkMan(); linkMan1.setLkm_name(\"凤姐\"); LinkMan linkMan2 = new LinkMan(); linkMan2.setLkm_name(\"如花\"); LinkMan linkMan3 = new LinkMan(); linkMan3.setLkm_name(\"旺财\"); // 设置关系: linkMan1.setCustomer(customer1); linkMan2.setCustomer(customer1); linkMan3.setCustomer(customer2); customer1.getLinkMans().add(linkMan1); customer1.getLinkMans().add(linkMan2); customer2.getLinkMans().add(linkMan3); // 保存数据: session.save(linkMan1); session.save(linkMan2); session.save(linkMan3); session.save(customer1); session.save(customer2); tx.commit(); &#125;&#125;Hibernate 的一对多相关操作一对多关系只保存一边是否可以1234567891011121314151617181920@Test // 一对多关系只保存一边是否可以 public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(\"赵洪\"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name(\"如花\"); customer.getLinkMans().add(linkMan); linkMan.setCustomer(customer); // 只保存一边是否可以：不可以，报一个瞬时对象异常：持久态对象关联了一个瞬时态对象。 // session.save(customer); session.save(linkMan); tx.commit(); &#125;一对多的级联操作什么叫级联级联指的是，操作一个对象的时候，是否会同时操作其关联的对象。级联是有方向性操作一的一方的时候，是否操作到多的一方操作多的一方的时候，是否操作到一的一方级联保存或更新保存客户级联联系人1234567&lt;!-- set标签 ： * name ：多的一方的对象集合的属性名称。 * cascade：级联 * inverse：放弃外键维护权。 --&gt; &lt;set name=\"linkMans\" cascade=\"save-update\" inverse=\"true\"&gt;1234567891011121314151617181920212223@Test /** * 级联保存或更新操作： * * 保存客户级联联系人，操作的主体是客户对象，需要在Customer.hbm.xml中进行配置 * * &lt;set name=\"linkMans\" cascade=\"save-update\"&gt; */ public void demo3()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(\"赵洪\"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name(\"如花\"); customer.getLinkMans().add(linkMan); linkMan.setCustomer(customer); session.save(customer); tx.commit(); &#125;保存联系人联系人级联客户12345678&lt;!-- 配置多对一的关系：放置的是一的一方的对象 --&gt; &lt;!-- many-to-one标签 * name :一的一方的对象的属性名称。 * class :一的一方的类的全路径。 * column :在多的一方的表的外键的名称。 --&gt; &lt;many-to-one name=\"customer\" class=\"com.itheima.hibernate.domain.Customer\" column=\"lkm_cust_id\"/&gt;1234567891011121314151617181920212223@Test /** * 级联保存或更新操作： * * 保存联系人级联客户，操作的主体是联系人对象，需要在LinkMan.hbm.xml中进行配置 * * &lt;many-to-one name=\"customer\" cascade=\"save-update\" class=\"com.itheima.hibernate.domain.Customer\" column=\"lkm_cust_id\"/&gt; */ public void demo4()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(\"李兵\"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name(\"凤姐\"); customer.getLinkMans().add(linkMan); linkMan.setCustomer(customer); session.save(linkMan); tx.commit(); &#125;测试对象的导航123456789101112131415161718192021222324252627282930@Test /** * 测试对象的导航 * * 前提：一对多的双方都设置cascade=\"save-update\" */ public void demo5()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(\"李兵\"); LinkMan linkMan1 = new LinkMan(); linkMan1.setLkm_name(\"凤姐\"); LinkMan linkMan2 = new LinkMan(); linkMan2.setLkm_name(\"如花\"); LinkMan linkMan3 = new LinkMan(); linkMan3.setLkm_name(\"芙蓉\"); linkMan1.setCustomer(customer); customer.getLinkMans().add(linkMan2); customer.getLinkMans().add(linkMan3); // 双方都设置了cascade// session.save(linkMan1); // 发送几条insert语句 4条// session.save(customer); // 发送几条insert语句 3条 session.save(linkMan2); // 发送几条insert语句 1条 tx.commit(); &#125;级联删除级联删除：删除一边的时候，同时将另一方的数据也一并删除。删除客户级联删除联系人1234567891011121314151617181920@Test /** * 级联删除： * * 删除客户级联删除联系人，删除的主体是客户，需要在Customer.hbm.xml中配置 * * &lt;set name=\"linkMans\" cascade=\"delete\"&gt; */ public void demo6()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 没有设置级联删除，默认情况:修改了联系人的外键，删除客户 /*Customer customer = session.get(Customer.class, 1l); session.delete(customer);*/ // 删除客户，同时删除联系人 Customer customer = session.get(Customer.class, 1l); session.delete(customer); tx.commit(); &#125;删除联系人级联删除客户（基本不用）12345678910111213141516@Test /** * 级联删除： * * 删除联系人级联删除客户，删除的主体是联系人，需要在LinkMan.hbm.xml中配置 * * &lt;many-to-one name=\"customer\" cascade=\"delete\"&gt; */ public void demo7()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 删除客户，同时删除联系人 LinkMan linkMan = session.get(LinkMan.class, 3l); session.delete(linkMan); tx.commit(); &#125;一对多设置了双向关联产生多余的SQL语句123456789101112131415161718@Test /** * 将2号联系人原来归1号客户，现在改为2号客户 */ public void demo8()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询2号联系人 LinkMan linkMan = session.get(LinkMan.class, 2l); // 查询2号客户 Customer customer = session.get(Customer.class, 2l); // 双向的关联 linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); tx.commit(); &#125;解决多余的SQL语句单向维护：使一方放弃外键维护权：一的一方放弃。在set上配置inverse=”true”一对多的关联查询的修改的时候。（CRM练习–）区分cascade和inverse12345678910111213141516171819202122@Test /** * 区分cascade和inverse的区别 */ public void demo9()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = new Customer(); customer.setCust_name(\"李兵\"); LinkMan linkMan = new LinkMan(); linkMan.setLkm_name(\"凤姐\"); customer.getLinkMans().add(linkMan); // 条件在Customer.hbm.xml上的set中配置了cascade=\"save-update\" inverse=\"true\" session.save(customer); // 客户会插入到数据库，联系人也会插入到数据库，但是外键为null tx.commit(); &#125;&#125;Hibernate多对多关系的配置创建表用户表12345678CREATE TABLE `sys_user` ( `user_id` bigint(32) NOT NULL AUTO_INCREMENT COMMENT '用户id', `user_code` varchar(32) NOT NULL COMMENT '用户账号', `user_name` varchar(64) NOT NULL COMMENT '用户名称', `user_password` varchar(32) NOT NULL COMMENT '用户密码', `user_state` char(1) NOT NULL COMMENT '1:正常,0:暂停', PRIMARY KEY (`user_id`)) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;角色表123456CREATE TABLE `sys_role` ( `role_id` bigint(32) NOT NULL AUTO_INCREMENT, `role_name` varchar(32) NOT NULL COMMENT '角色名称', `role_memo` varchar(128) DEFAULT NULL COMMENT '备注', PRIMARY KEY (`role_id`)) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;中间表12345678CREATE TABLE `sys_user_role` ( `role_id` bigint(32) NOT NULL COMMENT '角色id', `user_id` bigint(32) NOT NULL COMMENT '用户id', PRIMARY KEY (`role_id`,`user_id`), KEY `FK_user_role_user_id` (`user_id`), CONSTRAINT `FK_user_role_role_id` FOREIGN KEY (`role_id`) REFERENCES `sys_role` (`role_id`) ON DELETE NO ACTION ON UPDATE NO ACTION, CONSTRAINT `FK_user_role_user_id` FOREIGN KEY (`user_id`) REFERENCES `sys_user` (`user_id`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE=InnoDB DEFAULT CHARSET=utf8;创建实体用户的实体1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class User &#123; private Long user_id; private String user_code; private String user_name; private String user_password; private String user_state; // 设置多对多关系：表示一个用户选择多个角色？ // 放置的是角色的集合 private Set&lt;Role&gt; roles = new HashSet&lt;Role&gt;(); public Long getUser_id() &#123; return user_id; &#125; public void setUser_id(Long user_id) &#123; this.user_id = user_id; &#125; public String getUser_code() &#123; return user_code; &#125; public void setUser_code(String user_code) &#123; this.user_code = user_code; &#125; public String getUser_name() &#123; return user_name; &#125; public void setUser_name(String user_name) &#123; this.user_name = user_name; &#125; public String getUser_password() &#123; return user_password; &#125; public void setUser_password(String user_password) &#123; this.user_password = user_password; &#125; public String getUser_state() &#123; return user_state; &#125; public void setUser_state(String user_state) &#123; this.user_state = user_state; &#125; public Set&lt;Role&gt; getRoles() &#123; return roles; &#125; public void setRoles(Set&lt;Role&gt; roles) &#123; this.roles = roles; &#125; &#125;角色的实体123456789101112131415161718192021222324252627282930313233public class Role &#123; private Long role_id; private String role_name; private String role_memo; // 一个角色被多个用户选择： // 放置的是用户的集合 private Set&lt;User&gt; users = new HashSet&lt;User&gt;(); public Long getRole_id() &#123; return role_id; &#125; public void setRole_id(Long role_id) &#123; this.role_id = role_id; &#125; public String getRole_name() &#123; return role_name; &#125; public void setRole_name(String role_name) &#123; this.role_name = role_name; &#125; public String getRole_memo() &#123; return role_memo; &#125; public void setRole_memo(String role_memo) &#123; this.role_memo = role_memo; &#125; public Set&lt;User&gt; getUsers() &#123; return users; &#125; public void setUsers(Set&lt;User&gt; users) &#123; this.users = users; &#125; &#125;创建映射用户的映射123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.hibernate.domain.User\" table=\"sys_user\"&gt; &lt;!-- 建立OID与主键的映射 --&gt; &lt;id name=\"user_id\" column=\"user_id\"&gt; &lt;generator class=\"native\"/&gt; &lt;/id&gt; &lt;!-- 建立普通属性与字段映射 --&gt; &lt;property name=\"user_code\" column=\"user_code\"/&gt; &lt;property name=\"user_name\" column=\"user_name\"/&gt; &lt;property name=\"user_password\" column=\"user_password\"/&gt; &lt;property name=\"user_state\" column=\"user_state\"/&gt; &lt;!-- 建立与角色的多对多的映射关系 --&gt; &lt;!-- set标签 * name ：对方的集合的属性名称。 * table ：多对多的关系需要使用中间表，放的是中间表的名称。 --&gt; &lt;set name=\"roles\" table=\"sys_user_role\" cascade=\"save-update,delete\" &gt; &lt;!-- key标签： * column ：当前的对象对应中间表的外键的名称。 --&gt; &lt;key column=\"user_id\"/&gt; &lt;!-- many-to-many标签： * class ：对方的类的全路径 * column ：对方的对象在中间表中的外键的名称。 --&gt; &lt;many-to-many class=\"com.hibernate.domain.Role\" column=\"role_id\"/&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt;角色的映射12345678910111213141516171819202122232425262728293031323334&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\"&gt;&lt;hibernate-mapping&gt; &lt;class name=\"com.hibernate.domain.Role\" table=\"sys_role\"&gt; &lt;!-- 建立OID与主键的映射 --&gt; &lt;id name=\"role_id\" column=\"role_id\"&gt; &lt;generator class=\"native\"/&gt; &lt;/id&gt; &lt;!-- 建立普通属性与字段的映射 --&gt; &lt;property name=\"role_name\" column=\"role_name\"/&gt; &lt;property name=\"role_memo\" column=\"role_memo\"/&gt; &lt;!-- 与用户的多对多的映射关系 --&gt; &lt;!-- set标签 * name ：对方的集合的属性名称。 * table ：多对多的关系需要使用中间表，放的是中间表的名称。 --&gt; &lt;set name=\"users\" table=\"sys_user_role\" cascade=\"save-update,delete\" inverse=\"true\"&gt; &lt;!-- key标签： * column ：当前的对象对应中间表的外键的名称。 --&gt; &lt;key column=\"role_id\"/&gt; &lt;!-- many-to-many标签： * class ：对方的类的全路径 * column ：对方的对象在中间表中的外键的名称。 --&gt; &lt;many-to-many class=\"com.hibernate.domain.User\" column=\"user_id\"/&gt; &lt;/set&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt;编写测试类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package com.itheima.hibernate.demo2;import org.hibernate.Session;import org.hibernate.Transaction;import org.junit.Test;import com.itheima.hibernate.domain.Role;import com.itheima.hibernate.domain.User;import com.itheima.hibernate.utils.HibernateUtils;/** * Hibernate的多对多的映射 * @author jt * */public class HibernateDemo2 &#123; @Test /** * 保存多条记录：保存多个用户和角色 */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建2个用户 User user1 = new User(); user1.setUser_name(\"赵洪\"); User user2 = new User(); user2.setUser_name(\"李兵\"); // 创建3个角色 Role role1 = new Role(); role1.setRole_name(\"研发部\"); Role role2 = new Role(); role2.setRole_name(\"市场部\"); Role role3 = new Role(); role3.setRole_name(\"公关部\"); // 设置双向的关联关系: user1.getRoles().add(role1); user1.getRoles().add(role2); user2.getRoles().add(role2); user2.getRoles().add(role3); role1.getUsers().add(user1); role2.getUsers().add(user1); role2.getUsers().add(user2); role3.getUsers().add(user2); // 保存操作:多对多建立了双向的关系必须有一方放弃外键维护。 // 一般是被动方放弃外键维护权。 session.save(user1); session.save(user2); session.save(role1); session.save(role2); session.save(role3); tx.commit(); &#125;&#125;Hibernated 多对多的操作只保存一边是否可以1234567891011121314151617181920212223242526@Test /** * 多对多的操作： * * 只保存一边是否可以？不可以，瞬时对象异常 */ public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建2个用户 User user1 = new User(); user1.setUser_name(\"赵洪\"); // 创建3个角色 Role role1 = new Role(); role1.setRole_name(\"研发部\"); // 设置双向的关联关系: user1.getRoles().add(role1); role1.getUsers().add(user1); // 只保存用户： // session.save(user1); session.save(role1); tx.commit(); &#125;多对多的级联保存或更新保存用户级联保存角色1234567891011121314151617181920212223242526@Test /** * 多对多的级联保存： * * 保存用户级联保存角色。在用户的映射文件中配置。 * * 在User.hbm.xml中的set上配置 cascade=\"save-update\" */ public void demo3()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建2个用户 User user1 = new User(); user1.setUser_name(\"赵洪\"); // 创建3个角色 Role role1 = new Role(); role1.setRole_name(\"研发部\"); // 设置双向的关联关系: user1.getRoles().add(role1); role1.getUsers().add(user1); // 只保存用户： session.save(user1); tx.commit(); &#125;保存角色级联保存用户1234567891011121314151617181920212223242526/** * 多对多的级联保存： * * 保存角色级联保存用户。在角色的映射文件中配置。 * * 在Role.hbm.xml中的set上配置 cascade=\"save-update\" */ @Test public void demo4()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建2个用户 User user1 = new User(); user1.setUser_name(\"李兵\"); // 创建3个角色 Role role1 = new Role(); role1.setRole_name(\"公关部\"); // 设置双向的关联关系: user1.getRoles().add(role1); role1.getUsers().add(user1); // 只保存用户： session.save(role1); tx.commit(); &#125;多对多的级联删除（基本用不上）删除用户级联删除角色12345678910111213141516/** * 多对多的级联删除： * * 删除用户级联删除角色 * * 在User.hbm.xml中的set上配置 cascade=\"delete\" */ @Test public void demo5()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号用户: User user = session.get(User.class, 1l); session.delete(user); tx.commit(); &#125;删除角色级联删除用户12345678910111213141516/** * 多对多的级联删除： * * 删除角色级联删除用户 * * 在Role.hbm.xml中的set上配置 cascade=\"delete\" */ @Test public void demo6()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询2号角色: Role role = session.get(Role.class, 2l); session.delete(role); tx.commit(); &#125;多对多的其他的操作给用户选择角色1234567891011121314151617@Test /** * 给用户选择角色 */ public void demo7()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给1号用户多选2号角色 // 查询1号用户 User user = session.get(User.class, 1l); // 查询2号角色 Role role = session.get(Role.class, 2l); user.getRoles().add(role); tx.commit(); &#125;给用户改选角色12345678910111213141516171819@Test /** * 给用户改选角色 */ public void demo8()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给2号用户将原有的2号角色改为3号角色 // 查询2号用户 User user = session.get(User.class, 2l); // 查询2号角色 Role role2 = session.get(Role.class, 2l); Role role3 = session.get(Role.class, 3l); user.getRoles().remove(role2); user.getRoles().add(role3); tx.commit(); &#125;给用户删除角色123456789101112131415161718@Test /** * 给用户改选角色 */ public void demo9()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 给2号用户删除1号角色 // 查询2号用户 User user = session.get(User.class, 2l); // 查询2号角色 Role role = session.get(Role.class, 1l); user.getRoles().remove(role); tx.commit(); &#125;&#125;Hibernate的查询的方式在Hibernate中提供了很多种的查询的方式。Hibernate共提供了五种查询方式。Hibernate的查询方式：OID查询OID检索：Hibernate根据对象的OID（主键）进行检索使用get方法1Customer customer = session.get(Customer.class,1l);使用load方法1Customer customer = session.load(Customer.class,1l);Hibernate的查询方式：对象导航检索对象导航检索：Hibernate根据一个已经查询到的对象，获得其关联的对象的一种查询方式。1234567LinkMan linkMan = session.get(LinkMan.class,1l);Customer customer =linkMan.getCustomer();Customer customer = session.get(Customer.class,2l);Set&lt;LinkMan&gt; linkMans = customer.getLinkMans();Hibernate的查询方式：HQL检索HQL查询：Hibernate Query Language，Hibernate的查询语言，是一种面向对象的方式的查询语言，语法类似SQL。通过session.createQuery()，用于接收一个HQL进行查询方式。初始化一些数据12345678910111213141516171819202122232425@Test /** * 初始化数据 */ public void demo1() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 创建一个客户 Customer customer = new Customer(); customer.setCust_name(\"李向文\"); for (int i = 1; i &lt;= 10; i++) &#123; LinkMan linkMan = new LinkMan(); linkMan.setLkm_name(\"王东\" + i); linkMan.setCustomer(customer); customer.getLinkMans().add(linkMan); session.save(linkMan); &#125; session.save(customer); tx.commit(); &#125;HQL的简单查询12345678910111213141516171819202122@Test /** * HQL的简单查询 */ public void demo2() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 简单的查询 Query query = session.createQuery(\"from Customer\"); List&lt;Customer&gt; list = query.list(); // sql中支持*号的写法：select * from cst_customer; 但是在HQL中不支持*号的写法。 /* * Query query = session.createQuery(\"select * from Customer\");// 报错 * List&lt;Customer&gt; list = query.list(); */ for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;HQL的别名查询123456789101112131415161718192021@Test /** * 别名查询 */ public void demo3() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 别名的查询 /* * Query query = session.createQuery(\"from Customer c\"); List&lt;Customer&gt; * list = query.list(); */ Query query = session.createQuery(\"select c from Customer c\"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;HQL的排序查询12345678910111213141516171819@Test /** * 排序查询 */ public void demo4() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 排序的查询 // 默认情况 // List&lt;Customer&gt; list = session.createQuery(\"from Customer order by // cust_id\").list(); // 设置降序排序 升序使用asc 降序使用desc List&lt;Customer&gt; list = session.createQuery(\"from Customer order by cust_id desc\").list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;HQL的条件查询1234567891011121314151617181920212223242526272829303132333435@Test /** * 条件查询 */ public void demo5() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 条件的查询 // 一、按位置绑定：根据参数的位置进行绑定。 // 一个条件 /* * Query query = session.createQuery(\"from Customer where cust_name = ?\" * ); query.setParameter(0, \"李兵\"); List&lt;Customer&gt; list = query.list(); */ // 多个条件 /* * Query query = session.createQuery( * \"from Customer where cust_source = ? and cust_name like ?\"); * query.setParameter(0, \"小广告\"); query.setParameter(1, \"李%\"); * List&lt;Customer&gt; list = query.list(); */ // 二、按名称绑定 Query query = session.createQuery(\"from Customer where cust_source = :aaa and cust_name like :bbb\"); // 设置参数: query.setParameter(\"aaa\", \"朋友推荐\"); query.setParameter(\"bbb\", \"李%\"); List&lt;Customer&gt; list = query.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;HQL的投影查询投影查询：查询对象的某个或某些属性12345678910111213141516171819202122232425262728293031@Test /** * 投影查询 */ public void demo6() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 投影查询 // 单个属性 /* * List&lt;Object&gt; list = session.createQuery( * \"select c.cust_name from Customer c\").list(); for (Object object : * list) &#123; System.out.println(object); &#125; */ // 多个属性: /* * List&lt;Object[]&gt; list = session.createQuery( * \"select c.cust_name,c.cust_source from Customer c\").list(); for * (Object[] objects : list) &#123; * System.out.println(Arrays.toString(objects)); &#125; */ // 查询多个属性，但是我想封装到对象中。 List&lt;Customer&gt; list = session.createQuery(\"select new Customer(cust_name,cust_source) from Customer\").list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;HQL的分页查询12345678910111213141516171819@Test /** * 分页查询 */ public void demo7() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 分页查询 Query query = session.createQuery(\"from LinkMan\"); query.setFirstResult(20); query.setMaxResults(10); List&lt;LinkMan&gt; list = query.list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan); &#125; tx.commit(); &#125;HQL的分组统计查询12345678910111213141516171819@Test /** * 分组统计查询 */ public void demo8() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 聚合函数的使用：count(),max(),min(),avg(),sum() Object object = session.createQuery(\"select count(*) from Customer\").uniqueResult(); System.out.println(object); // 分组统计： List&lt;Object[]&gt; list = session.createQuery(\"select cust_source,count(*) from Customer group by cust_source\") .list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; tx.commit(); &#125;HQL的多表查询SQL的多表查询连接查询交叉连接：笛卡尔积1select * from A,B;内连接 : inner join (inner 可以省略)隐式内连接：1select * from A,B where A.id = B.aid;显示内连接：1select * from A inner join B on A.id = B.aid;外连接 :左外连接:left outer join(outer 可以省略)1select * from A left outer join B on A.id= B.aid;右外连接:right outer join(outer 可以省略)1select * from A right outer join B on A.id = B.aid;子查询HQL的多表查询连接查询交叉连接内连接显示内连接隐式内连接迫切内连接外连接左外连接右外连接迫切左外连接1234567891011121314151617181920212223242526@Test /** * HQL的多表查询 */ public void demo9() &#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // SQL:SELECT * FROM cst_customer c INNER JOIN cst_linkman l ON // c.cust_id = l.lkm_cust_id; // HQL:内连接 from Customer c inner join c.linkMans /* * List&lt;Object[]&gt; list = session.createQuery( * \"from Customer c inner join c.linkMans\").list(); for (Object[] * objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125; */ // HQL:迫切内连接 其实就在普通的内连接inner join后添加一个关键字fetch. from Customer c inner // join fetch c.linkMans List&lt;Customer&gt; list = session.createQuery(\"select distinct c from Customer c inner join fetch c.linkMans\") .list();// 通知hibernate，将另一个对象的数据封装到该对象中 for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;Hibernate的查询方式：QBC检索QBC查询：Query By Criteria，条件查询。是一种更加面向对象化的查询的方式。简单查询1234567891011121314151617@Test /** * 简单的查询 */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 获得Criteria的对象 Criteria criteria = session.createCriteria(Customer.class); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;排序查询1234567891011121314151617181920@Test /** * 排序查询 */ public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 排序查询 Criteria criteria = session.createCriteria(Customer.class);// criteria.addOrder(Order.asc(\"cust_id\")); // 升序 criteria.addOrder(Order.desc(\"cust_id\")); // 降序 List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;分页查询12345678910111213141516171819@Test /** * 分页查询 */ public void demo3()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 分页查询 Criteria criteria = session.createCriteria(LinkMan.class); criteria.setFirstResult(10); criteria.setMaxResults(10); List&lt;LinkMan&gt; list = criteria.list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan); &#125; tx.commit(); &#125;条件查询1234567891011121314151617181920212223242526272829303132@Test /** * 条件查询 */ public void demo4()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 条件查询 Criteria criteria = session.createCriteria(Customer.class); // 设置条件: /** * = eq * &gt; gt * &gt;= ge * &lt; lt * &lt;= le * &lt;&gt; ne * like * in * and * or */ criteria.add(Restrictions.eq(\"cust_source\", \"小广告\"));// criteria.add(Restrictions.or(Restrictions.like(\"cust_name\", \"李%\"))); criteria.add(Restrictions.like(\"cust_name\", \"李%\")); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;统计查询12345678910111213141516171819@Test /** * 统计查询 */ public void demo5()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Criteria criteria = session.createCriteria(Customer.class); /** * add :普通的条件。where后面条件 * addOrder :排序 * setProjection :聚合函数 和 group by having */ criteria.setProjection(Projections.rowCount()); Long num = (Long) criteria.uniqueResult(); System.out.println(num); tx.commit(); &#125;离线条件查询（SSH）—DetachedCriteria12345678910111213141516171819@Test /** * 离线条件查询 */ public void demo6()&#123; DetachedCriteria detachedCriteria = DetachedCriteria.forClass(Customer.class); detachedCriteria.add(Restrictions.like(\"cust_name\", \"李%\")); Session session = HibernateUtils.getCurrentSession(); Transaction transaction = session.beginTransaction(); Criteria criteria = detachedCriteria.getExecutableCriteria(session); List&lt;Customer&gt; list = criteria.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; transaction.commit(); &#125;&#125;Hibernate的查询方式：SQL检索SQL查询SQL查询：通过使用sql语句进行查询12345678910111213141516171819202122public class HibernateDemo3 &#123; @Test public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); /*SQLQuery sqlQuery = session.createSQLQuery(\"select * from cst_customer\"); List&lt;Object[]&gt; list = sqlQuery.list(); for (Object[] objects : list) &#123; System.out.println(Arrays.toString(objects)); &#125;*/ SQLQuery sqlQuery = session.createSQLQuery(\"select * from cst_customer\"); sqlQuery.addEntity(Customer.class); List&lt;Customer&gt; list = sqlQuery.list(); for (Customer customer : list) &#123; System.out.println(customer); &#125; tx.commit(); &#125;&#125;Hibernate的抓取策略（优化）延迟加载的概述什么是延迟加载延迟加载：lazy（懒加载）。执行到该行代码的时候，不会发送语句去进行查询，在真正使用这个对象的属性的时候才会发送SQL语句进行查询。延迟加载的分类类级别的延迟加载指的是通过load方法查询某个对象的时候，是否采用延迟。session.load(Customer.class,1l);类级别延迟加载通过上的lazy进行配置，如果让lazy失效将lazy设置为false将持久化类使用final修饰Hibernate. Initialize()关联级别的延迟加载指的是在查询到某个对象的时候，查询其关联的对象的时候，是否采用延迟加载。1Customer customer = session.get(Customer.class,1l);customer.getLinkMans();—-通过客户获得联系人的时候，联系人对象是否采用了延迟加载，称为是关联级别的延迟。抓取策略往往会和关联级别的延迟加载一起使用，优化语句。123456789101112131415161718public class HibernateDemo1 &#123; @Test /** * 类级别的延迟加载 * * 在&lt;class&gt;的标签上配置的lazy */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); Customer customer = session.load(Customer.class, 1l); Hibernate.initialize(customer); System.out.println(customer); tx.commit(); &#125;&#125;抓取策略抓取策略的概述通过一个对象抓取到关联对象需要发送SQL语句，SQL语句如何发送，发送成什么样格式通过策略进行配置。通过&lt;set&gt;或者&lt;many-to-one&gt;上通过fetch属性进行设置fetch和这些标签上的lazy如何设置优化发送的SQL语句&lt;set&gt;上的fetch和lazyfetch：抓取策略，控制SQL语句格式select ：默认值，发送普通的select语句，查询关联对象join ：发送一条迫切左外连接查询关联对象subselect ：发送一条子查询查询其关联对象lazy：延迟加载，控制查询关联对象的时候是否采用延迟true ：默认值，查询关联对象的时候，采用延迟加载false ：查询关联对象的时候，不采用延迟加载extra ：及其懒惰。在实际开发中，一般都采用默认值。如果有特殊的需求，可能需要配置join。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131/** * 在&lt;set&gt;上的fetch和lazy * @author jt * */public class HibernateDemo2 &#123; @Test /** * 默认情况： */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号客户 Customer customer = session.get(Customer.class, 1l);// 发送一条查询客户的SQL System.out.println(customer.getCust_name()); // 查看1号客户的每个联系人的信息 for (LinkMan linkMan : customer.getLinkMans()) &#123;// 发送一条根据客户ID查询联系人的SQL System.out.println(linkMan.getLkm_name()); &#125; tx.commit(); &#125; @Test /** * 设置fetch=\"select\" lazy=\"true\" */ public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号客户 Customer customer = session.get(Customer.class, 1l);// 发送一条查询客户的SQL System.out.println(customer.getCust_name()); // 查看1号客户的每个联系人的信息 for (LinkMan linkMan : customer.getLinkMans()) &#123;// 发送一条根据客户ID查询联系人的SQL System.out.println(linkMan.getLkm_name()); &#125; tx.commit(); &#125; @Test /** * 设置 fetch=\"select\" lazy=\"false\" */ public void demo3()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号客户 Customer customer = session.get(Customer.class, 1l);// 发送两条SQL语句：查询客户的名称，查询客户关联联系人 System.out.println(customer.getCust_name()); /*// 查看1号客户的每个联系人的信息 for (LinkMan linkMan : customer.getLinkMans()) &#123;// System.out.println(linkMan.getLkm_name()); &#125;*/ System.out.println(customer.getLinkMans().size()); tx.commit(); &#125; @Test /** * 设置fetch=\"select\" lazy=\"extra\" */ public void demo4()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号客户 Customer customer = session.get(Customer.class, 1l);// 发送一条查询1号客户的SQL语句 System.out.println(customer.getCust_name()); System.out.println(customer.getLinkMans().size());// 发送一条select count() from ...; tx.commit(); &#125; @Test /** * 设置fetch=\"join\" lazy=失效 */ public void demo5()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); // 查询1号客户 Customer customer = session.get(Customer.class, 1l);// 发送一条迫切左外连接查询记录 System.out.println(customer.getCust_name()); System.out.println(customer.getLinkMans().size());// 不发送 tx.commit(); &#125; @SuppressWarnings(\"unchecked\") @Test /** * 设置fetch=\"subselect\" lazy=\"true\" */ public void demo6()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); List&lt;Customer&gt; list = session.createQuery(\"from Customer\").list();// 发送查询所有客户的SQL for (Customer customer : list) &#123; System.out.println(customer.getCust_name()); System.out.println(customer.getLinkMans().size());// 发送一条子查询 &#125; tx.commit(); &#125; @SuppressWarnings(\"unchecked\") @Test /** * 设置fetch=\"subselect\" lazy=\"false\" */ public void demo7()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); List&lt;Customer&gt; list = session.createQuery(\"from Customer\").list();// 发送查询所有客户的SQL，发送一条子查询 for (Customer customer : list) &#123; System.out.println(customer.getCust_name()); System.out.println(customer.getLinkMans().size());// &#125; tx.commit(); &#125;&#125;&lt;many-to-one&gt;上的fetch和lazyfetch ：抓取策略，控制SQL语句格式。select ：默认值，发送普通的select语句，查询关联对象。join ：发送一条迫切左外连接。lazy ：延迟加载，控制查询关联对象的时候是否采用延迟。proxy ：默认值，proxy具体的取值，取决于另一端的&lt;class&gt;上的lazy的值。false ：查询关联对象，不采用延迟。no-proxy ：（不会使用）在实际开发中，一般都采用默认值。如果有特殊的需求，可能需要配置join。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/** * many-to-one上的fetch和lazy测试 * @author jt * */public class HibernateDemo3 &#123; @Test /** * 默认值 */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); LinkMan linkMan = session.get(LinkMan.class, 1l);// 发送一条查询联系人语句 System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name());// 发送一条select语句查询联系人所关联的客户 tx.commit(); &#125; @Test /** * fetch=\"select\" lazy=\"proxy\" */ public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); LinkMan linkMan = session.get(LinkMan.class, 1l);// 发送一条查询联系人语句 System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name());// 发送一条select语句查询联系人所关联的客户 tx.commit(); &#125; @Test /** * fetch=\"select\" lazy=\"false\" */ public void demo3()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); LinkMan linkMan = session.get(LinkMan.class, 1l);// 发送一条查询联系人语句,发送一条select语句查询联系人所关联的客户 System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name());// tx.commit(); &#125; @Test /** * fetch=\"join\" lazy=失效 */ public void demo4()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); LinkMan linkMan = session.get(LinkMan.class, 1l);// 发送一条迫切左外连接查询联系人所关联的客户。 System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name());// tx.commit(); &#125;&#125;批量抓取什么是批量抓取一批关联对象一起抓取，batch-size测试批量抓取123456789101112131415161718192021222324252627282930313233343536373839404142434445/** * 批量抓取 * @author jt * */public class HibernateDemo4 &#123; @SuppressWarnings(\"unchecked\") @Test /** * 获取客户的时候，批量抓取联系人 * 在Customer.hbm.xml中set上配置batch-size */ public void demo1()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); List&lt;Customer&gt; list = session.createQuery(\"from Customer\").list(); for (Customer customer : list) &#123; System.out.println(customer.getCust_name()); for (LinkMan linkMan : customer.getLinkMans()) &#123; System.out.println(linkMan.getLkm_name()); &#125; &#125; tx.commit(); &#125; @SuppressWarnings(\"unchecked\") @Test /** * 获取联系人的时候，批量抓取客户 * * 在Customer.hbm.xml中&lt;class&gt;上配置 */ public void demo2()&#123; Session session = HibernateUtils.getCurrentSession(); Transaction tx = session.beginTransaction(); List&lt;LinkMan&gt; list = session.createQuery(\"from LinkMan\").list(); for (LinkMan linkMan : list) &#123; System.out.println(linkMan.getLkm_name()); System.out.println(linkMan.getCustomer().getCust_name()); &#125; tx.commit(); &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Hibernate","slug":"后端/Java/Hibernate","permalink":"https://me.obey.fun/categories/后端/Java/Hibernate/"}],"tags":[{"name":"Hibernate","slug":"Hibernate","permalink":"https://me.obey.fun/tags/Hibernate/"},{"name":"ORM","slug":"ORM","permalink":"https://me.obey.fun/tags/ORM/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Hibernate","slug":"后端/Java/Hibernate","permalink":"https://me.obey.fun/categories/后端/Java/Hibernate/"}]},{"title":"SpringMvc（简单入门）","slug":"SpringMvc（简单入门）","date":"2019-05-04T08:44:03.000Z","updated":"2019-06-03T14:07:56.147Z","comments":true,"path":"SpringMvc（简单入门）.html","link":"","permalink":"https://me.obey.fun/SpringMvc（简单入门）.html","excerpt":"","text":"Spring 入门Springmvc是什么Spring web mvc和Struts2都属于表现层的框架,它是Spring框架的一部分,我们可以从Spring的整体结构中看得出来,如下图：Springmvc处理流程如下图所示：入门程序需求：使用浏览器显示商品列表创建web工程springMVC是表现层框架，需要搭建web工程开发。如下图创建动态web工程：输入工程名，选择配置Tomcat（如果已有，则直接使用），如下图：配置Tomcat，如下图：选择准备好的Tomcat，这里用的是Tomcat7，如下图：选择成功，点击Finish，如下图：选择刚刚设置成功的Tomcat，如下图：如下图选择web的版本是2.5，可以自动生成web.xml配置文件，创建效果如下图：导入jar包从课前资料中导入springMVC的jar包，位置如下图：复制jar到lib目录，工程直接加载jar包，如下图：加入配置文件创建config资源文件夹，存放配置文件，如下图：创建springmvc.xml创建SpringMVC的核心配置文件SpringMVC本身就是Spring的子项目，对Spring兼容性很好，不需要做很多配置。这里只配置一个Controller扫描就可以了，让Spring对页面控制层Controller进行管理。创建springmvc.xml12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"&gt; &lt;!-- 配置controller扫描包 --&gt; &lt;context:component-scan base-package=\"fun.obey.springmvc.controller\" /&gt;&lt;/beans&gt;创建包fun.obey.springmvc.controller配置前端控制器配置SpringMVC的前端控制器DispatcherServlet在web.xml中123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\"&gt; &lt;display-name&gt;springmvc-first&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 配置SpringMVC前端控制器 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc-first&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;!-- 指定SpringMVC配置文件 --&gt; &lt;!-- SpringMVC的配置文件的默认路径是/WEB-INF/$&#123;servlet-name&#125;-servlet.xml --&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc-first&lt;/servlet-name&gt; &lt;!-- 设置所有以action结尾的请求进入SpringMVC --&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt;加入jsp页面把写好的itemList.jsp复制到工程的/WEB-INF/jsp目录下，itemList.jsp1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/fmt\" prefix=\"fmt\"%&gt;&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"&gt;&lt;title&gt;查询商品列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=\"$&#123;pageContext.request.contextPath &#125;/item/queryitem.action\" method=\"post\"&gt;查询条件：&lt;table width=\"100%\" border=1&gt;&lt;tr&gt;&lt;td&gt;&lt;input type=\"submit\" value=\"查询\"/&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;商品列表：&lt;table width=\"100%\" border=1&gt;&lt;tr&gt; &lt;td&gt;商品名称&lt;/td&gt; &lt;td&gt;商品价格&lt;/td&gt; &lt;td&gt;生产日期&lt;/td&gt; &lt;td&gt;商品描述&lt;/td&gt; &lt;td&gt;操作&lt;/td&gt;&lt;/tr&gt;&lt;c:forEach items=\"$&#123;itemList &#125;\" var=\"item\"&gt;&lt;tr&gt; &lt;td&gt;$&#123;item.name &#125;&lt;/td&gt; &lt;td&gt;$&#123;item.price &#125;&lt;/td&gt; &lt;td&gt;&lt;fmt:formatDate value=\"$&#123;item.createtime&#125;\" pattern=\"yyyy-MM-dd HH:mm:ss\"/&gt;&lt;/td&gt; &lt;td&gt;$&#123;item.detail &#125;&lt;/td&gt; &lt;td&gt;&lt;a href=\"$&#123;pageContext.request.contextPath &#125;/toEdit.form?id=$&#123;item.id&#125;\"&gt;修改&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/c:forEach&gt;&lt;/table&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;实现显示商品列表页创建pojo分析页面，查看页面需要的数据，1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465package fun.obey.springmvc.pojo;import java.util.Date;public class Items &#123; private Integer id; private String name; private Float price; private String pic; private Date createtime; private String detail; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name == null ? null : name.trim(); &#125; public Float getPrice() &#123; return price; &#125; public void setPrice(Float price) &#123; this.price = price; &#125; public String getPic() &#123; return pic; &#125; public void setPic(String pic) &#123; this.pic = pic == null ? null : pic.trim(); &#125; public Date getCreatetime() &#123; return createtime; &#125; public void setCreatetime(Date createtime) &#123; this.createtime = createtime; &#125; public String getDetail() &#123; return detail; &#125; public void setDetail(String detail) &#123; this.detail = detail == null ? null : detail.trim(); &#125;&#125;创建ItemControllerItemController是一个普通的java类，不需要实现任何接口。需要在类上添加@Controller注解，把Controller交由Spring管理在方法上面添加@RequestMapping注解，里面指定请求的url。其中“.action”可以加也可以不加。1234567891011121314151617181920212223242526@Controllerpublic class ItemController &#123; // @RequestMapping：里面放的是请求的url，和用户请求的url进行匹配 // action可以写也可以不写 @RequestMapping(\"/itemList.action\") public ModelAndView queryItemList() &#123; // 创建页面需要显示的商品数据 List&lt;Item&gt; list = new ArrayList&lt;&gt;(); list.add(new Item(1, \"1华为 荣耀8\", 2399, new Date(), \"质量好！1\")); list.add(new Item(2, \"2华为 荣耀8\", 2399, new Date(), \"质量好！2\")); list.add(new Item(3, \"3华为 荣耀8\", 2399, new Date(), \"质量好！3\")); list.add(new Item(4, \"4华为 荣耀8\", 2399, new Date(), \"质量好！4\")); list.add(new Item(5, \"5华为 荣耀8\", 2399, new Date(), \"质量好！5\")); list.add(new Item(6, \"6华为 荣耀8\", 2399, new Date(), \"质量好！6\")); // 创建ModelAndView，用来存放数据和视图 ModelAndView modelAndView = new ModelAndView(); // 设置数据到模型中 modelAndView.addObject(\"list\", list); // 设置视图jsp，需要设置视图的物理地址 modelAndView.setViewName(\"/WEB-INF/jsp/itemList.jsp\"); return modelAndView; &#125;&#125;启动项目测试启动项目，浏览器访问地址http://127.0.0.1:8080/springmvc-first/itemList.action效果如下图：为什么可以用呢？我们需要分析一下springMVC的架构图。Springmvc架构框架结构框架结构如下图：架构流程用户发送请求至前端控制器DispatcherServletDispatcherServlet收到请求调用HandlerMapping处理器映射器。处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。DispatcherServlet通过HandlerAdapter处理器适配器调用处理器执行处理器(Controller，也叫后端控制器)。Controller执行完成返回ModelAndViewHandlerAdapter将controller执行结果ModelAndView返回给DispatcherServletDispatcherServlet将ModelAndView传给ViewReslover视图解析器ViewReslover解析后返回具体ViewDispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。DispatcherServlet响应用户组件说明以下组件通常使用框架提供实现：DispatcherServlet：前端控制器用户请求到达前端控制器，它就相当于mvc模式中的c，dispatcherServlet是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet的存在降低了组件之间的耦合性。HandlerMapping：处理器映射器HandlerMapping负责根据用户请求url找到Handler即处理器，springmvc提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。Handler：处理器Handler 是继DispatcherServlet前端控制器的后端控制器，在DispatcherServlet的控制下Handler对具体的用户请求进行处理。由于Handler涉及到具体的用户业务请求，所以一般情况需要程序员根据业务需求开发Handler。HandlAdapter：处理器适配器通过HandlerAdapter对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。下图是许多不同的适配器，最终都可以使用usb接口连接ViewResolver：视图解析器View Resolver负责将处理结果生成View视图，View Resolver首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成View视图对象，最后对View进行渲染将处理结果通过页面展示给用户。View：视图springmvc框架提供了很多的View视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是jsp。一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。说明：在springmvc的各个组件中，处理器映射器、处理器适配器、视图解析器称为springmvc的三大组件。需要用户开发的组件有handler、view默认加载的组件我们没有做任何配置，就可以使用这些组件因为框架已经默认加载这些组件了，配置文件位置如下图：123456789101112131415161718192021222324# Default implementation classes for DispatcherServlet's strategy interfaces.# Used as fallback when no matching beans are found in the DispatcherServlet context.# Not meant to be customized by application developers.org.springframework.web.servlet.LocaleResolver=org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolverorg.springframework.web.servlet.ThemeResolver=org.springframework.web.servlet.theme.FixedThemeResolverorg.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\ org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMappingorg.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\\ org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\\ org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapterorg.springframework.web.servlet.HandlerExceptionResolver=org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver,\\ org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\\ org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolverorg.springframework.web.servlet.RequestToViewNameTranslator=org.springframework.web.servlet.view.DefaultRequestToViewNameTranslatororg.springframework.web.servlet.ViewResolver=org.springframework.web.servlet.view.InternalResourceViewResolverorg.springframework.web.servlet.FlashMapManager=org.springframework.web.servlet.support.SessionFlashMapManager组件扫描器使用组件扫描器省去在spring容器配置每个Controller类的繁琐。使用&lt;context:component-scan&gt;自动扫描标记@Controller的控制器类，在springmvc.xml配置文件中配置如下：12&lt;!-- 配置controller扫描包，多个包之间用,分隔 --&gt;&lt;context:component-scan base-package=\"cn.itcast.springmvc.controller\" /&gt;注解映射器和适配器配置处理器映射器注解式处理器映射器，对类中标记了@ResquestMapping的方法进行映射。根据@ResquestMapping定义的url匹配@ResquestMapping标记的方法，匹配成功返回HandlerMethod对象给前端控制器。HandlerMethod对象中封装url对应的方法Method。从spring3.1版本开始，废除了DefaultAnnotationHandlerMapping的使用，推荐使用RequestMappingHandlerMapping完成注解式处理器映射。在springmvc.xml配置文件中配置如下：123&lt;!-- 配置处理器映射器 --&gt;&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\" /&gt;注解描述：@RequestMapping：定义请求url到处理器功能方法的映射配置处理器适配器注解式处理器适配器，对标记@ResquestMapping的方法进行适配。从spring3.1版本开始，废除了AnnotationMethodHandlerAdapter的使用，推荐使用RequestMappingHandlerAdapter完成注解式处理器适配。在springmvc.xml配置文件中配置如下：123&lt;!-- 配置处理器适配器 --&gt;&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\" /&gt;注解驱动直接配置处理器映射器和处理器适配器比较麻烦，可以使用注解驱动来加载。SpringMVC使用&lt;mvc:annotation-driven&gt;自动加载RequestMappingHandlerMapping和RequestMappingHandlerAdapter可以在springmvc.xml配置文件中使用&lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。12&lt;!-- 注解驱动 --&gt;&lt;mvc:annotation-driven /&gt;视图解析器视图解析器使用SpringMVC框架默认的InternalResourceViewResolver，这个视图解析器支持JSP视图解析在springmvc.xml配置文件中配置如下：12345678910&lt;!-- Example: prefix=\"/WEB-INF/jsp/\", suffix=\".jsp\", viewname=\"test\" -&gt; \"/WEB-INF/jsp/test.jsp\" --&gt;&lt;!-- 配置视图解析器 --&gt;&lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;!-- 配置逻辑视图的前缀 --&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt; &lt;!-- 配置逻辑视图的后缀 --&gt; &lt;property name=\"suffix\" value=\".jsp\" /&gt;&lt;/bean&gt;逻辑视图名需要在controller中返回ModelAndView指定，比如逻辑视图名为ItemList，则最终返回的jsp视图地址:“WEB-INF/jsp/itemList.jsp”最终jsp物理地址：前缀+逻辑视图名+后缀修改ItemController修改ItemController中设置视图的代码12345678910111213141516171819202122232425// @RequestMapping：里面放的是请求的url，和用户请求的url进行匹配// action可以写也可以不写@RequestMapping(\"/itemList.action\")public ModelAndView queryItemList() &#123; // 创建页面需要显示的商品数据 List&lt;Item&gt; list = new ArrayList&lt;&gt;(); list.add(new Item(1, \"1华为 荣耀8\", 2399, new Date(), \"质量好！1\")); list.add(new Item(2, \"2华为 荣耀8\", 2399, new Date(), \"质量好！2\")); list.add(new Item(3, \"3华为 荣耀8\", 2399, new Date(), \"质量好！3\")); list.add(new Item(4, \"4华为 荣耀8\", 2399, new Date(), \"质量好！4\")); list.add(new Item(5, \"5华为 荣耀8\", 2399, new Date(), \"质量好！5\")); list.add(new Item(6, \"6华为 荣耀8\", 2399, new Date(), \"质量好！6\")); // 创建ModelAndView，用来存放数据和视图 ModelAndView modelAndView = new ModelAndView(); // 设置数据到模型中 modelAndView.addObject(\"itemList\", list); // 设置视图jsp，需要设置视图的物理地址 // modelAndView.setViewName(\"/WEB-INF/jsp/itemList.jsp\"); // 配置好视图解析器前缀和后缀，这里只需要设置逻辑视图就可以了。 // 视图解析器根据前缀+逻辑视图名+后缀拼接出来物理路径 modelAndView.setViewName(\"itemList\"); return modelAndView;&#125;效果效果和之前一样，如下图：整合mybatis为了更好的学习 springmvc和mybatis整合开发的方法，需要将springmvc和mybatis进行整合。整合目标： 控制层采用springmvc、持久层使用mybatis实现。需要的jar包spring（包括springmvc）mybatismybatis-spring整合包数据库驱动第三方连接池。整合思路Dao层：1、SqlMapConfig.xml，空文件即可，但是需要文件头。2、applicationContext-dao.xmla) 数据库连接池b) SqlSessionFactory对象，需要spring和mybatis整合包下的。c) 配置mapper文件扫描器。Service层：1、applicationContext-service.xml包扫描器，扫描@service注解的类。2、applicationContext-trans.xml配置事务。Controller层：1、Springmvc.xmla) 包扫描器，扫描@Controller注解的类。b) 配置注解驱动c) 配置视图解析器Web.xml文件：1、配置spring2、配置前端控制器。加入jar包复制jar包到/WEB-INF/lib中工程自动加载jar包加入配置文件创建资源文件夹config在其下创建mybatis和spring文件夹，用来存放配置文件.sqlMapConfig.xml使用逆向工程来生成Mapper相关代码，不需要配置别名。在config/mybatis下创建SqlMapConfig.xml1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;&lt;/configuration&gt;applicationContext-dao.xml配置数据源、配置SqlSessionFactory、mapper扫描器。123456789101112131415161718192021222324252627282930313233343536373839&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"&gt; &lt;!-- 加载配置文件 --&gt; &lt;context:property-placeholder location=\"classpath:db.properties\" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\"&gt; &lt;property name=\"driverClassName\" value=\"$&#123;jdbc.driver&#125;\" /&gt; &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\" /&gt; &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\" /&gt; &lt;property name=\"maxActive\" value=\"10\" /&gt; &lt;property name=\"maxIdle\" value=\"5\" /&gt; &lt;/bean&gt; &lt;!-- 配置SqlSessionFactory --&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;!-- 数据库连接池 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;!-- 加载mybatis的全局配置文件 --&gt; &lt;property name=\"configLocation\" value=\"classpath:mybatis/SqlMapConfig.xml\" /&gt; &lt;/bean&gt; &lt;!-- 配置Mapper扫描 --&gt; &lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!-- 配置Mapper扫描包 --&gt; &lt;property name=\"basePackage\" value=\"cn.itcast.ssm.mapper\" /&gt; &lt;/bean&gt;&lt;/beans&gt;db.properties配置数据库相关信息1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/springmvc?characterEncoding=utf-8jdbc.username=rootjdbc.password=rootapplicationContext-service.xml1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"&gt; &lt;!-- 配置service扫描 --&gt; &lt;context:component-scan base-package=\"cn.itcast.ssm.service\" /&gt;&lt;/beans&gt;applicationContext-trans.xml1234567891011121314151617181920212223242526272829303132333435363738&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"&gt; &lt;!-- 事务管理器 --&gt; &lt;bean id=\"transactionManager\" class=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\"&gt; &lt;!-- 数据源 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;/bean&gt; &lt;!-- 通知 --&gt; &lt;tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"&gt; &lt;tx:attributes&gt; &lt;!-- 传播行为 --&gt; &lt;tx:method name=\"save*\" propagation=\"REQUIRED\" /&gt; &lt;tx:method name=\"insert*\" propagation=\"REQUIRED\" /&gt; &lt;tx:method name=\"delete*\" propagation=\"REQUIRED\" /&gt; &lt;tx:method name=\"update*\" propagation=\"REQUIRED\" /&gt; &lt;tx:method name=\"find*\" propagation=\"SUPPORTS\" read-only=\"true\" /&gt; &lt;tx:method name=\"get*\" propagation=\"SUPPORTS\" read-only=\"true\" /&gt; &lt;tx:method name=\"query*\" propagation=\"SUPPORTS\" read-only=\"true\" /&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;!-- 切面 --&gt; &lt;aop:config&gt; &lt;aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* cn.itcast.ssm.service.*.*(..))\" /&gt; &lt;/aop:config&gt;&lt;/beans&gt;springmvc.xml123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd\"&gt; &lt;!-- 配置controller扫描包 --&gt; &lt;context:component-scan base-package=\"cn.itcast.ssm.controller\" /&gt; &lt;!-- 注解驱动 --&gt; &lt;mvc:annotation-driven /&gt; &lt;!-- Example: prefix=\"/WEB-INF/jsp/\", suffix=\".jsp\", viewname=\"test\" -&gt; \"/WEB-INF/jsp/test.jsp\" --&gt; &lt;!-- 配置视图解析器 --&gt; &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; &lt;!-- 配置逻辑视图的前缀 --&gt; &lt;property name=\"prefix\" value=\"/WEB-INF/jsp/\" /&gt; &lt;!-- 配置逻辑视图的后缀 --&gt; &lt;property name=\"suffix\" value=\".jsp\" /&gt; &lt;/bean&gt;&lt;/beans&gt;web.xml12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;web-app xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://java.sun.com/xml/ns/javaee\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd\" id=\"WebApp_ID\" version=\"2.5\"&gt; &lt;display-name&gt;springmvc-web&lt;/display-name&gt; &lt;welcome-file-list&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;default.html&lt;/welcome-file&gt; &lt;welcome-file&gt;default.htm&lt;/welcome-file&gt; &lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; &lt;!-- 配置spring --&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/applicationContext*.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;!-- 使用监听器加载Spring配置文件 --&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;!-- 配置SrpingMVC的前端控制器 --&gt; &lt;servlet&gt; &lt;servlet-name&gt;springmvc-web&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:spring/springmvc.xml&lt;/param-value&gt; &lt;/init-param&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;springmvc-web&lt;/servlet-name&gt; &lt;!-- 配置所有以action结尾的请求进入SpringMVC --&gt; &lt;url-pattern&gt;*.action&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt;加入jsp页面增加itemList.jsp和itemEdit.jsp页面到工程中。结果就这样，基本整合完毕了，现在我们进行一个实战小项目实现商品列表显示需求实现商品查询列表，从mysql数据库查询商品信息。DAO开发使用逆向工程，生成代码，不在描述。ItemService接口12345678910public interface ItemService &#123; /** * 查询商品列表 * * @return */ List&lt;Item&gt; queryItemList();&#125;ItemServiceImpl实现类123456789101112131415@Servicepublic class ItemServiceImpl implements ItemService &#123; @Autowired private ItemMapper itemMapper; @Override public List&lt;Item&gt; queryItemList() &#123; // 从数据库查询商品数据 List&lt;Item&gt; list = this.itemMapper.selectByExample(null); return list; &#125;&#125;ItemController1234567891011121314151617181920212223242526@Controllerpublic class ItemController &#123; @Autowired private ItemService itemService; /** * 显示商品列表 * * @return */ @RequestMapping(\"/itemList\") public ModelAndView queryItemList() &#123; // 获取商品数据 List&lt;Item&gt; list = this.itemService.queryItemList(); ModelAndView modelAndView = new ModelAndView(); // 把商品数据放到模型中 modelAndView.addObject(\"itemList\", list); // 设置逻辑视图 modelAndView.setViewName(\"itemList\"); return modelAndView; &#125;&#125;测试结果如下图","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"SpringMvc","slug":"后端/Java/SpringMvc","permalink":"https://me.obey.fun/categories/后端/Java/SpringMvc/"}],"tags":[{"name":"SprimgMvc","slug":"SprimgMvc","permalink":"https://me.obey.fun/tags/SprimgMvc/"},{"name":"Spring","slug":"Spring","permalink":"https://me.obey.fun/tags/Spring/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"SpringMvc","slug":"后端/Java/SpringMvc","permalink":"https://me.obey.fun/categories/后端/Java/SpringMvc/"}]},{"title":"BootStrap入门","slug":"BootStrap入门","date":"2019-04-21T08:51:04.000Z","updated":"2019-04-21T11:49:21.416Z","comments":true,"path":"BootStrap入门.html","link":"","permalink":"https://me.obey.fun/BootStrap入门.html","excerpt":"","text":"什么是BootStrapBootstrap是美国Twitter公司的设计师Mark Otto和Jacob Thornton合作基于HTML、CSS、JavaScript 开发的简洁、直观、强悍的前端开发框架，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。国内一些移动开发者较为熟悉的框架，如WeX5前端开源框架等，也是基于Bootstrap源码进行性能优化而来。 [2]​BootStrap有什么作用能够提高开发人员的工作效率什么是响应式页面适应不同的分辨率显示不同样式,提高用户的体验BootStrap的中文网http://www.bootcss.com下载BootStrapBootStrap结构全局CSSbootStrap中已经定义好了一套CSS的样式表组件BootStrap定义的一套按钮,导航条等组件JS插件BootStrap定义了一套JS的插件,这些插件已经默认实现了很多种效果BootStrap的入门开发引入相关的头文件12345678910&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;&lt;link rel=\"stylesheet\" href=\"../css/bootstrap.css\" /&gt;&lt;!--需要引入JQuery--&gt;&lt;script type=\"text/javascript\" src=\"../js/jquery-1.11.0.js\" &gt;&lt;/script&gt;&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;&lt;script type=\"text/javascript\" src=\"../js/bootstrap.js\" &gt;&lt;/script&gt;&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;BootStrap的布局容器.container 类用于固定宽度并支持响应式布局的容器。123&lt;div class=&quot;container&quot;&gt; ...&lt;/div&gt;.container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。123&lt;div class=&quot;container-fluid&quot;&gt; ...&lt;/div&gt;校验表单扩展:1234567trigger : 触发浏览器默认行为triggerHandler : 不会触发is : 判断find : 查找老黄历:什么json: 轻量级的数据交换格式json对象: {“username”:”zhangsan”}json数组: [ {“username”:”zhangsan”}, {“username”:”zhangsan”}, {“username”:”zhangsan”}]ajax异步请求:​ 同步和异步Bootstrap 栅格系统的工作原理：“行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。通过“行（row）”在水平方向创建一组“列（column）”。你的内容应当放置于“列（column）”内，并且，只有“列（column）”可以作为行（row）”的直接子元素。类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding​BootStrap的栅格系统响应式设计: 这种设计依赖于CSS3中的媒体查询栅格样式:设备分辨率大于1200 使用lg样式设备分辨率大于992 &lt; 1200 使用md样式设备分辨率大于768 &lt; 992 使用sm样式设备分辨率小于768使用xs样式BootStrap的全局CSS定义了一套CSS对页面中的元素进行定义列表元素,表单,按钮,图片…使用BootStrap布局网站首页需求分析请使用BootStrap对我们的首页进行优化技术分析步骤分析新建一个HTML页面.引入bootStrap相关的js和CSS定义一个整体的div, 将整体的div分成8个部分完成没部分的内容显示代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;!-- 准备工作: &lt;meta name='viewport'&gt; 1.导入bootstrap css文件 2.导入JQuery 3.bootstrap.js 4.写一个div class = container 支持响应式的布局容器 --&gt; &lt;link rel=\"stylesheet\" href=\"../css/bootstrap.min.css\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt; &lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt; &lt;script src=\"../js/jquery-1.11.0.js\"&gt;&lt;/script&gt; &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt; &lt;script src=\"../js/bootstrap.min.js\"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"container\"&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-4\"&gt; &lt;img src=\"../img/logo2.png\" /&gt; &lt;/div&gt; &lt;div class=\"col-md-4 hidden-xs\"&gt; &lt;img src=\"../img/header.png\" /&gt; &lt;/div&gt; &lt;div class=\"col-md-4\"&gt; &lt;a href=\"#\"&gt;登录&lt;/a&gt; &lt;a href=\"#\"&gt;注册&lt;/a&gt; &lt;a href=\"#\"&gt;购物车&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--菜单--&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;nav class=\"navbar navbar-inverse\" role=\"navigation\"&gt; &lt;div class=\"container-fluid\"&gt; &lt;!-- Brand and toggle get grouped for better mobile display --&gt; &lt;div class=\"navbar-header\"&gt; &lt;button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#bs-example-navbar-collapse-1\"&gt; &lt;span class=\"sr-only\"&gt;Toggle navigation&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;span class=\"icon-bar\"&gt;&lt;/span&gt; &lt;/button&gt; &lt;a class=\"navbar-brand\" href=\"#\"&gt;首页&lt;/a&gt; &lt;/div&gt; &lt;!-- Collect the nav links, forms, and other content for toggling --&gt; &lt;div class=\"collapse navbar-collapse\" id=\"bs-example-navbar-collapse-1\"&gt; &lt;ul class=\"nav navbar-nav\"&gt; &lt;li class=\"active\"&gt; &lt;a href=\"#\"&gt;手机数码&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;鞋靴箱包&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;电脑办公&lt;/a&gt; &lt;/li&gt; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt;所有分类 &lt;span class=\"caret\"&gt;&lt;/span&gt;&lt;/a&gt; &lt;ul class=\"dropdown-menu\" role=\"menu\"&gt; &lt;li&gt; &lt;a href=\"#\"&gt;手机数码&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;鞋靴箱包&lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;电脑办公&lt;/a&gt; &lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;Separated link&lt;/a&gt; &lt;/li&gt; &lt;li class=\"divider\"&gt;&lt;/li&gt; &lt;li&gt; &lt;a href=\"#\"&gt;One more separated link&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;form class=\"navbar-form navbar-right\" role=\"search\"&gt; &lt;div class=\"form-group\"&gt; &lt;input type=\"text\" class=\"form-control\" placeholder=\"请输入要搜索的商品\"&gt; &lt;/div&gt; &lt;button type=\"submit\" class=\"btn btn-default\"&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;!-- /.navbar-collapse --&gt; &lt;/div&gt; &lt;!-- /.container-fluid --&gt; &lt;/nav&gt; &lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\"&gt; &lt;!-- Indicators --&gt; &lt;ol class=\"carousel-indicators\"&gt; &lt;li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt; &lt;li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"&gt;&lt;/li&gt; &lt;li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"&gt;&lt;/li&gt; &lt;/ol&gt; &lt;!-- Wrapper for slides --&gt; &lt;div class=\"carousel-inner\" role=\"listbox\"&gt; &lt;div class=\"item active\"&gt; &lt;img src=\"../img/1.jpg\" alt=\"...\"&gt; &lt;div class=\"carousel-caption\"&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img src=\"../img/2.jpg\" alt=\"...\"&gt; &lt;div class=\"carousel-caption\"&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img src=\"../img/3.jpg\" alt=\"...\"&gt; &lt;div class=\"carousel-caption\"&gt; ... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- Controls --&gt; &lt;a class=\"left carousel-control\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"prev\"&gt; &lt;span class=\"glyphicon glyphicon-chevron-left\"&gt;&lt;/span&gt; &lt;span class=\"sr-only\"&gt;Previous&lt;/span&gt; &lt;/a&gt; &lt;a class=\"right carousel-control\" href=\"#carousel-example-generic\" role=\"button\" data-slide=\"next\"&gt; &lt;span class=\"glyphicon glyphicon-chevron-right\"&gt;&lt;/span&gt; &lt;span class=\"sr-only\"&gt;Next&lt;/span&gt; &lt;/a&gt;&lt;/div&gt; &lt;/div&gt; &lt;!--最新商品这里--&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;h3&gt;最新商品&lt;img src=\"../images/title2.jpg\"/&gt;&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--商品部分 --&gt; &lt;div class=\"row\"&gt; &lt;!--左边div--&gt; &lt;div class=\"col-md-2 hidden-sm hidden-xs\"&gt; &lt;img src=\"../products/hao/big01.jpg\" width=\"100%\" height=\"100%\" /&gt; &lt;/div&gt; &lt;!--右边div--&gt; &lt;div class=\"col-md-10\"&gt; &lt;!--上面部分--&gt; &lt;div class=\"row\"&gt; &lt;!--中等广告图--&gt; &lt;div class=\"col-md-6\"&gt; &lt;img src=\"../products/hao/middle01.jpg\" width=\"100%\" /&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--下面部分--&gt; &lt;div class=\"row\"&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;img src=\"../products/hao/ad.jpg\" width=\"100%\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--最新商品这里--&gt; &lt;div class=\"row\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;h3&gt;最新商品&lt;img src=\"../images/title2.jpg\"/&gt;&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--商品部分 --&gt; &lt;div class=\"row\"&gt; &lt;!--左边div--&gt; &lt;div class=\"col-md-2 hidden-sm hidden-xs\"&gt; &lt;img src=\"../products/hao/big01.jpg\" width=\"100%\" height=\"100%\" /&gt; &lt;/div&gt; &lt;!--右边div--&gt; &lt;div class=\"col-md-10\"&gt; &lt;!--上面部分--&gt; &lt;div class=\"row\"&gt; &lt;!--中等广告图--&gt; &lt;div class=\"col-md-6\"&gt; &lt;img src=\"../products/hao/middle01.jpg\" width=\"100%\" /&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--下面部分--&gt; &lt;div class=\"row\"&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;!--商品项--&gt; &lt;div class=\"col-md-2 col-xs-4\" style=\"text-align: center;\"&gt; &lt;img src=\"../products/hao/small01.jpg\" /&gt; &lt;p&gt;豆浆机&lt;/p&gt; &lt;p&gt;$998&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;!--页脚广告--&gt; &lt;div&gt; &lt;img src=\"../image/footer.jpg\" width=\"100%\" /&gt; &lt;/div&gt; &lt;!--网站声明--&gt; &lt;div style=\"text-align: center;\"&gt; &lt;a href=\"http://www.itheima.com\"&gt;关于我们&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;联系我们&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;招贤纳士&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;法律声明&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;友情链接&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;支付方式&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;配送方式&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;服务声明&lt;/a&gt; &lt;a href=\"http://www.itheima.com\"&gt;广告声明&lt;/a&gt; &lt;br /&gt; Copyright © 2018-2019 HuiProgramer &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://me.obey.fun/categories/前端/CSS/"},{"name":"BootStarp","slug":"前端/CSS/BootStarp","permalink":"https://me.obey.fun/categories/前端/CSS/BootStarp/"}],"tags":[{"name":"BootStrap","slug":"BootStrap","permalink":"https://me.obey.fun/tags/BootStrap/"},{"name":"前端框架","slug":"前端框架","permalink":"https://me.obey.fun/tags/前端框架/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"CSS","slug":"前端/CSS","permalink":"https://me.obey.fun/categories/前端/CSS/"},{"name":"BootStarp","slug":"前端/CSS/BootStarp","permalink":"https://me.obey.fun/categories/前端/CSS/BootStarp/"}]},{"title":"Jquery入门","slug":"JQuery入门","date":"2019-04-21T08:50:04.000Z","updated":"2019-04-26T01:09:20.951Z","comments":true,"path":"JQuery入门.html","link":"","permalink":"https://me.obey.fun/JQuery入门.html","excerpt":"","text":"什么是JQuery:jQuery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。jQuery设计的宗旨是“write Less，Do More”，即倡导写更少的代码，做更多的事情。它封装JavaScript常用的功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互。jQuery的核心特性可以总结为：具有独特的链式语法和短小清晰的多功能接口；具有高效灵活的css选择器，并且可对CSS选择器进行扩展；拥有便捷的插件扩展机制和丰富的插件。jQuery兼容各种主流浏览器，如IE 6.0+、FF 1.5+、Safari 2.0+、Opera 9.0+等JQuery的作用:写更少的代码,做更多的事情: write Less,Do more将我们页面的JS代码和HTML页面代码进行分离为什么学习JQuery:​ 提高我们的工作效率JQ的入门1234567891011121314151617181920212223242526272829&lt;script&gt; //js文档加载完成的事件 window.onload = function()&#123; alert(\"window.onload 111\"); &#125; window.onload = function()&#123; alert(\"window.onload 222\"); &#125; /*文档加载完成的事件*/ jQuery(document).ready(function()&#123; alert(\"jQuery(document).ready(function()\"); &#125;); /* jQuery 简写成 $ */ $(document).ready(function()&#123; alert(\"$(document).ready(function()\"); &#125;); /* 最简单的写法 */ $(function()&#123; alert(\"$(function()&#123;\"); &#125;); &lt;/script&gt;【JQ中根据ID查找元素】1234全都是根据选择器去找的#ID&#123;&#125;.类名&#123;&#125;$(\"#ID的名称\")【JQ和JS之间的转换】JQ对象,只能调用JQ的属性和方法JS对象 只能调用JS的属性和方法12345678910111213141516171819function changeJS()&#123; var div = document.getElementById(\"div1\");// div.innerHTML = \"JS成功修改了内容\" //将JS对象转成JQ对象 $(div).html(\"转成JQ对象来修改内容\") &#125; $(function()&#123; //给按钮绑定事件 $(\"#btn2\").click(function()&#123; //找到div1// $(\"#div1\").html(\"JQ方式成功修改了内容\"); //将JQ对象转成JS对象来调用 var $div = $(\"#div1\");// var jsDiv = $div.get(0); var jsDiv = $div[0]; jsDiv.innerHTML=\"jq转成JS对象成功\"; &#125;); &#125;);JQ的开发步骤: (将我们页面的JS代码和HTML页面代码进行分离)导入JQ相关的文件文档加载完成事件: $(function) : 页面初始化的操作: 绑定事件, 启动页面定时器确定相关操作的事件事件触发函数函数里面再去操作相关的元素显示和隐藏 img.style.display【JQ中的动画效果】1234567show()hide()slideUpslideDownfadeInfadeOutanimate : 自定义动画使用JQuery完成页面定时弹出广告需求分析：当用户打开界面，3秒钟之后弹出广告，这个广告显示5秒钟，隐藏广告技术分析定时器: setTimeout显示和隐藏: style.display = “block/none”步骤分析：导入JQ的文件编写JQ的文档加载事件启动定时器 setTimeout(“”,3000);编写显示广告的函数在显示广告里面再启动一个定时器编写隐藏广告的函数代码实现1234567891011121314&lt;script&gt; //显示广告 function showAd()&#123; $(\"#img1\").slideDown(2000); setTimeout(\"hideAd()\",3000); &#125; //隐藏广告 function hideAd()&#123; $(\"#img1\").slideUp(2000); &#125; $(function()&#123; setTimeout(\"showAd()\",3000); &#125;); &lt;/script&gt;JQuery中的选择器让我们能够更加精确找到我们要操作的元素基本选择器ID选择器 : #ID的名称类选择器: 以 . 开头 .类名元素选择器: 标签的名称通配符选择器: *选择器,选择器: 选择器1,选择器2基本选择器的案例12345678910111213141516171819202122232425262728293031323334&lt;!-- - ID选择器 : #ID的名称 - 类选择器: 以 . 开头 .类名 - 元素选择器: 标签的名称 - 通配符选择器: * - 选择器,选择器: 选择器1,选择器2 --&gt; &lt;script&gt; //文档加载事件,页面初始化的操作 $(function()&#123; //初始化操作: 给按钮绑定事件 $(\"#btn1\").click(function()&#123; $(\"#two\").css(\"background-color\",\"palegreen\"); &#125;); //找出mini类的所有元素 $(\"#btn2\").click(function()&#123; $(\".mini\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn3\").click(function()&#123; $(\"div\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn4\").click(function()&#123; $(\"*\").css(\"background-color\",\"palegreen\"); &#125;); /*选择器分组*/ //找出mini类 和 span元素 $(\"#btn5\").click(function()&#123; $(\".mini,span\").css(\"background-color\",\"palegreen\"); &#125;); &#125;); &lt;/script&gt;JQ中的层级选择器子元素选择器: 选择器1 &gt; 选择器2后代选择器: 选择器1 儿孙相邻兄弟选择器 : 选择器1 + 选择器2 : 找出紧挨着的一个弟弟找出所有弟弟: 选择器1~ 选择器2 : 找出所有的弟弟123456789101112131415161718192021&lt;script&gt; //文档加载事件,页面初始化的操作 $(function()&#123; //初始化操作: 给按钮绑定事件 //找出body下面的子div $(\"#btn1\").click(function()&#123; $(\"body &gt; div\").css(\"background-color\",\"palegreen\"); &#125;); //找出body下面的所有div $(\"#btn2\").click(function()&#123; $(\"body div\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn3\").click(function()&#123; $(\"#one+div\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn4\").click(function()&#123; $(\"#two~div\").css(\"background-color\",\"palegreen\"); &#125;); &#125;); &lt;/script&gt;JQ中的基本过滤器12345678910111213141516171819202122232425&lt;script&gt; $(function()&#123; /&lt;script&gt; //文档加载事件,页面初始化的操作 $(function()&#123; //初始化操作: 给按钮绑定事件 //过滤出所有div中第一个元素 $(\"#btn1\").click(function()&#123; $(\"div:first\").css(\"background-color\",\"palegreen\"); &#125;); //过滤出所有div中偶数位的div $(\"#btn2\").click(function()&#123; $(\"div:even\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn3\").click(function()&#123; $(\"div:odd\").css(\"background-color\",\"palegreen\"); &#125;); $(\"#btn4\").click(function()&#123; $(\"div:gt(2)\").css(\"background-color\",\"palegreen\"); &#125;); &#125;);&lt;/script&gt;JQ中的属性选择器123456789101112$(function()&#123; //找到有name属性的input $(\"#btn1\").click(function()&#123; $(\"input[name]\").attr(\"checked\",true); &#125;); $(\"#btn2\").click(function()&#123; $(\"input[name='accept']\").attr(\"checked\",true); &#125;); $(\"#btn3\").click(function()&#123; $(\"input[name='newsletter'][value='Hot Fuzz']\").attr(\"checked\",true); &#125;); &#125;);JQ中的表单过滤器123456&lt;script&gt; //1.文档加载事件 $(function()&#123; $(\":text\").css(\"background-color\",\"pink\"); &#125;);&lt;/script&gt;使用JQ完成表格的隔行换色需求分析:在我们的实际开发过程中,我们的表格如果所有的行都是一样的话,很容易看花眼,所以我们需要让我们的表格隔行换色技术分析:获取所有行 table.rows遍历所有行根据行号去修改每一行的背景颜色: bgColor​ style.backgroundColor = “red”步骤分析:导入JQ的包文档加载完成函数: 页面初始化获得所有的行 : 元素选择器根据行号去修改颜色代码实现:123456789 $(function()&#123; //获得所有的行 : 元素选择器 $(\"tbody &gt; tr:even\").css(\"background-color\",\"#CCCCCC\"); //修改基数行 $(\"tbody &gt; tr:odd\").css(\"background-color\",\"#FFF38F\");// $(\"tbody &gt; tr\").css(\"background-color\",\"#FFF38F\"); &#125;);使用JQuery完成表单的全选全不选功能需求分析​ 在我们对表格处理的时,有些情况下,我们需要对表格进行批量处理,技术分析:代码实现:使用JQ完成省市联动效果需求分析:​ 在我们的注册表单中,通常我们需要知道用户的籍贯,需要一个给用选择的项,当用户选中了省份之后,列出省下面所有的城市技术分析:准备工作 : 城市信息的数据添加节点 : appendChild (JS)append : 添加子元素到末尾appendTo : 给自己找一个爹,将自己添加到别人家里prepend : 在子元素前面添加after : 在自己的后面添加一个兄弟遍历的操作:​步骤分析:导入JQ的文件文档加载事件:页面初始化进一步确定事件: change事件函数: 得到当前选中省份得到城市, 遍历城市数据将遍历出来的城市添加到城市的select中代码实现:123456789101112131415161718$(function()&#123; $(\"#province\").change(function()&#123;// alert(this.value); //得到城市信息 var cities = provinces[this.value]; //清空城市select中的option /*var $city = $(\"#city\"); //将JQ对象转成JS对象 var citySelect = $city.get(0) citySelect.options.length = 0;*/ $(\"#city\").empty(); //采用JQ的方式清空 //遍历城市数据 $(cities).each(function(i,n)&#123; $(\"#city\").append(\"&lt;option&gt;\"+n+\"&lt;/option&gt;\"); &#125;); &#125;); &#125;);使用JQ完成下拉列表左右选择需求分析我们的商品通常包含已经有了的, 还有没有的,现在我们需要有一个页面用于动态编辑这些商品技术分析步骤分析导入JQ的文件文档加载函数 :页面初始化确定事件 : 点击事件 onclick事件触发函数移动被选中的那一项到右边代码实现12345678910111213141516&lt;script type=\"text/javascript\" src=\"../js/jquery-1.11.0.js\" &gt;&lt;/script&gt;&lt;script&gt; $(function()&#123; $(\"#a1\").click(function()&#123; //找到被选中的那一项 //将被选中项添加到右边 $(\"#rightSelect\").append($(\"#leftSelect option:selected\")); &#125;); //将左边所有商品移动到右边 $(\"#a2\").click(function()&#123; $(\"#rightSelect\").append($(\"#leftSelect option\")); &#125;); &#125;);&lt;/script&gt;总结:定时器动画效果: show hide slideDown slideUp fadeIn fadeOut animate基本选择器:ID选择器: #ID名称类选择器: .类名元素选择器: 元素/标签名称通配符选择器: * 找出所有页面元素 包含页面上所有的标签选择器分组 : 选择器1, 选择器2 [选择器1,选择器2]层级选择器:后代选择器: 选择器1 选择器2 找出所有的后代,儿子孙子曾孙子元素选择器: 选择器1 &gt;选择器2 找出所有儿子相邻兄弟选择器: 选择器1+选择器2 : 找出紧挨着自己那个弟弟兄弟选择器 : 选择器1~选择器2 : 找出所有的弟弟​​​属性选择器:选择器[属性名称]​12选择器[属性名称][属性名名]选择器[属性名称='属性值'][属性名称='属性值'][属性名称='属性值']表单选择器:123456​ :input 找出所有的输入项 : 不单单找出input textarea select ​ :text 找出type类型为 text​ :password基本过滤器:12345678910111213​ :even​ :odd​ :gt​ :lt​ :eq​ :first​ :last表单对象属性:123​ :selected​ :checked12345678910111213141516171819202122$(function) : 文档加载完成的事件css() : 修改css样式prop() : 修改属性/ 获取属性html() : 修改innerHTMLappend : 给自己添加子节点appendTo : 将自己添加到别人家,给自己找一个爹prepend : 在自己最前面添加子节点after : 在自己后面添加一个兄弟empty : 清空所有子节点$(cities).each(function(i,n)&#123; &#125;)$.each(arr,function(i,n)&#123; &#125;);了解, 熟悉, 熟练, 精通 经过一个项目,将所有学过串起来使用JQ完成表单的校验(扩展)需求分析在用户提交表单的时候, 我们最好是能够在用户数据提交给服务器之前去做一次校验,防止服务器压力过大,并且需要给用户一个友好提示技术分析triggertriggerHandleris()步骤分析首先给必填项,添加尾部添加一个小红点获取用户输入的信息,做相应的校验事件: 获得焦点, 失去焦点, 按键抬起表单提交的事件代码实现使用JQuery发送请求局部刷新页面​ 数据交换格式:​ json​ xml​什么是JSONJSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。它基于ECMAScript的一个子集。 JSON采用完全独立于语言的文本格式，但是也使用了类似于C语言家族的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成(一般用于提升网络传输速率)。JSON格式​ JSON对象12&#123; key1:value&#125; &#123;\"username\":\"zhangsan\",\"password\":\"123\"&#125;​ JSON数组1[&#123; key1:value&#125;,&#123; key1:value&#125;,&#123; key1:value&#125;]","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"JavaScript","slug":"前端/JavaScript","permalink":"https://me.obey.fun/categories/前端/JavaScript/"},{"name":"JQuery","slug":"前端/JavaScript/JQuery","permalink":"https://me.obey.fun/categories/前端/JavaScript/JQuery/"}],"tags":[{"name":"前端框架","slug":"前端框架","permalink":"https://me.obey.fun/tags/前端框架/"},{"name":"JQuery","slug":"JQuery","permalink":"https://me.obey.fun/tags/JQuery/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"JavaScript","slug":"前端/JavaScript","permalink":"https://me.obey.fun/categories/前端/JavaScript/"},{"name":"JQuery","slug":"前端/JavaScript/JQuery","permalink":"https://me.obey.fun/categories/前端/JavaScript/JQuery/"}]},{"title":"Mybatis教程（简单入门）","slug":"Mybatis-入门","date":"2019-03-26T07:53:07.000Z","updated":"2019-11-06T02:41:38.378Z","comments":true,"path":"Mybatis-入门.html","link":"","permalink":"https://me.obey.fun/Mybatis-入门.html","excerpt":"","text":"Mybatis入门Mybatis的介绍MyBatis 本是 apache 的一个开源项目 iBatis, 2010年这个项目由apache software foundation 迁移到了 google code，并且改名为MyBatis 。2013年11月迁移到 Github。MyBatis是一个优秀的持久层框架，它对 jdbc 的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等 jdbc 繁杂的过程代码。Mybatis 通过 xml 或注解的方式将要执行的各种 statement（statement、preparedStatemnt、CallableStatement）配置起来，并通过java对象和 statement 中的sql进行映射生成最终执行的 sql 语句，最后由 mybatis 框架执行 sql 并将结果映射成 java 对象并返回。使用jdbc编程问题总结创建mysql数据库创建数据库将sql脚本文件导入到数据库中创建工程开发环境IDE: Intellij IDEAJDK: 1.9创建一个Java工程按下图进行创建导入需要的数据库驱动在 file -&gt; project Setting -&gt; Moudules -&gt; Dependencies里，添加jar文件。jdbc编程步骤加载数据库驱动创建并获取数据库链接创建jdbc statement对象设置sql语句设置sql语句中的参数(使用preparedStatement)通过statement执行sql并获取结果对sql执行结果进行解析处理释放资源(resultSet、preparedstatement、connection)jdbc程序1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253public static void main(String[] args) &#123; Connection connection = null; PreparedStatement preparedStatement = null; ResultSet resultSet = null; try &#123; // 加载数据库驱动 Class.forName(\"com.mysql.jdbc.Driver\"); // 通过驱动管理类获取数据库链接 connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8\", \"root\", \"root\"); // 定义sql语句 ?表示占位符 String sql = \"select * from user where username = ?\"; // 获取预处理statement preparedStatement = connection.prepareStatement(sql);// 设置参数，第一个参数为sql语句中参数的序号（从1开始），第二个参数为设置的参数值 preparedStatement.setString(1, \"王五\"); // 向数据库发出sql执行查询，查询出结果集 resultSet = preparedStatement.executeQuery(); // 遍历查询结果集 while (resultSet.next()) &#123; System.out.println(resultSet.getString(\"id\") + \" \" + resultSet.getString(\"username\")); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; // 释放资源 if (resultSet != null) &#123; try &#123; resultSet.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (preparedStatement != null) &#123; try &#123; preparedStatement.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; if (connection != null) &#123; try &#123; connection.close(); &#125; catch (SQLException e) &#123; // TODO Auto-generated catch block e.printStackTrace(); &#125; &#125; &#125;&#125;上边使用jdbc的原始方法（未经封装）实现了查询数据库表记录的操作。jdbc问题总结如下数据库连接创建、释放频繁造成系统资源浪费，从而影响系统性能。如果使用数据库连接池可解决此问题。Sql语句在代码中硬编码，造成代码不易维护，实际应用中sql变化的可能较大，sql变动需要改变java代码。使用preparedStatement向占有位符号传参数存在硬编码，因为sql语句的where条件不一定，可能多也可能少，修改sql还要修改代码，系统不易维护。对结果集解析存在硬编码（查询列名），sql变化导致解析代码变化，系统不易维护，如果能将数据库记录封装成pojo对象解析比较方便。Mybatis架构mybatis配置SqlMapConfig.xml，此文件作为mybatis的全局配置文件，配置了mybatis的运行环境等信息。mapper.xml文件即sql映射文件，文件中配置了操作数据库的sql语句。此文件需要在SqlMapConfig.xml中加载。通过mybatis环境等配置信息构造SqlSessionFactory即会话工厂由会话工厂创建sqlSession即会话，操作数据库需要通过sqlSession进行。mybatis底层自定义了Executor执行器接口操作数据库，Executor接口有两个实现，一个是基本执行器、一个是缓存执行器。Mapped Statement也是mybatis一个底层封装对象，它包装了mybatis配置信息及sql映射信息等。mapper.xml文件中一个sql对应一个Mapped Statement对象，sql的id即是Mapped statement的id。Mapped Statement对sql执行输入参数进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql前将输入的java对象映射至sql中，输入参数映射就是jdbc编程中对preparedStatement设置参数。Mapped Statement对sql执行输出结果进行定义，包括HashMap、基本类型、pojo，Executor通过Mapped Statement在执行sql后将输出结果映射至java对象中，输出结果映射过程相当于jdbc编程中对结果的解析处理过程。Mybatis入门程序mybatis下载mybaits的代码由github.com管理下载地址：https://github.com/mybatis/mybatis-3/releasesmybatis-3.2.7.jar &emsp;——-》&emsp;mybatis的核心包lib文件夹 &emsp;&nbsp;&emsp;&emsp;&emsp;&nbsp;——-》&emsp;mybatis的依赖包所在mybatis-3.2.7.pdf&emsp; ——-》&emsp;mybatis使用手册业务需求使用MyBatis实现以下功能：根据用户id查询一个用户根据用户名称模糊查询用户列表添加用户更新用户删除用户环境搭建创建Java工程这个前面讲过，直接省略。。。加入jar包加入mybatis核心包、依赖包、数据驱动包。mybatis核心包mybatis依赖包数据库驱动包效果：加入配置文件在src文件夹下，加入log4j.properties和SqlMapConfig.xml配置文件log4j.properties在 src 下创建log4j.properties如下：123456# Global logging configurationlog4j.rootLogger=DEBUG, stdout# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n注意：mybatis默认使用log4j作为输出日志信息。SqlMapConfig.XML在 src 下创建SqlMapConfig.xml，如下：123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!-- 和spring整合后 environments配置将废除 --&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;!-- 使用jdbc事务管理 --&gt; &lt;transactionManager type=\"JDBC\" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"com.mysql.jdbc.Driver\" /&gt; &lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8\" /&gt; &lt;property name=\"username\" value=\"root\" /&gt; &lt;property name=\"password\" value=\"root\" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt;&lt;/configuration&gt;注意：SqlMapConfig.xml是mybatis核心配置文件，配置文件内容为数据源、事务管理。效果：创建pojopojo类作为mybatis进行sql映射使用，po类通常与数据库表对应，数据库如下所示：123456789DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(32) NOT NULL COMMENT '用户名称', `birthday` date DEFAULT NULL COMMENT '生日', `sex` char(1) DEFAULT NULL COMMENT '性别', `address` varchar(256) DEFAULT NULL COMMENT '地址', PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;User.java如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950package com.share.mybatis.pojo;import java.io.Serializable;import java.util.Date;public class User implements Serializable &#123; private static final long serialVersionUID = 1L; private Integer id; private String username;// 用户姓名 private String sex;// 性别 private Date birthday;// 生日 private String address;// 地址 public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return \"User [id=\" + id + \", username=\" + username + \", sex=\" + sex + \", birthday=\" + birthday + \", address=\" + address + \"]\"; &#125;&#125;sql映射文件User.xml:1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql --&gt;&lt;mapper namespace=\"test\"&gt;&lt;/mapper&gt;加载映射文件mybatis框架需要加载Mapper.xml映射文件将users.xml添加在SqlMapConfig.xml，如下：1234&lt;!-- Mapper位置 --&gt; &lt;mappers&gt; &lt;mapper resource=\"sqlmap/User.xml\"&gt;&lt;/mapper&gt; &lt;/mappers&gt;根据id查询用户使用的sql:SELECT * FROM &#39;user&#39; WHERE id = 1映射文件在user.xml中添加select标签，编写sql：1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql --&gt;&lt;mapper namespace=\"test\"&gt; &lt;!-- id:statement的id 或者叫做sql的id--&gt; &lt;!-- parameterType:声明输入参数的类型 --&gt; &lt;!-- resultType:声明输出结果的类型，应该填写pojo的全路径 --&gt; &lt;!-- #&#123;&#125;：输入参数的占位符，相当于jdbc的？ --&gt; &lt;select id=\"queryUserById\" parameterType=\"int\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; SELECT * FROM `user` WHERE id = #&#123;id&#125; &lt;/select&gt;&lt;/mapper&gt;测试程序：测试程序步骤：创建SqlSessionFactoryBuilder对象加载SqlMapConfig.xml配置文件创建SqlSessionFactory对象创建SqlSession对象执行SqlSession对象执行查询，获取结果User打印结果释放资源MybatisTest编写测试程序如下：12345678910111213141516171819202122232425262728293031public class MybatisTest &#123; private SqlSessionFactory sqlSessionFactory = null; @Before public void init() throws Exception &#123; // 1. 创建SqlSessionFactoryBuilder对象 SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); // 2. 加载SqlMapConfig.xml配置文件 InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\"); // 3. 创建SqlSessionFactory对象 this.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream); &#125; @Test public void testQueryUserById() throws Exception &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行查询，获取结果User // 第一个参数是User.xml的statement的id，第二个参数是执行sql需要的参数； Object user = sqlSession.selectOne(\"queryUserById\", 1); // 6. 打印结果 System.out.println(user); // 7. 释放资源 sqlSession.close(); &#125;&#125;效果DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - Opening JDBC ConnectionDEBUG [main] - Created connection 1077072774.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4032d386]DEBUG [main] - ==&gt; Preparing: select * from user where id = ?DEBUG [main] - ==&gt; Parameters: 1(Integer)DEBUG [main] - &lt;== Total: 1User [id=1, username=王五, sex=2, birthday=null, address=null]实现根据用户名模糊查询用户查询sql：SELECT * FROM &#39;user&#39; WHERE username LIKE &#39;%王%&#39;方法一映射文件在User.xml配置文件中添加如下内容：123456 &lt;!-- 如果返回多个结果，mybatis会自动把返回的结果放在list容器中 --&gt;&lt;!-- resultType的配置和返回一个结果的配置一样 --&gt;&lt;select id=\"queryUserByUsername1\" parameterType=\"string\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; SELECT * FROM `user` WHERE username LIKE #&#123;username&#125;&lt;/select&gt;测试程序MybatisTest中添加测试方法如下：1234567891011121314151617 @Testpublic void testQueryUserByUsername1() throws Exception &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行查询，获取结果User // 查询多条数据使用selectList方法 List&lt;Object&gt; list = sqlSession.selectList(\"queryUserByUsername1\", \"%王%\"); // 6. 打印结果 for (Object user : list) &#123; System.out.println(user); &#125; // 7. 释放资源 sqlSession.close();&#125;结果DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - Opening JDBC ConnectionDEBUG [main] - Created connection 554868511.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@21129f1f]DEBUG [main] - ==&gt; Preparing: select * from user where username like &#39;%%五%&#39;DEBUG [main] - ==&gt; Parameters:DEBUG [main] - &lt;== Total: 2User [id=1, username=王五, sex=2, birthday=null, address=null]User [id=26, username=王五, sex=null, birthday=null, address=null]方法二映射文件：在User.xml配置文件中添加如下内容：12345&lt;!-- 如果传入的参数是简单数据类型，$&#123;&#125;里面必须写value --&gt;&lt;select id=\"queryUserByUsername2\" parameterType=\"string\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; SELECT * FROM `user` WHERE username LIKE '%$&#123;value&#125;%'&lt;/select&gt;测试程序：MybatisTest中添加测试方法如下：1234567891011121314151617@Testpublic void testQueryUserByUsername2() throws Exception &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行查询，获取结果User // 查询多条数据使用selectList方法 List&lt;Object&gt; list = sqlSession.selectList(\"queryUserByUsername2\", \"王\"); // 6. 打印结果 for (Object user : list) &#123; System.out.println(user); &#125; // 7. 释放资源 sqlSession.close();&#125;效果DEBUG [main] - PooledDataSource forcefully closed/removed all connections.DEBUG [main] - Opening JDBC ConnectionDEBUG [main] - Created connection 554868511.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@21129f1f]DEBUG [main] - ==&gt; Preparing: select * from user where username like &#39;%%五%&#39;DEBUG [main] - ==&gt; Parameters:DEBUG [main] - &lt;== Total: 2User [id=1, username=王五, sex=2, birthday=null, address=null]User [id=26, username=王五, sex=null, birthday=null, address=null]小结#{}和${}#{}表示一个占位符号，通过#{}可以实现preparedStatement向占位符中设置值，自动进行java类型和jdbc类型转换。#{}可以有效防止sql注入。 #{}可以接收简单类型值或pojo属性值。 如果parameterType传输单个简单类型值，#{}括号中可以是value或其它名称。${}表示拼接sql串，通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换， ${}可以接收简单类型值或pojo属性值，如果parameterType传输单个简单类型值，${}括号中只能是value。parameterType和resultTypeparameterType：指定输入参数类型，mybatis通过ognl从输入对象中获取参数值拼接在sql中。resultType：指定输出结果类型，mybatis将sql查询结果的一行记录数据映射为resultType指定类型的对象。如果有多条数据，则分别进行映射，并把对象放到容器List中selectOne和selectListselectOne查询一条记录，如果使用selectOne查询多条记录则抛出异常：12org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 3 at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:70)selectList可以查询一条或多条记录。实现添加用户使用的sql：INSERT INTO &#39;user&#39; (username,birthday,sex,address) VALUES (&#39;黄忠&#39;,&#39;2016-07-26&#39;,&#39;1&#39;,&#39;三国&#39;)映射文件：在User.xml配置文件中添加如下内容：123456&lt;!-- 保存用户 --&gt;&lt;insert id=\"saveUser\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; INSERT INTO `user` (username,birthday,sex,address) VALUES (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&lt;/insert&gt;测试程序MybatisTest中添加测试方法如下：12345678910111213141516171819202122@Testpublic void testSaveUser() &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行保存 // 创建需要保存的User User user = new User(); user.setUsername(\"张飞\"); user.setSex(\"1\"); user.setBirthday(new Date()); user.setAddress(\"蜀国\"); sqlSession.insert(\"saveUser\", user); System.out.println(user); // 需要进行事务提交 sqlSession.commit(); // 7. 释放资源 sqlSession.close();&#125;效果123456789DEBUG [main] - Created connection 1550228904.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@5c669da8]DEBUG [main] - ==&gt; Preparing: insert into user(username,birthday,address,sex) values(?,?,?,?) DEBUG [main] - ==&gt; Parameters: 张飞(String), 2019-03-26 19:20:25.336(Timestamp), 蜀国(String), 1(String)DEBUG [main] - &lt;== Updates: 1DEBUG [main] - ==&gt; Preparing: select LAST_INSERT_ID() DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 1User [id=0, username=张飞, sex=1, birthday=Tue Mar 26 19:20:25 CST 2019, address=蜀国]如上所示，保存成功，但是id=0，需要解决id返回不正常的问题。mysql自增主键返回查询id的sqlSELECT LAST_INSERT_ID()通过修改User.xml映射文件，可以将mysql自增主键返回：如下添加selectKey 标签123456789101112131415&lt;!-- 保存用户 --&gt;&lt;insert id=\"saveUser\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; &lt;!-- selectKey 标签实现主键返回 --&gt; &lt;!-- keyColumn:主键对应的表中的哪一列 --&gt; &lt;!-- keyProperty：主键对应的pojo中的哪一个属性 --&gt; &lt;!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql --&gt; &lt;!-- resultType：设置返回的id的类型 --&gt; &lt;selectKey keyColumn=\"id\" keyProperty=\"id\" order=\"AFTER\" resultType=\"int\"&gt; SELECT LAST_INSERT_ID() &lt;/selectKey&gt; INSERT INTO `user` (username,birthday,sex,address) VALUES (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&lt;/insert&gt;LAST_INSERT_ID() : 是mysql的函数，返回auto_increment自增列新记录id值。效果:123456789DEBUG [main] - Created connection 1550228904.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@5c669da8]DEBUG [main] - ==&gt; Preparing: insert into user(username,birthday,address,sex) values(?,?,?,?) DEBUG [main] - ==&gt; Parameters: 张飞(String), 2019-03-26 19:20:25.336(Timestamp), 蜀国(String), 1(String)DEBUG [main] - &lt;== Updates: 1DEBUG [main] - ==&gt; Preparing: select LAST_INSERT_ID() DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 1User [id=29, username=张飞, sex=1, birthday=Tue Mar 26 19:20:25 CST 2019, address=蜀国]Mysql使用 uuid实现主键需要增加通过select uuid()得到uuid值123456789101112131415&lt;!-- 保存用户 --&gt;&lt;insert id=\"saveUser\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; &lt;!-- selectKey 标签实现主键返回 --&gt; &lt;!-- keyColumn:主键对应的表中的哪一列 --&gt; &lt;!-- keyProperty：主键对应的pojo中的哪一个属性 --&gt; &lt;!-- order：设置在执行insert语句前执行查询id的sql，孩纸在执行insert语句之后执行查询id的sql --&gt; &lt;!-- resultType：设置返回的id的类型 --&gt; &lt;selectKey keyColumn=\"id\" keyProperty=\"id\" order=\"BEFORE\" resultType=\"string\"&gt; SELECT LAST_INSERT_ID() &lt;/selectKey&gt; INSERT INTO `user` (username,birthday,sex,address) VALUES (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;)&lt;/insert&gt;注意: 这里使用的order是“BEFORE”修改用户根据用户id修改用户名使用的sql：UPDATE &#39;user&#39; SET username = &#39;赵云&#39; WHERE id = 26映射文件在User.xml配置文件中添加如下内容：12345&lt;!-- 更新用户 --&gt;&lt;update id=\"updateUserById\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; UPDATE `user` SET username = #&#123;username&#125; WHERE id = #&#123;id&#125;&lt;/update&gt;测试程序MybatisTest中添加测试方法如下：12345678910111213141516171819202122@Testpublic void testUpdateUserById() &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行更新 // 创建需要更新的User User user = new User(); user.setId(26); user.setUsername(\"关羽\"); user.setSex(\"1\"); user.setBirthday(new Date()); user.setAddress(\"蜀国\"); sqlSession.update(\"updateUserById\", user); // 需要进行事务提交 sqlSession.commit(); // 7. 释放资源 sqlSession.close();&#125;效果123456DEBUG [main] - Opening JDBC ConnectionDEBUG [main] - Created connection 684822005.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@28d18df5]DEBUG [main] - ==&gt; Preparing: update user set username = ?,sex = ?,address = ?,birthday=? where id = ? DEBUG [main] - ==&gt; Parameters: 关羽(String), 1(String), 蜀国(String), 2019-03-26 19:50:34.234(Timestamp), 26(Integer)DEBUG [main] - &lt;== Updates: 1删除用户根据用户id删除用户使用的sqlDELETE FROM &#39;user&#39; WHERE id = 47映射文件：在User.xml配置文件中添加如下内容：12345&lt;!-- 删除用户 --&gt;&lt;delete id=\"deleteUserById\" parameterType=\"int\"&gt; delete from user where id=#&#123;id&#125;&lt;/delete&gt;测试程序：MybatisTest中添加测试方法如下：1234567891011121314@Testpublic void testDeleteUserById() &#123; // 4. 创建SqlSession对象 SqlSession sqlSession = sqlSessionFactory.openSession(); // 5. 执行SqlSession对象执行删除 sqlSession.delete(\"deleteUserById\", 48); // 需要进行事务提交 sqlSession.commit(); // 7. 释放资源 sqlSession.close();&#125;效果123456DEBUG [main] - Opening JDBC ConnectionDEBUG [main] - Created connection 684822005.DEBUG [main] - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@28d18df5]DEBUG [main] - ==&gt; Preparing: delete from user where id = ? DEBUG [main] - ==&gt; Parameters: 26(Integer)DEBUG [main] - &lt;== Updates: 1Mybatis解决jdbc编程的问题数据库连接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库连接池可解决此问题。解决：在SqlMapConfig.xml中配置数据连接池，使用连接池管理数据库链接。Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。mybatis与hibernate不同Mybatis和hibernate不同，它不完全是一个ORM框架，因为MyBatis需要程序员自己编写Sql语句。mybatis可以通过XML或注解方式灵活配置要运行的sql语句，并将java对象和sql语句映射生成最终执行的sql，最后将sql执行的结果再映射生成java对象。Mybatis学习门槛低，简单易学，程序员直接编写原生态sql，可严格控制sql执行性能，灵活度高，非常适合对关系数据模型要求不高的软件开发，例如互联网软件、企业运营类软件等，因为这类软件需求变化频繁，一但需求变化要求成果输出迅速。但是灵活的前提是mybatis无法做到数据库无关性，如果需要实现支持多种数据库的软件则需要自定义多套sql映射文件，工作量大。Hibernate对象/关系映射能力强，数据库无关性好，对于关系模型要求高的软件（例如需求固定的定制化软件）如果用hibernate开发可以节省很多代码，提高效率。但是Hibernate的学习门槛高，要精通门槛更高，而且怎么设计O/R映射，在性能和对象模型之间如何权衡，以及怎样用好Hibernate需要具有很强的经验和能力才行。总之，按照用户的需求在有限的资源环境下只要能做出维护性、扩展性良好的软件架构都是好架构，所以框架只有适合才是最好。Dao开发方法使用MyBatis开发Dao，通常有两个方法，即原始Dao开发方法和Mapper动态代理开发方法。需求使用MyBatis开发DAO实现以下的功能：根据用户id查询一个用户信息根据用户名称模糊查询用户信息列表添加用户信息SqlSession的使用范围SqlSession中封装了对数据库的操作，如：查询、插入、更新、删除等。SqlSession通过SqlSessionFactory创建。SqlSessionFactory是通过SqlSessionFactoryBuilder进行创建。SqlSessionFactoryBuilderSqlSessionFactoryBuilder用于创建SqlSessionFacoty，SqlSessionFacoty一旦创建完成就不需要SqlSessionFactoryBuilder了，因为SqlSession是通过SqlSessionFactory创建的。所以可以将SqlSessionFactoryBuilder当成一个工具类使用，最佳使用范围是方法范围即方法体内局部变量。SqlSessionFactorySqlSessionFactory是一个接口，接口中定义了openSession的不同重载方法，SqlSessionFactory的最佳使用范围是整个应用运行期间，一旦创建后可以重复使用，通常以单例模式管理SqlSessionFactory。SqlSessionSqlSession是一个面向用户的接口，sqlSession中定义了数据库操作方法。每个线程都应该有它自己的SqlSession实例。SqlSession的实例不能共享使用，它也是线程不安全的。因此最佳的范围是请求或方法范围。绝对不能将SqlSession实例的引用放在一个类的静态字段或实例字段中。打开一个 SqlSession；使用完毕就要关闭它。通常把这个关闭操作放到 finally 块中以确保每次都能执行关闭。如下：123456SqlSession session = sqlSessionFactory.openSession();try &#123; // do work&#125; finally &#123; session.close();&#125;原始Dao开发方式原始Dao开发方法需要程序员编写Dao接口和Dao实现类。映射文件编写映射文件如下：（也可以使用入门程序完成的映射文件）1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 --&gt;&lt;mapper namespace=\"test\"&gt; &lt;!-- 根据id查询用户 --&gt; &lt;select id=\"queryUserById\" parameterType=\"int\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; select * from user where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 根据username模糊查询用户 --&gt; &lt;select id=\"queryUserByUsername\" parameterType=\"string\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; select * from user where username like '%$&#123;value&#125;%' &lt;/select&gt; &lt;!-- 保存用户 --&gt; &lt;insert id=\"saveUser\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; &lt;selectKey keyProperty=\"id\" keyColumn=\"id\" order=\"AFTER\" resultType=\"int\"&gt; SELECT LAST_INSERT_ID() &lt;/selectKey&gt; insert into user(username,birthday,sex,address) values(#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;) &lt;/insert&gt;&lt;/mapper&gt;Dao接口先进行DAO的接口开发，编码如下：123456789101112131415161718192021222324public interface UserDao &#123; /** * 根据id查询用户 * * @param id * @return */ User queryUserById(int id); /** * 根据用户名模糊查询用户 * * @param username * @return */ List&lt;User&gt; queryUserByUsername(String username); /** * 保存用户 * * @param user */ void saveUser(User user);&#125;Dao实现类编写的Dao实现类如下:123456789101112131415161718192021222324252627282930313233343536373839404142434445public class UserDaoImpl implements UserDao &#123; private SqlSessionFactory sqlSessionFactory; public UserDaoImpl(SqlSessionFactory sqlSessionFactory) &#123; super(); this.sqlSessionFactory = sqlSessionFactory; &#125; @Override public User queryUserById(int id) &#123; // 创建SqlSession SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 执行查询逻辑 User user = sqlSession.selectOne(\"queryUserById\", id); // 释放资源 sqlSession.close(); return user; &#125; @Override public List&lt;User&gt; queryUserByUsername(String username) &#123; // 创建SqlSession SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 执行查询逻辑 List&lt;User&gt; list = sqlSession.selectList(\"queryUserByUsername\", username); // 释放资源 sqlSession.close(); return list; &#125; @Override public void saveUser(User user) &#123; // 创建SqlSession SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 执行保存逻辑 sqlSession.insert(\"saveUser\", user); // 提交事务 sqlSession.commit(); // 释放资源 sqlSession.close(); &#125;&#125;Dao测试创建一个JUnit的测试类，对UserDao进行测试，测试代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950public class UserDaoTest &#123; private SqlSessionFactory sqlSessionFactory; @Before public void init() throws Exception &#123; // 创建SqlSessionFactoryBuilder SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); // 加载SqlMapConfig.xml配置文件 InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\"); // 创建SqlsessionFactory this.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream); &#125; @Test public void testQueryUserById() &#123; // 创建DAO UserDao userDao = new UserDaoImpl(this.sqlSessionFactory); // 执行查询 User user = userDao.queryUserById(1); System.out.println(user); &#125; @Test public void testQueryUserByUsername() &#123; // 创建DAO UserDao userDao = new UserDaoImpl(this.sqlSessionFactory); // 执行查询 List&lt;User&gt; list = userDao.queryUserByUsername(\"张\"); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void testSaveUser() &#123; // 创建DAO UserDao userDao = new UserDaoImpl(this.sqlSessionFactory); // 创建保存对象 User user = new User(); user.setUsername(\"刘备\"); user.setBirthday(new Date()); user.setSex(\"1\"); user.setAddress(\"蜀国\"); // 执行保存 userDao.saveUser(user); System.out.println(user); &#125;&#125;问题原始Dao开发中存在以下问题：Dao方法体存在重复代码：通过SqlSessionFactory创建SqlSession，调用SqlSession的数据库操作方法调用sqlSession的数据库操作方法需要指定statement的id，这里存在硬编码，不得于开发维护。Mapper动态代理方式开发规范Mapper接口开发方法只需要程序员编写Mapper接口（相当于Dao接口），由Mybatis框架根据接口定义创建接口的动态代理对象，代理对象的方法体同上边Dao接口实现类方法。Mapper接口开发需要遵循以下规范：Mapper.xml文件中的namespace与mapper接口的类路径相同。Mapper接口方法名和Mapper.xml中定义的每个statement的id相同Mapper接口方法的输入参数类型和mapper.xml中定义的每个sql 的parameterType的类型相同Mapper接口方法的输出参数类型和mapper.xml中定义的每个sql的resultType的类型相同Mapper.xml(映射文件)定义mapper映射文件UserMapper.xml将UserMapper.xml放在src下sqlmap目录下UserMapper.xml配置文件内容：123456789101112131415161718192021222324252627282930313233&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql --&gt;&lt;!-- 还有一个很重要的作用，使用动态代理开发DAO，1. namespace必须和Mapper接口类路径一致 --&gt;&lt;mapper namespace=\"fun.obey.mybatis.mapper.UserMapper\"&gt; &lt;!-- 根据用户id查询用户 --&gt; &lt;!-- 2. id必须和Mapper接口方法名一致 --&gt; &lt;!-- 3. parameterType必须和接口方法参数类型一致 --&gt; &lt;!-- 4. resultType必须和接口方法返回值类型一致 --&gt; &lt;select id=\"queryUserById\" parameterType=\"int\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; select * from user where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 根据用户名查询用户 --&gt; &lt;select id=\"queryUserByUsername\" parameterType=\"string\" resultType=\"fun.obey.mybatis.pojo.User\"&gt; select * from user where username like '%$&#123;value&#125;%' &lt;/select&gt; &lt;!-- 保存用户 --&gt; &lt;insert id=\"saveUser\" parameterType=\"fun.obey.mybatis.pojo.User\"&gt; &lt;selectKey keyProperty=\"id\" keyColumn=\"id\" order=\"AFTER\" resultType=\"int\"&gt; select last_insert_id() &lt;/selectKey&gt; insert into user(username,birthday,sex,address) values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;); &lt;/insert&gt;&lt;/mapper&gt;UserMapper(接口文件)创建UserMapper接口代码如下：123456789101112131415161718192021222324public interface UserMapper &#123; /** * 根据id查询 * * @param id * @return */ User queryUserById(int id); /** * 根据用户名查询用户 * * @param username * @return */ List&lt;User&gt; queryUserByUsername(String username); /** * 保存用户 * * @param user */ void saveUser(User user);&#125;加载UserMapper.xml文件修改SqlMapConfig.xml文件，添加以下所示的内容：12345&lt;!-- 加载映射文件 --&gt;&lt;mappers&gt; &lt;mapper resource=\"sqlmap/User.xml\" /&gt; &lt;mapper resource=\"mapper/UserMapper.xml\" /&gt;&lt;/mappers&gt;测试编写的测试方法如下：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667public class UserMapperTest &#123; private SqlSessionFactory sqlSessionFactory; @Before public void init() throws Exception &#123; // 创建SqlSessionFactoryBuilder SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder(); // 加载SqlMapConfig.xml配置文件 InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\"); // 创建SqlsessionFactory this.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream); &#125; @Test public void testQueryUserById() &#123; // 获取sqlSession，和spring整合后由spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 从sqlSession中获取Mapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 执行查询方法 User user = userMapper.queryUserById(1); System.out.println(user); // 和spring整合后由spring管理 sqlSession.close(); &#125; @Test public void testQueryUserByUsername() &#123; // 获取sqlSession，和spring整合后由spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 从sqlSession中获取Mapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 执行查询方法 List&lt;User&gt; list = userMapper.queryUserByUsername(\"张\"); for (User user : list) &#123; System.out.println(user); &#125; // 和spring整合后由spring管理 sqlSession.close(); &#125; @Test public void testSaveUser() &#123; // 获取sqlSession，和spring整合后由spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 从sqlSession中获取Mapper接口的代理对象 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 创建保存对象 User user = new User(); user.setUsername(\"刘备\"); user.setBirthday(new Date()); user.setSex(\"1\"); user.setAddress(\"蜀国\"); // 执行查询方法 userMapper.saveUser(user); System.out.println(user); // 和spring整合后由spring管理 sqlSession.commit(); sqlSession.close(); &#125;&#125;小结selectOne和selectList动态代理对象调用sqlSession.selectOne()和sqlSession.selectList()是根据mapper接口方法的返回值决定，如果返回list则调用selectList方法，如果返回单个对象则调用selectOne方法。namespacemybatis官方推荐使用mapper代理方法开发mapper接口，程序员不用编写mapper接口实现类，使用mapper代理方法时，输入参数可以使用pojo包装对象或map对象，保证dao的通用性。SqlMapConfig.xml配置文件配置内容SqlMapConfig.xml中配置的内容和顺序如下：properties（属性）settings（全局配置参数）typeAliases（类型别名）typeHandlers（类型处理器）objectFactory（对象工厂）plugins（插件）environments（环境集合属性对象）environment（环境子属性对象）transactionManager（事务管理）dataSource（数据源）mappers（映射器）properties（属性）SqlMapConfig.xml可以引用java属性文件中的配置信息如下：在config下定义jdbc.properties文件，如下所示：jdbc.properties配置文件内容如下:1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8jdbc.username=rootjdbc.password=rootSqlMapConfig.xml引用如下：12345678910111213141516171819202122232425262728293031323334&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!-- 是用resource属性加载外部配置文件 --&gt; &lt;properties resource=\"db.properties\"&gt; &lt;!-- 在properties内部用property定义属性 --&gt; &lt;!-- 如果外部配置文件有该属性，则内部定义属性被外部属性覆盖 --&gt; &lt;property name=\"jdbc.username\" value=\"root123\" /&gt; &lt;property name=\"jdbc.password\" value=\"root123\" /&gt; &lt;/properties&gt; &lt;!-- 和spring整合后 environments配置将废除 --&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;!-- 使用jdbc事务管理 --&gt; &lt;transactionManager type=\"JDBC\" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"$&#123;jdbc.driver&#125;\" /&gt; &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\" /&gt; &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 加载映射文件 --&gt; &lt;mappers&gt; &lt;mapper resource=\"sqlmap/User.xml\" /&gt; &lt;mapper resource=\"mapper/UserMapper.xml\" /&gt; &lt;/mappers&gt;&lt;/configuration&gt;注意： MyBatis 将按照下面的顺序来加载属性：在 properties 元素体内定义的属性首先被读取。然后会读取properties 元素中resource或 url 加载的属性，它会覆盖已读取的同名属性。typeAliases（类型别名）mybatis支持别名：别名映射的类型_bytebyte_longlong_shortshort_intint_integerint_doubledouble_floatfloat_booleanbooleanstringStringbyteBytelongLongshortShortintIntegerintegerIntegerdoubleDoublefloatFloatbooleanBooleandateDatedecimalBigDecimalbigdecimalBigDecimalmapMap自定义别名：在SqlMapConfig.xml中配置如下：1234567891011121314151617181920212223242526272829303132333435363738394041&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!-- 是用resource属性加载外部配置文件 --&gt; &lt;properties resource=\"db.properties\"&gt; &lt;!-- 在properties内部用property定义属性 --&gt; &lt;property name=\"jdbc.username\" value=\"root123\" /&gt; &lt;property name=\"jdbc.password\" value=\"root123\" /&gt; &lt;/properties&gt; &lt;typeAliases&gt; &lt;!-- 单个别名定义 --&gt; &lt;typeAlias alias=\"user\" type=\"fun.obey.pojo.User\" /&gt; &lt;!-- 批量别名定义，扫描整个包下的类，别名为类名（大小写不敏感） --&gt; &lt;package name=\"fun.obey.mybatis.pojo\" /&gt; &lt;package name=\"其它包\" /&gt; &lt;/typeAliases&gt; &lt;!-- 和spring整合后 environments配置将废除 --&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;!-- 使用jdbc事务管理 --&gt; &lt;transactionManager type=\"JDBC\" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"$&#123;jdbc.driver&#125;\" /&gt; &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\" /&gt; &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\" /&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!-- 加载映射文件 --&gt; &lt;mappers&gt; &lt;mapper resource=\"sqlmap/User.xml\" /&gt; &lt;mapper resource=\"mapper/UserMapper.xml\" /&gt; &lt;/mappers&gt;&lt;/configuration&gt;在mapper.xml配置文件中，就可以使用设置的别名了提示：别名大小写不敏感mappers（映射器）Mapper配置的几种方法：&lt;mapper resource=” “ /&gt;使用相对于类路径的资源（现在的使用方式）如：&lt;mapper resource=&quot;sqlmap/User.xml&quot; /&gt;&lt;mapper class=” “ /&gt;使用mapper接口类路径如：&lt;mapper class=&quot;fun.obey.mybatis.mapper.UserMapper&quot;/&gt;注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。&lt;package name=””/&gt;注册指定包下的所有mapper接口如：&lt;package name=&quot;fun.obey.mybatis.mapper&quot;/&gt;注意：此种方法要求mapper接口名称和mapper映射文件名称相同，且放在同一个目录中。Mybatis进阶parameterType(输入类型)传递简单类型参考入门的内容。使用#{}占位符，或者${}进行sql拼接。传递pojo对象参考入门的内容。Mybatis使用ognl表达式解析对象字段的值，#{}或者${}括号中的值为pojo属性名称。传递pojo包装对象开发中通过可以使用pojo传递查询条件。查询条件可能是综合的查询条件，不仅包括用户查询条件还包括其它的查询条件（比如查询用户信息的时候，将用户购买商品信息也作为查询条件），这时可以使用包装对象传递输入参数。包装对象：Pojo类中的一个属性是另外一个pojo。需求：根据用户名模糊查询用户信息，查询条件放到QueryVo的user属性中。编写QueryVo1234567891011public class QueryVo &#123; // 包含其他的pojo private User user; public User getUser() &#123; return user; &#125; public void setUser(User user) &#123; this.user = user; &#125;&#125;Sql语句SELECT * FROM user WHERE username LIKE &#39;%张%&#39;Mapper.xml文件123&lt;select id=\"queryUserByQueryVo\" parameterType=\"queryVo\" resultType=\"user\"&gt; select * from user where username like '%$&#123;user.username&#125;%' &lt;/select&gt;Mapper接口List&lt;User&gt; queryUserByQueryVo(Query queryVo);测试方法在UserMapeprTest增加测试方法，如下：123456789101112131415161718192021222324@Testpublic void testQueryUserByQueryVo() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行查询，使用包装对象 QueryVo queryVo = new QueryVo(); // 设置user条件 User user = new User(); user.setUsername(\"张\"); // 设置到包装对象中 queryVo.setUser(user); // 执行查询 List&lt;User&gt; list = userMapper.queryUserByQueryVo(queryVo); for (User u : list) &#123; System.out.println(u); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果123456DEBUG [main] - ==&gt; Preparing: select * from user where username like &apos;%%张%&apos; DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州]User [id=24, username=张三丰, sex=1, birthday=null, address=河南郑州]resultType(输出类型)输出简单类型需求:查询用户表数据条数sql：SELECT count(*) FROM userMapper.xml文件123&lt;select id = \"queryUserCount\" resultType = \"int\"&gt; select count(*) from 'user'&lt;/select&gt;Mapper接口int queryUserCount();测试方法在UserMapeprTest增加测试方法，如下：1234567891011121314@Testpublic void testQueryUserCount() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行查询用户数据条数 int count = userMapper.queryUserCount(); System.out.println(count); // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果1234DEBUG [main] - ==&gt; Preparing: select count(*) from &apos;user&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 114注意：输出简单类型必须查询出来的结果集有一条记录，最终将第一个字段的值转换为输出类型。resultMapresultType可以指定将查询结果映射为pojo，但需要pojo的属性名和sql查询的列名一致方可映射成功。如果sql查询字段名和pojo的属性名不一致，可以通过resultMap将字段名和属性名作一个对应关系 ，resultMap实质上还需要将查询结果映射到pojo对象中。resultMap可以实现将查询结果映射为复杂类型的pojo，比如在查询结果映射对象中包括pojo和list实现一对一查询和一对多查询。需求：查询订单表order的所有数据sql：SELECT id, user_id, number, createtime, note FROM order声明pojo对象数据库如下：1234567891011DROP TABLE IF EXISTS `orders`;CREATE TABLE `orders` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL COMMENT '下单用户id', `number` varchar(32) NOT NULL COMMENT '订单号', `createtime` datetime NOT NULL COMMENT '创建订单时间', `note` varchar(100) DEFAULT NULL COMMENT '备注', PRIMARY KEY (`id`), KEY `FK_orders_1` (`user_id`), CONSTRAINT `FK_orders_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE NO ACTION ON UPDATE NO ACTION) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;Order对象：12345678910111213public class Order &#123; // 订单id private int id; // 用户id private Integer userId; // 订单号 private String number; // 订单创建时间 private Date createtime; // 备注 private String note;get/set。。。&#125;Mapper.xml文件创建OrderMapper.xml配置文件，如下：12345678910111213&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，Mapper动态代理开发的时候使用，需要指定Mapper的类路径 --&gt;&lt;mapper namespace=\"fun.obey.mybatis.mapper.OrderMapper\"&gt; &lt;!-- 查询所有的订单数据 --&gt; &lt;select id=\"queryOrderAll\" resultType=\"order\"&gt; SELECT id, user_id, number, createtime, note FROM `order` &lt;/select&gt;&lt;/mapper&gt;Mapper接口编写接口如下：12345678public interface OrderMapper &#123; /** * 查询所有订单 * * @return */ List&lt;Order&gt; queryOrderAll();&#125;测试方法编写测试方法OrderMapperTest如下：1234567891011121314151617181920212223public class OrderMapperTest &#123; private SqlSessionFactory sqlSessionFactory; @Before public void init() throws Exception &#123; InputStream inputStream = Resources.getResourceAsStream(\"SqlMapConfig.xml\"); this.sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); &#125; @Test public void testQueryAll() &#123; // 获取sqlSession SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 获取OrderMapper OrderMapper orderMapper = sqlSession.getMapper(OrderMapper.class); // 执行查询 List&lt;Order&gt; list = orderMapper.queryOrderAll(); for (Order order : list) &#123; System.out.println(order); &#125; &#125;&#125;效果123456DEBUG [main] - ==&gt; Preparing: select id,user_id,number,createtime,not from &apos;order&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3Order[id = 3,userId=null,number=1000010,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]Order[id = 4,userId=null,number=1000011,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]Order[id = 5,userId=null,number=1000012,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]发现userId为null解决方案：使用resultMap使用resultMap由于上边的mapper.xml中sql查询列(user_id)和Order类属性(userId)不一致，所以查询结果不能映射到pojo中。需要定义resultMap，把orderResultMap将sql查询列(user_id)和Order类属性(userId)对应起来改造OrderMapper.xml，如下：123456789101112131415161718192021222324252627282930&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，Mapper动态代理开发的时候使用，需要指定Mapper的类路径 --&gt;&lt;mapper namespace=\"fun.obey.mybatis.mapper.OrderMapper\"&gt; &lt;!-- resultMap最终还是要将结果映射到pojo上，type就是指定映射到哪一个pojo --&gt; &lt;!-- id：设置ResultMap的id --&gt; &lt;resultMap type=\"order\" id=\"orderResultMap\"&gt; &lt;!-- 定义主键 ,非常重要。如果是多个字段,则定义多个id --&gt; &lt;!-- property：主键在pojo中的属性名 --&gt; &lt;!-- column：主键在数据库中的列名 --&gt; &lt;id property=\"id\" column=\"id\" /&gt; &lt;!-- 定义普通属性 --&gt; &lt;result property=\"userId\" column=\"user_id\" /&gt; &lt;result property=\"number\" column=\"number\" /&gt; &lt;result property=\"createtime\" column=\"createtime\" /&gt; &lt;result property=\"note\" column=\"note\" /&gt; &lt;/resultMap&gt; &lt;!-- 查询所有的订单数据 --&gt; &lt;select id=\"queryOrderAll\" resultMap=\"orderResultMap\"&gt; SELECT id, user_id, number, createtime, note FROM `order` &lt;/select&gt;&lt;/mapper&gt;效果只需要修改Mapper.xml就可以了，再次测试结果如下：123456DEBUG [main] - ==&gt; Preparing: select id,user_id,number,createtime,not from &apos;order&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3Order[id = 3,userId=1,number=1000010,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]Order[id = 4,userId=1,number=1000011,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]Order[id = 5,userId=10,number=1000012,createtime=Wed Feb 04 13:22:35 CST 2015,note = null]动态sql通过mybatis提供的各种标签方法实现动态拼接sql。需求：根据性别和名字查询用户查询sql：SELECT id, username, birthday, sex, address FROM user WHERE sex = 1 AND username LIKE ‘%张%’If标签Mapper.xml文件UserMapper.xml配置sql，如下：123456&lt;!-- 根据条件查询用户 --&gt;&lt;select id=\"queryUserByWhere\" parameterType=\"user\" resultType=\"user\"&gt; SELECT id, username, birthday, sex, address FROM `user` WHERE sex = #&#123;sex&#125; AND username LIKE '%$&#123;username&#125;%'&lt;/select&gt;Mapper接口List&lt;User&gt; queryUserByWhere(User user);测试方法在UserMapperTest添加测试方法，如下：123456789101112131415161718192021@Testpublic void testQueryUserByWhere() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行根据条件查询用户 User user = new User(); user.setSex(\"1\"); user.setUsername(\"张\"); List&lt;User&gt; list = userMapper.queryUserByWhere(user); for (User u : list) &#123; System.out.println(u); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果123456DEBUG [main] - ==&gt; Preparing: SELECT id, username, birthday, sex, address FROM user WHERE sex = 1 AND username LIKE &apos;张&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州]User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州]如果注释掉user.setSex(“1”)，测试结果如下图：123DEBUG [main] - ==&gt; Preparing: SELECT id, username, birthday, sex, address FROM user WHERE sex = 1 AND username LIKE nullDEBUG [main] - ==&gt; Parameters: nullDEBUG [main] - &lt;== Total: 0测试结果二很显然不合理。按照之前所学的，要解决这个问题，需要编写多个sql，查询条件越多，需要编写的sql就更多了，显然这样是不靠谱的。解决方案，使用动态sql的if标签使用if标签改造UserMapper.xml，如下：123456789101112&lt;!-- 根据条件查询用户 --&gt;&lt;select id=\"queryUserByWhere\" parameterType=\"user\" resultType=\"user\"&gt; SELECT id, username, birthday, sex, address FROM `user` WHERE 1=1 &lt;if test=\"sex != null and sex != ''\"&gt; AND sex = #&#123;sex&#125; &lt;/if&gt; &lt;if test=\"username != null and username != ''\"&gt; AND username LIKE '%$&#123;username&#125;%' &lt;/if&gt;&lt;/select&gt;注意字符串类型的数据需要要做不等于空字符串校验。效果123456DEBUG [main] - ==&gt; Preparing: SELECT id, username, birthday, sex, address FROM user WHERE sex = 1 AND username LIKE &apos;张&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州]User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州]如上图所示，测试OKWhere标签上面的sql还有where 1=1 这样的语句，很麻烦可以使用where标签进行改造改造UserMapper.xml，如下1234567891011121314&lt;!-- 根据条件查询用户 --&gt;&lt;select id=\"queryUserByWhere\" parameterType=\"user\" resultType=\"user\"&gt; SELECT id, username, birthday, sex, address FROM `user`&lt;!-- where标签可以自动添加where，同时处理sql语句中第一个and关键字 --&gt; &lt;where&gt; &lt;if test=\"sex != null\"&gt; AND sex = #&#123;sex&#125; &lt;/if&gt; &lt;if test=\"username != null and username != ''\"&gt; AND username LIKE '%$&#123;username&#125;%' &lt;/if&gt; &lt;/where&gt;&lt;/select&gt;效果123456DEBUG [main] - ==&gt; Preparing: SELECT id, username, birthday, sex, address FROM user WHERE sex = 1 AND username LIKE &apos;张&apos;DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 3User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]User [id=16, username=张小明, sex=1, birthday=null, address=河南郑州]User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州]Sql片段Sql中可将重复的sql提取出来，使用时用include引用即可，最终达到sql重用的目的。把上面例子中的id, username, birthday, sex, address提取出来，作为sql片段，如下：123456789101112131415161718192021&lt;!-- 根据条件查询用户 --&gt;&lt;select id=\"queryUserByWhere\" parameterType=\"user\" resultType=\"user\"&gt; &lt;!-- SELECT id, username, birthday, sex, address FROM `user` --&gt; &lt;!-- 使用include标签加载sql片段；refid是sql片段id --&gt; SELECT &lt;include refid=\"userFields\" /&gt; FROM `user` &lt;!-- where标签可以自动添加where关键字，同时处理sql语句中第一个and关键字 --&gt; &lt;where&gt; &lt;if test=\"sex != null\"&gt; AND sex = #&#123;sex&#125; &lt;/if&gt; &lt;if test=\"username != null and username != ''\"&gt; AND username LIKE '%$&#123;username&#125;%' &lt;/if&gt; &lt;/where&gt;&lt;/select&gt;&lt;!-- 声明sql片段 --&gt;&lt;sql id=\"userFields\"&gt; id, username, birthday, sex, address&lt;/sql&gt;注意：如果要使用别的Mapper.xml配置的sql片段，可以在refid前面加上对应的Mapper.xml的namespaceforeach标签向sql传递数组或List，mybatis使用foreach解析，如下：根据多个id查询用户信息查询sql：SELECT * FROM user WHERE id IN (1,10,24)改造QueryVo在pojo中定义list属性ids存储多个用户id，并添加getter/setter方法Mapper.xml文件UserMapper.xml添加sql，如下：12345678910111213141516&lt;!-- 根据ids查询用户 --&gt;&lt;select id=\"queryUserByIds\" parameterType=\"queryVo\" resultType=\"user\"&gt; SELECT * FROM `user` &lt;where&gt; &lt;!-- foreach标签，进行遍历 --&gt; &lt;!-- collection：遍历的集合，这里是QueryVo的ids属性 --&gt; &lt;!-- item：遍历的项目，可以随便写，，但是和后面的#&#123;&#125;里面要一致 --&gt; &lt;!-- open：在前面添加的sql片段 --&gt; &lt;!-- close：在结尾处添加的sql片段 --&gt; &lt;!-- separator：指定遍历的元素之间使用的分隔符 --&gt; &lt;foreach collection=\"ids\" item=\"item\" open=\"id IN (\" close=\")\" separator=\",\"&gt; #&#123;item&#125; &lt;/foreach&gt; &lt;/where&gt;&lt;/select&gt;测试方法如下图：123456789101112131415161718192021222324@Testpublic void testQueryUserByIds() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行根据条件查询用户 QueryVo queryVo = new QueryVo(); List&lt;Integer&gt; ids = new ArrayList&lt;&gt;(); ids.add(1); ids.add(10); ids.add(24); queryVo.setIds(ids); List&lt;User&gt; list = userMapper.queryUserByIds(queryVo); for (User u : list) &#123; System.out.println(u); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果123456DEBUG [main] - ==&gt; Preparing: SELECT * FROM user WHERE id in(?,?,?)DEBUG [main] - ==&gt; Parameters: 1(Integer),10(Integer),22(Integer)DEBUG [main] - &lt;== Total: 3User [id=1, username=李四, sex=2, birthday=null, address=null]User [id=10, username=张三, sex=1, birthday=Thu Jul 10 00:00:00 CST 2014, address=北京市]User [id=22, username=陈小明, sex=1, birthday=null, address=河南郑州]关联查询商品订单数据模型一对一查询需求：查询所有订单信息，关联查询下单用户信息。注意：因为一个订单信息只会是一个人下的订单，所以从查询订单信息出发关联查询用户信息为一对一查询。如果从用户信息出发查询用户下的订单信息则为一对多查询，因为一个用户可以下多个订单。sql语句：1234567891011SELECT o.id, o.user_id userId, o.number, o.createtime, o.note, u.username, u.addressFROM `order` oLEFT JOIN `user` u ON o.user_id = u.id方法一：使用resultType使用resultType，改造订单pojo类，此pojo类中包括了订单信息和用户信息这样返回对象的时候，mybatis自动把用户信息也注入进来了改造pojo类OrderUser类继承Order类后OrderUser类包括了Order类的所有字段，只需要定义用户的信息字段即可，如下：1234public class OrderUser extends Order&#123; private String username; private String address;&#125;Mapper.xml在UserMapper.xml添加sql，如下123456789101112131415&lt;!-- 查询订单，同时包含用户数据 --&gt;&lt;select id=\"queryOrderUser\" resultType=\"orderUser\"&gt; SELECT o.id, o.user_id userId, o.number, o.createtime, o.note, u.username, u.address FROM `order` o LEFT JOIN `user` u ON o.user_id = u.id&lt;/select&gt;Mapper接口在UserMapper接口添加方法，如下:1List&lt;OrderUser&gt; queryOrderUser();测试方法：在UserMapperTest添加测试方法，如下：1234567891011121314151617@Testpublic void testQueryOrderUser() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行根据条件查询用户 List&lt;OrderUser&gt; list = userMapper.queryOrderUser(); for (OrderUser ou : list) &#123; System.out.println(ou); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果测试结果如下图：小结定义专门的pojo类作为输出类型，其中定义了sql查询结果集所有的字段。此方法较为简单，企业中使用普遍。方法二：使用resultMap使用resultMap，定义专门的resultMap用于映射一对一查询结果。改造pojo类在Order类中加入User属性，user属性中用于存储关联查询的用户信息，因为订单关联查询用户是一对一关系，所以这里使用单个User对象存储关联查询的用户信息。改造Order如下:1234567891011121314public class Order&#123; private Integer id; private Integer userId; private String number; private Date createtime; private String note; //附加对象 用户对象 private User user;&#125;Mapper.xml这里resultMap指定orderUserResultMap，如下：123456789101112131415161718192021222324252627282930313233&lt;resultMap type=\"order\" id=\"orderUserResultMap\"&gt; &lt;id property=\"id\" column=\"id\" /&gt; &lt;result property=\"userId\" column=\"user_id\" /&gt; &lt;result property=\"number\" column=\"number\" /&gt; &lt;result property=\"createtime\" column=\"createtime\" /&gt; &lt;result property=\"note\" column=\"note\" /&gt; &lt;!-- association ：配置一对一属性 --&gt; &lt;!-- property:order里面的User属性名 --&gt; &lt;!-- javaType:属性类型 --&gt; &lt;association property=\"user\" javaType=\"user\"&gt; &lt;!-- id:声明主键，表示user_id是关联查询对象的唯一标识--&gt; &lt;id property=\"id\" column=\"user_id\" /&gt; &lt;result property=\"username\" column=\"username\" /&gt; &lt;result property=\"address\" column=\"address\" /&gt; &lt;/association&gt;&lt;/resultMap&gt;&lt;!-- 一对一关联，查询订单，订单内部包含用户属性 --&gt;&lt;select id=\"queryOrderUserResultMap\" resultMap=\"orderUserResultMap\"&gt; SELECT o.id, o.user_id, o.number, o.createtime, o.note, u.username, u.address FROM `order` o LEFT JOIN `user` u ON o.user_id = u.id&lt;/select&gt;Mapper接口1List&lt;Order&gt; queryOrderUserResultMap();测试方法在UserMapperTest增加测试方法，如下：1234567891011121314151617@Testpublic void testQueryOrderUserResultMap() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行根据条件查询用户 List&lt;Order&gt; list = userMapper.queryOrderUserResultMap(); for (Order o : list) &#123; System.out.println(o); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果测试效果如下图：一对多查询案例：查询所有用户信息及用户关联的订单信息。用户信息和订单信息为一对多关系。sql语句：12345678910111213SELECT u.id, u.username, u.birthday, u.sex, u.address, o.id oid, o.number, o.createtime, o.noteFROM `user` uLEFT JOIN `order` o ON u.id = o.user_id修改pojo类在User类中加入Listorders属性,如下：123456private Integer id;private String username;// 用户姓名private String sex;// 性别private Date birthday;// 生日private String address;// 地址private List&lt;Orders&gt; orders; //附加属性Mapper.xml在UserMapper.xml添加sql，如下：123456789101112131415161718192021222324252627282930313233&lt;resultMap type=\"user\" id=\"userOrderResultMap\"&gt; &lt;id property=\"id\" column=\"id\" /&gt; &lt;result property=\"username\" column=\"username\" /&gt; &lt;result property=\"birthday\" column=\"birthday\" /&gt; &lt;result property=\"sex\" column=\"sex\" /&gt; &lt;result property=\"address\" column=\"address\" /&gt; &lt;!-- 配置一对多的关系 --&gt; &lt;collection property=\"orders\" javaType=\"list\" ofType=\"order\"&gt; &lt;!-- 配置主键，是关联Order的唯一标识 --&gt; &lt;id property=\"id\" column=\"oid\" /&gt; &lt;result property=\"number\" column=\"number\" /&gt; &lt;result property=\"createtime\" column=\"createtime\" /&gt; &lt;result property=\"note\" column=\"note\" /&gt; &lt;/collection&gt;&lt;/resultMap&gt;&lt;!-- 一对多关联，查询订单同时查询该用户下的订单 --&gt;&lt;select id=\"queryUserOrder\" resultMap=\"userOrderResultMap\"&gt; SELECT u.id, u.username, u.birthday, u.sex, u.address, o.id oid, o.number, o.createtime, o.note FROM `user` u LEFT JOIN `order` o ON u.id = o.user_id&lt;/select&gt;Mapper接口编写UserMapper接口，如下：12//一对多关联查询，用户内部包含该用户的订单 List&lt;User&gt; queryUserOrder();测试方法在UserMapperTest增加测试方法，如下:1234567891011121314151617@Testpublic void testQueryUserOrder() &#123; // mybatis和spring整合，整合之后，交给spring管理 SqlSession sqlSession = this.sqlSessionFactory.openSession(); // 创建Mapper接口的动态代理对象，整合之后，交给spring管理 UserMapper userMapper = sqlSession.getMapper(UserMapper.class); // 使用userMapper执行根据条件查询用户 List&lt;User&gt; list = userMapper.queryUserOrder(); for (User u : list) &#123; System.out.println(u); &#125; // mybatis和spring整合，整合之后，交给spring管理 sqlSession.close();&#125;效果123456789101112DEBUG [main] - ==&gt; Preparing: SELECT u.id, u.username, u.birthday, u.sex, u.address, o.id oid, o.user_id, o.number, o.createtime, o.note FROM user u LEFT JOIN orders o ON u.id = o.user_id DEBUG [main] - ==&gt; Parameters: DEBUG [main] - &lt;== Total: 10User&#123;id=1, username=&apos;王五&apos;, sex=&apos;2&apos;, birthday=null, address=&apos;null&apos;, orders=[Orders&#123;id=3, userId=1, number=&apos;1000010&apos;, createtime=Wed Feb 04 13:22:35 CST 2015, note=&apos;null&apos;, user=null&#125;, Orders&#123;id=4, userId=1, number=&apos;1000011&apos;, createtime=Tue Feb 03 13:22:41 CST 2015, note=&apos;null&apos;, user=null&#125;]&#125;User&#123;id=10, username=&apos;张三&apos;, sex=&apos;1&apos;, birthday=Thu Jul 10 00:00:00 CST 2014, address=&apos;北京市&apos;, orders=[Orders&#123;id=5, userId=10, number=&apos;1000012&apos;, createtime=Thu Feb 12 16:13:23 CST 2015, note=&apos;null&apos;, user=null&#125;]&#125;User&#123;id=16, username=&apos;张小明&apos;, sex=&apos;1&apos;, birthday=null, address=&apos;河南郑州&apos;, orders=[]&#125;User&#123;id=22, username=&apos;陈小明&apos;, sex=&apos;1&apos;, birthday=null, address=&apos;河南郑州&apos;, orders=[]&#125;User&#123;id=24, username=&apos;张三丰&apos;, sex=&apos;1&apos;, birthday=null, address=&apos;河南郑州&apos;, orders=[]&#125;User&#123;id=25, username=&apos;陈小明&apos;, sex=&apos;1&apos;, birthday=null, address=&apos;河南郑州&apos;, orders=[]&#125;User&#123;id=26, username=&apos;王五&apos;, sex=&apos;null&apos;, birthday=null, address=&apos;null&apos;, orders=[]&#125;User&#123;id=27, username=&apos;HuiProgramer&apos;, sex=&apos;男&apos;, birthday=Sun Mar 24 00:00:00 CST 2019, address=&apos;湖南省衡阳市&apos;, orders=[]&#125;User&#123;id=28, username=&apos;彭于晏&apos;, sex=&apos;男&apos;, birthday=Sun Mar 24 00:00:00 CST 2019, address=&apos;湖南&apos;, orders=[]&#125;Mybatis整合spring整合思路SqlSessionFactory对象应该放到spring容器中作为单例存在。传统dao的开发方式中，应该从spring容器中获得sqlsession对象。Mapper代理形式中，应该从spring容器中直接获得mapper的代理对象。数据库的连接以及数据库连接池事务管理都交给spring容器来完成。整合需要的jar包spring的jar包Mybatis的jar包Spring+mybatis的整合包。Mysql的数据库驱动jar包。数据库连接池的jar包。整合的步骤创建工程导入jar包加入配置文件mybatisSpring的配置文件的配置文件sqlmapConfig.xmla)数据库连接及连接池b)事务管理（暂时可以不配置）c)sqlsessionFactory对象，配置到spring容器中d)mapeer代理对象或者是dao实现类配置到spring容器中。SqlMapConfig.xml配置文件是SqlMapConfig.xml，如下：123456789101112&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!-- 设置别名 --&gt; &lt;typeAliases&gt; &lt;!-- 2. 指定扫描包，会把包内所有的类都设置别名，别名的名称就是类名，大小写不敏感 --&gt; &lt;package name=\"fun.obey.mybatis.pojo\" /&gt; &lt;/typeAliases&gt;&lt;/configuration&gt;applicationContext.xmlSqlSessionFactoryBean属于mybatis-spring这个jar包对于spring来说，mybatis是另外一个架构，需要整合jar包。applicationContext.xml，配置内容如下:1234567891011121314151617181920212223242526272829303132&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:tx=\"http://www.springframework.org/schema/tx\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd\"&gt; &lt;!-- 加载配置文件 --&gt; &lt;context:property-placeholder location=\"classpath:db.properties\" /&gt; &lt;!-- 数据库连接池 --&gt; &lt;bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\"&gt; &lt;property name=\"driverClassName\" value=\"$&#123;jdbc.driver&#125;\" /&gt; &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\" /&gt; &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\" /&gt; &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\" /&gt; &lt;property name=\"maxActive\" value=\"10\" /&gt; &lt;property name=\"maxIdle\" value=\"5\" /&gt; &lt;/bean&gt; &lt;!-- 配置SqlSessionFactory --&gt; &lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;!-- 配置mybatis核心配置文件 --&gt; &lt;property name=\"configLocation\" value=\"classpath:SqlMapConfig.xml\" /&gt; &lt;!-- 配置数据源 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;/bean&gt;&lt;/beans&gt;db.properties1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8jdbc.username=rootjdbc.password=rootlog4j.properties123456# Global logging configurationlog4j.rootLogger=DEBUG, stdout# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%nDao的开发两种dao的实现方式：原始dao的开发方式使用Mapper代理形式开发方式a)直接配置Mapper代理b)使用扫描包配置Mapper代理需求：实现根据用户id查询实现根据用户名模糊查询添加用户创建pojo123456789public class User &#123; private int id; private String username;// 用户姓名 private String sex;// 性别 private Date birthday;// 生日 private String address;// 地址get/set。。。&#125;传统dao的开发方式原始的DAO开发接口+实现类来完成。需要dao实现类需要继承SqlsessionDaoSupport类实现Mapper.xml编写User.xml配置文件，如下：1234567891011121314151617181920212223242526272829&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"test\"&gt; &lt;!-- 根据用户id查询 --&gt; &lt;select id=\"queryUserById\" parameterType=\"int\" resultType=\"user\"&gt; select * from user where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 根据用户名模糊查询用户 --&gt; &lt;select id=\"queryUserByUsername\" parameterType=\"string\" resultType=\"user\"&gt; select * from user where username like '%$&#123;value&#125;%' &lt;/select&gt; &lt;!-- 添加用户 --&gt; &lt;insert id=\"saveUser\" parameterType=\"user\"&gt; &lt;selectKey keyProperty=\"id\" keyColumn=\"id\" order=\"AFTER\" resultType=\"int\"&gt; select last_insert_id() &lt;/selectKey&gt; insert into user (username,birthday,sex,address) values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;) &lt;/insert&gt;&lt;/mapper&gt;加载Mapper.xml在SqlMapConfig进行配置:1234&lt;mappers&gt; &lt;!-- 加载User.xml配置文件 --&gt; &lt;mapper resource=\"sqlmap/User.xml\" /&gt; &lt;/mappers&gt;实现UserDao接口12345678910111213141516171819202122232425public interface UserDao &#123; /** * 根据id查询用户 * * @param id * @return */ User queryUserById(int id); /** * 根据用户名模糊查询用户列表 * * @param username * @return */ List&lt;User&gt; queryUserByUsername(String username); /** * 保存 * * @param user */ void saveUser(User user);&#125;实现UserDaoImpl实现类编写DAO实现类，实现类必须集成SqlSessionDaoSupportSqlSessionDaoSupport提供getSqlSession()方法来获取SqlSession123456789101112131415161718192021222324252627282930313233343536373839public class UserDaoImpl extends SqlSessionDaoSupport implements UserDao &#123; @Override public User queryUserById(int id) &#123; // 获取SqlSession SqlSession sqlSession = super.getSqlSession(); // 使用SqlSession执行操作 User user = sqlSession.selectOne(\"queryUserById\", id); // 不要关闭sqlSession return user; &#125; @Override public List&lt;User&gt; queryUserByUsername(String username) &#123; // 获取SqlSession SqlSession sqlSession = super.getSqlSession(); // 使用SqlSession执行操作 List&lt;User&gt; list = sqlSession.selectList(\"queryUserByUsername\", username); // 不要关闭sqlSession return list; &#125; @Override public void saveUser(User user) &#123; // 获取SqlSession SqlSession sqlSession = super.getSqlSession(); // 使用SqlSession执行操作 sqlSession.insert(\"saveUser\", user); // 不用提交,事务由spring进行管理 // 不要关闭sqlSession &#125;&#125;配置dao把dao实现类配置到spring容器中，如下:123456789101112&lt;!-- 配置SqlSessionFactory --&gt; &lt;bean id=\"sqlSessionFactoryBean\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt; &lt;!-- 配置mybatis核心配置文件 --&gt; &lt;property name=\"configLocation\" value=\"config/sqlMapConfig.xml\" /&gt; &lt;!-- 配置数据源 --&gt; &lt;property name=\"dataSource\" ref=\"dataSource\" /&gt; &lt;/bean&gt; &lt;!-- Dao --&gt; &lt;bean id=\"UserDao\" class=\"fun.obey.mybatis.dao.UserDaoImpl\"&gt; &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactoryBean\" /&gt; &lt;/bean&gt;测试方法创建测试方法，可以直接创建测试Junit用例。编写测试方法如下：123456789101112131415161718192021222324252627282930313233343536373839404142public class UserDaoTest &#123; private ApplicationContext context; @Before public void setUp() throws Exception &#123; this.context = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\"); &#125; @Test public void testQueryUserById() &#123; // 获取userDao UserDao userDao = this.context.getBean(UserDao.class); User user = userDao.queryUserById(1); System.out.println(user); &#125; @Test public void testQueryUserByUsername() &#123; // 获取userDao UserDao userDao = this.context.getBean(UserDao.class); List&lt;User&gt; list = userDao.queryUserByUsername(\"张\"); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void testSaveUser() &#123; // 获取userDao UserDao userDao = this.context.getBean(UserDao.class); User user = new User(); user.setUsername(\"曹操\"); user.setSex(\"1\"); user.setBirthday(new Date()); user.setAddress(\"三国\"); userDao.saveUser(user); System.out.println(user); &#125;&#125;Mapper代理形式开发dao实现Mapper.xml编写UserMapper.xml配置文件，如下：123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"fun.obey.mybatis.mapper.UserMapper\"&gt; &lt;!-- 根据用户id查询 --&gt; &lt;select id=\"queryUserById\" parameterType=\"int\" resultType=\"user\"&gt; select * from user where id = #&#123;id&#125; &lt;/select&gt; &lt;!-- 根据用户名模糊查询用户 --&gt; &lt;select id=\"queryUserByUsername\" parameterType=\"string\" resultType=\"user\"&gt; select * from user where username like '%$&#123;value&#125;%' &lt;/select&gt; &lt;!-- 添加用户 --&gt; &lt;insert id=\"saveUser\" parameterType=\"user\"&gt; &lt;selectKey keyProperty=\"id\" keyColumn=\"id\" order=\"AFTER\" resultType=\"int\"&gt; select last_insert_id() &lt;/selectKey&gt; insert into user (username,birthday,sex,address) values (#&#123;username&#125;,#&#123;birthday&#125;,#&#123;sex&#125;,#&#123;address&#125;) &lt;/insert&gt;&lt;/mapper&gt;实现UserMapper接口123456789101112131415161718192021222324public interface UserMapper &#123; /** * 根据用户id查询 * * @param id * @return */ User queryUserById(int id); /** * 根据用户名模糊查询用户 * * @param username * @return */ List&lt;User&gt; queryUserByUsername(String username); /** * 添加用户 * * @param user */ void saveUser(User user);&#125;方式一：配置mapper代理在applicationContext.xml添加配置MapperFactoryBean也是属于mybatis-spring整合包1234567&lt;!-- Mapper代理的方式开发方式一，配置Mapper代理对象 --&gt;&lt;bean id=\"userMapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\"&gt; &lt;!-- 配置Mapper接口 --&gt; &lt;property name=\"mapperInterface\" value=\"fun.obey.mybatis.mapper.UserMapper\" /&gt; &lt;!-- 配置sqlSessionFactory --&gt; &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\" /&gt;&lt;/bean&gt;测试方法12345678910111213141516171819202122232425262728293031323334353637383940414243public class UserMapperTest &#123; private ApplicationContext context; @Before public void setUp() throws Exception &#123; this.context = new ClassPathXmlApplicationContext(\"classpath:applicationContext.xml\"); &#125; @Test public void testQueryUserById() &#123; // 获取Mapper UserMapper userMapper = this.context.getBean(UserMapper.class); User user = userMapper.queryUserById(1); System.out.println(user); &#125; @Test public void testQueryUserByUsername() &#123; // 获取Mapper UserMapper userMapper = this.context.getBean(UserMapper.class); List&lt;User&gt; list = userMapper.queryUserByUsername(\"张\"); for (User user : list) &#123; System.out.println(user); &#125; &#125; @Test public void testSaveUser() &#123; // 获取Mapper UserMapper userMapper = this.context.getBean(UserMapper.class); User user = new User(); user.setUsername(\"曹操\"); user.setSex(\"1\"); user.setBirthday(new Date()); user.setAddress(\"三国\"); userMapper.saveUser(user); System.out.println(user); &#125;&#125;方式二：扫描包形式配置mapper12345&lt;!-- Mapper代理的方式开发方式二，扫描包方式配置代理 --&gt;&lt;bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\"&gt; &lt;!-- 配置Mapper接口 --&gt; &lt;property name=\"basePackage\" value=\"fun.obey.mybatis.mapper\" /&gt;&lt;/bean&gt;提示：每个mapper代理对象的id就是类名，首字母小写","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Mybatis","slug":"后端/Java/Mybatis","permalink":"https://me.obey.fun/categories/后端/Java/Mybatis/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SQL","slug":"SQL","permalink":"https://me.obey.fun/tags/SQL/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Mybatis","slug":"后端/Java/Mybatis","permalink":"https://me.obey.fun/categories/后端/Java/Mybatis/"}]},{"title":"Spring AOP","slug":"Spring-AOP","date":"2019-03-20T13:47:47.000Z","updated":"2019-05-04T12:46:32.538Z","comments":true,"path":"Spring-AOP.html","link":"","permalink":"https://me.obey.fun/Spring-AOP.html","excerpt":"","text":"AOP 前奏WHY AOP?需求1：在程序执行期间追踪正在发生的活动需求2：希望计算器只能处理正数的运算代码实现片段出现的问题代码混乱：越来越多的非业务需求(日志和验证等)加入后, 原有的业务方法急剧膨胀. 每个方法在处理核心逻辑的同时还必须兼顾其他多个关注点.代码分散：以日志需求为例, 只是为了满足这个单一需求, 就不得不在多个模块（方法）里多次重复相同的日志代码. 如果日志需求发生变化, 必须修改所有模块.使用动态代理解决上述问题代理设计模式的原理：使用一个代理将对象包装起来, 然后用该代理对象取代原始对象. 任何对原始对象的调用都要通过代理. 代理对象决定是否以及何时将方法调用转到原始对象上.ArithmeticCalculator.java12345678package com.spring.aop.impl;public interface ArithmeticCalculator &#123; int add(int i, int j); int sub(int i, int j); int mul(int i, int j); int div(int i, int j);&#125;ArithmeticCalculatorimpl.java1234567891011121314151617181920212223package com.spring.aop.helloworld;public class ArithmeticCalculatorImpl implements ArithmeticCalculator &#123; @Override public int add(int i, int j) &#123; return i+j; &#125; @Override public int sub(int i, int j) &#123; return i-j; &#125; @Override public int mul(int i, int j) &#123; return i*j; &#125; @Override public int div(int i, int j) &#123; return i/j; &#125;&#125;ArithmeticCalculatorLoggingProxy.java12345678910111213141516171819202122232425262728293031323334353637383940414243444546package com.spring.aop.helloworld;import java.lang.reflect.InvocationHandler;import java.lang.reflect.Method;import java.lang.reflect.Proxy;import java.util.Arrays;public class ArithmeticCalculatorLoggingProxy &#123; //要代理的对象 private ArithmeticCalculator target; public ArithmeticCalculatorLoggingProxy(ArithmeticCalculator target) &#123; this.target = target; &#125; public ArithmeticCalculator getLoggingProxy()&#123; ArithmeticCalculator proxy = null; //代理对象由哪一个类加载器负责加载 ClassLoader loader = target.getClass().getClassLoader(); //代理对象的类型，即其中有哪些方法 Class[] interfaces = new Class[]&#123;ArithmeticCalculator.class&#125;; //当调用代理对象其中方法时，该执行的方法 InvocationHandler h = new InvocationHandler() &#123; /** * proxy:正在返回的那个代理对象，一般情况下，在invoke方法中都不使用该对象 * method:正在被调用的方法 * args:调用方法时，传入的参数 * */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123; String methodName = method.getName(); //日志 System.out.println(\"The method \" + methodName + \"begins with \" + Arrays.asList(args)); //执行方法 Object result = method.invoke(target,args); //日志 System.out.println(\"The method \" + methodName+ \"ends with \" + result); return result; &#125; &#125;; proxy = (ArithmeticCalculator) Proxy.newProxyInstance(loader,interfaces,h); return proxy; &#125;&#125;测试代码1234567891011121314package com.spring.aop.helloworld;public class Main &#123; public static void main(String[] args)&#123; ArithmeticCalculator target = new ArithmeticCalculatorImpl(); ArithmeticCalculator proxy = new ArithmeticCalculatorLoggingProxy(target).getLoggingProxy(); int result = proxy.add(1,2); System.out.println(\"--&gt;\"+result); result = proxy.div(4,3); System.out.println(\"--&gt;\"+result); &#125;&#125;结果：The method addbegins with [1, 2]The method addends with 3--&gt;3The method divbegins with [4, 3]The method divends with 1--&gt;1AOP 简介AOP(Aspect-Oriented Programming, 面向切面编程): 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充.AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.在应用 AOP 编程时, 仍然需要定义公共功能, 但可以明确的定义这个功能在哪里, 以什么方式应用, 并且不必修改受影响的类. 这样一来横切关注点就被模块化到特殊的对象(切面)里.AOP 的好处:每个事物逻辑位于一个位置, 代码不分散, 便于维护和升级业务模块更简洁, 只包含核心业务代码.AOP 术语切面(Aspect): 横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象通知(Advice): 切面必须要完成的工作目标(Target): 被通知的对象代理(Proxy): 向目标对象应用通知之后创建的对象连接点（Joinpoint）：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位。例如 ArithmethicCalculator#add() 方法执行前的连接点，执行点为 ArithmethicCalculator#add()； 方位为该方法执行前的位置切点（pointcut）：每个类都拥有多个连接点：例如 ArithmethicCalculator 的所有方法实际上都是连接点，即连接点是程序类中客观存在的事务。AOP 通过切点定位到特定的连接点。类比：连接点相当于数据库中的记录，切点相当于查询条件。切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过 org.springframework.aop.Pointcut 接口进行描述，它使用类和方法作为连接点的查询条件。Spring AOPAspectJ：Java 社区里最完整最流行的 AOP 框架.在 Spring2.0 以上版本中, 可以使用基于 AspectJ 注解或基于 XML 配置的 AOP在Spring中启用AspectJ注解支持要在 Spring 应用中使用 AspectJ 注解, 必须在 classpath 下包含 AspectJ 类库: aopalliance.jar、aspectj.weaver.jar 和 spring-aspects.jar将 aop Schema 添加到根元素中.要在 Spring IOC 容器中启用 AspectJ 注解支持, 只要在 Bean 配置文件中定义一个空的 XML 元素 aop:aspectj-autoproxy当 Spring IOC 容器侦测到 Bean 配置文件中的 aop:aspectj-autoproxy 元素时, 会自动为与 AspectJ 切面匹配的 Bean 创建代理.用AspectJ注解声明切面要在 Spring 中声明 AspectJ 切面, 只需要在 IOC 容器中将切面声明为 Bean 实例. 当在 Spring IOC 容器中初始化 AspectJ 切面之后, Spring IOC 容器就会为那些与 AspectJ 切面相匹配的 Bean 创建代理.在 AspectJ 注解中, 切面只是一个带有 @Aspect 注解的 Java 类.通知是标注有某种注解的简单的 Java 方法.AspectJ 支持 5 种类型的通知注解:@Before: 前置通知, 在方法执行之前执行@After: 后置通知, 在方法执行之后执行@AfterRunning: 返回通知, 在方法返回结果之后执行@AfterThrowing: 异常通知, 在方法抛出异常之后@Around: 环绕通知, 围绕着方法执行前置通知前置通知:在方法执行之前执行的通知前置通知使用 @Before 注解, 并将切入点表达式的值作为注解值.123456//声明该方法时一个前置通知: 在目标方法开始之前执行 @Before(\"execution(* com.spring.aop.impl.*.add(..))\") public void beforeMethod(JoinPoint joinPoint) &#123; System.out.println(\"The method begins with \"); &#125;标识这个方法是个前置通知, 切点表达式表示执行 ArithmeticCalculator 接口的 add() 方法. * 代表匹配任意修饰符及任意返回值, 参数列表中的 .. 匹配任意数量的参数利用方法签名编写 AspectJ 切入点表达式最典型的切入点表达式时根据方法的签名来匹配各种方法:execution com.atguigu.spring.ArithmeticCalculator.(..): 匹配 ArithmeticCalculator 中声明的所有方法,第一个 代表任意修饰符及任意返回值. 第二个 代表任意方法. .. 匹配任意数量的参数. 若目标类与接口与该切面在同一个包中, 可以省略包名.execution public ArithmeticCalculator.(..): 匹配 ArithmeticCalculator 接口的所有公有方法.execution public double ArithmeticCalculator.*(..): 匹配 ArithmeticCalculator 中返回 double 类型数值的方法execution public double ArithmeticCalculator.*(double, ..): 匹配第一个参数为 double 类型的方法, .. 匹配任意数量任意类型的参数execution public double ArithmeticCalculator.*(double, double): 匹配参数类型为 double, double 类型的方法.合并切入点表达式在 AspectJ 中, 切入点表达式可以通过操作符 &amp;&amp;, ||, ! 结合起来.123456//声明该方法时一个前置通知: 在目标方法开始之前执行 @Before(\"execution(* com.spring.aop.impl.*.add(int,int))&amp;&amp;execution(* com.spring.aop.impl.*.div(int,int))\") public void beforeMethod(JoinPoint joinPoint) &#123; System.out.println(\"The method begins with \"); &#125;让通知访问当前连接点的细节可以在通知方法中声明一个类型为 JoinPoint 的参数. 然后就能访问链接细节. 如方法名称和参数值.12345678//声明该方法时一个前置通知: 在目标方法开始之前执行 @Before(\"execution(* com.spring.aop.impl.*.*(int,int))\") public void beforeMethod(JoinPoint joinPoint) &#123; String MethodName = joinPoint.getSignature().getName(); List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs()); System.out.println(\"The method \"+MethodName+\" begins with \" + args); &#125;标识这个方法是个前置通知, 切点表达式表示执行任意类的任意方法. 第一个 代表匹配任意修饰符及任意返回值, 第二个 代表任意类的对象,第三个 * 代表任意方法, 参数列表中的 .. 匹配任意数量的参数后置通知后置通知是在连接点完成之后执行的, 即连接点返回结果或者抛出异常的时候, 下面的后置通知记录了方法的终止.一个切面可以包括一个或者多个通知.1234567//后置通知：在目标方法执行后（无论是否发生异常），执行的通知 //在后置通知中还不能访问目标方法执行的结果 @After(\"execution(* com.spring.aop.impl.*.*(..))\") public void afterMethod(JoinPoint joinPoint)&#123; String MethodName = joinPoint.getSignature().getName(); System.out.println(\"The method \"+ MethodName+\" ends\"); &#125;返回通知无论连接点是正常返回还是抛出异常, 后置通知都会执行. 如果只想在连接点返回的时候记录日志, 应使用返回通知代替后置通知.1234567/** * 在方法正常结束受执行的代码 * */ @AfterReturning(\"execution(* com.spring.aop.impl.*.*(..))\") public void afterRunningMethod()&#123; System.out.println(\"afterRunning... \"); &#125;在返回通知中访问连接点的返回值在返回通知中, 只要将 returning 属性添加到 @AfterReturning 注解中, 就可以访问连接点的返回值. 该属性的值即为用来传入返回值的参数名称.必须在通知方法的签名中添加一个同名参数. 在运行时, Spring AOP 会通过这个参数传递返回值.原始的切点表达式需要出现在 pointcut 属性中123456789/** * 在方法正常结束受执行的代码 * 返回通知时可以访问到方法的返回值的！ * */ @AfterReturning(pointcut = \"execution(* com.spring.aop.impl.*.*(..))\", returning = \"result\") public void afterRunningMethod(Object result)&#123; System.out.println(\"afterRunning: \" + result); &#125;异常通知只在连接点抛出异常时才执行异常通知将 throwing 属性添加到 @AfterThrowing 注解中, 也可以访问连接点抛出的异常. Throwable 是所有错误和异常类的超类. 所以在异常通知方法可以捕获到任何错误和异常.如果只对某种特殊的异常类型感兴趣, 可以将参数声明为其他异常的参数类型. 然后通知就只在抛出这个类型及其子类的异常时才被执行.123456789/** * 在目标方法出现异常时会执行的代码 * 可以访问到异常对象；且可以指定在出现特定异常时执行通知代码qwx * */ @AfterThrowing(value = \"execution(* com.spring.aop.impl.*.*(..))\", throwing = \"ex\") public void AfterThrowingMethod(Exception ex)&#123; System.out.println(\"AfterThrowing:\"+ex); &#125;环绕通知环绕通知是所有通知类型中功能最为强大的, 能够全面地控制连接点. 甚至可以控制是否执行连接点.对于环绕通知来说, 连接点的参数类型必须是 ProceedingJoinPoint . 它是 JoinPoint 的子接口, 允许控制何时执行, 是否执行连接点.在环绕通知中需要明确调用 ProceedingJoinPoint 的 proceed() 方法来执行被代理的方法. 如果忘记这样做就会导致通知被执行了, 但目标方法没有被执行.注意: 环绕通知的方法需要返回目标方法执行之后的结果, 即调用 joinPoint.proceed(); 的返回值, 否则会出现空指针异常环绕通知示例代码123456789101112131415161718@Around(\"execution(* com.spring.aop.impl.*.*(..))\") public Object aroundMethod(ProceedingJoinPoint pjd)&#123; Object result = null; String methodName = pjd.getSignature().getName(); try &#123; //执行目标方法 //前置通知 System.out.println(\"The method \" + methodName + \" before with \" + Arrays.asList(pjd.getArgs())); result = pjd.proceed(); //后置通知 System.out.println(\"The method \" + methodName + \" after with\"); &#125; catch (Throwable throwable) &#123; //异常通知 System.out.println(\"The method \"+methodName+\"occurs exception:\"+ throwable); &#125; return result; &#125;指定切面的优先级在同一个连接点上应用不止一个切面时, 除非明确指定, 否则它们的优先级是不确定的.切面的优先级可以通过实现 Ordered 接口或利用 @Order 注解指定.实现 Ordered 接口, getOrder() 方法的返回值越小, 优先级越高.若使用 @Order 注解, 序号出现在注解中12345678910111213/** * 可以使用@Order注解指定切面的优先级，值越小优先级越高 * */@Order(1)@Aspect@Componentpublic class VlidationAspect &#123; @Before(\"execution(* com.spring.aop.impl.*.*(..))\") public void validateArgs(JoinPoint joinPoint)&#123; System.out.println(\"validate:\" + Arrays.asList(joinPoint.getArgs())); &#125;&#125;重用切入点定义在编写 AspectJ 切面时, 可以直接在通知注解中书写切入点表达式. 但同一个切点表达式可能会在多个通知中重复出现.在 AspectJ 切面中, 可以通过 @Pointcut 注解将一个切入点声明成 简单的方法. 切入点的方法体通常是空的, 因为将切入点定义与应用程序逻辑混在一起是不合理的.切入点方法的访问控制符同时也控制着这个切入点的可见性. 如果切入点要在多个切面中共用, 最好将它们集中在一个公共的类中. 在这种情况下, 它们必须被声明为 public. 在引入这个切入点时, 必须将类名也包括在内. 如果类没有与这个切面放在同一个包中, 还必须包含包名.其他通知可以通过方法名称引入该切入点.重用切入点示例代码123456789101112131415161718192021222324252627282930313233343536373839404142/** * 定义一个方法，用于声明切入点表达式，一般地，该方法中再也不需要添入其他的代码 * */ @Pointcut(\"execution(* com.spring.aop.impl.*.*(..))\") public void declareJointPointExpression()&#123;&#125; //声明该方法时一个前置通知: 在目标方法开始之前执行 @Before(\"declareJointPointExpression()\") public void beforeMethod(JoinPoint joinPoint) &#123; String MethodName = joinPoint.getSignature().getName(); List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs()); System.out.println(\"The method \"+MethodName+\" begins with \" + args); &#125; //后置通知：在目标方法执行后（无论是否发生异常），执行的通知 //在后置通知中还不能访问目标方法执行的结果 @After(\"declareJointPointExpression()\") public void afterMethod(JoinPoint joinPoint)&#123; String MethodName = joinPoint.getSignature().getName(); System.out.println(\"The method \"+ MethodName+\" ends\"); &#125; /** * 在目标方法出现异常时会执行的代码 * 可以访问到异常对象；且可以指定在出现特定异常时执行通知代码qwx * */ @AfterThrowing(value = \"declareJointPointExpression()\", throwing = \"ex\") public void AfterThrowingMethod(Exception ex)&#123; System.out.println(\"AfterThrowing:\"+ex); &#125; /** * 在方法正常结束受执行的代码 * 返回通知时可以访问到方法的返回值的！ * */ @AfterReturning(value = \"declareJointPointExpression()\", returning = \"result\") public void afterRunningMethod(Object result)&#123; System.out.println(\"afterRunning: \" + result); &#125;用基于XML的配置声明切面除了使用 AspectJ 注解声明切面, Spring 也支持在 Bean 配置文件中声明切面. 这种声明是通过 aop schema 中的 XML 元素完成的.正常情况下, 基于注解的声明要优先于基于 XML 的声明. 通过 AspectJ 注解, 切面可以与 AspectJ 兼容, 而基于 XML 的配置则是 Spring 专有的. 由于 AspectJ 得到越来越多的 AOP 框架支持, 所以以注解风格编写的切面将会有更多重用的机会.基于XML —- 声明切面当使用 XML 声明切面时, 需要在 &lt;beans&gt; 根元素中导入 aop Schema在 Bean 配置文件中, 所有的 Spring AOP 配置都必须定义在 &lt;aop:config&gt; 元素内部. 对于每个切面而言, 都要创建一个 &lt;aop:aspect&gt; 元素来为具体的切面实现引用后端 Bean 实例.切面 Bean 必须有一个标示符, 供 &lt;aop:aspect&gt; 元素引用声明切面的实例代码1234567&lt;!-- 配置切面的bean --&gt; &lt;bean id=\"calculatorvalidationAspect\" class=\"com.spring.aop.xml.VlidationAspect\"&gt;&lt;/bean&gt; &lt;!-- 配置AOP --&gt; &lt;aop:config&gt; &lt;aop:aspect id = \"validationAspect\" ref=\"calculatorvalidationAspect\"&gt; &lt;/aop:aspect&gt; &lt;/aop:config&gt;基于 XML —- 声明切入点切入点使用 &lt;aop:pointcut&gt; 元素声明切入点必须定义在 &lt;aop:aspect&gt; 元素下, 或者直接定义在 &lt;aop:config&gt; 元素下.定义在 &lt;aop:aspect&gt; 元素下: 只对当前切面有效定义在 &lt;aop:config&gt; 元素下: 对所有切面都有效基于 XML 的 AOP 配置不允许在切入点表达式中用名称引用其他切入点.声明切入点的示例代码12345678910111213141516171819202122&lt;!-- 定义bean --&gt;&lt;bean id=\"arithmeticCalculator\" class=\"com.spring.aop.xml.ArithmeticCalculatorImpl\"&gt;&lt;/bean&gt;&lt;!-- 配置切面的bean --&gt;&lt;bean id=\"loggingAspect\" class=\"com.spring.aop.xml.LoggingAspect\"&gt;&lt;/bean&gt;&lt;bean id=\"validationAspect\" class=\"com.spring.aop.xml.VlidationAspect\"&gt;&lt;/bean&gt;&lt;!-- 配置AOP --&gt;&lt;aop:config&gt;&lt;!-- 配置切点表达式 --&gt; &lt;aop:pointcut expression=\"execution(* com.spring.aop.xml.*.*(..))\" id=\"pointcut\" /&gt; &lt;!-- 配置切面及通知 --&gt; &lt;aop:aspect ref=\"loggingAspect\" order=\"2\"&gt; &lt;aop:before method=\"beforeMethod\" pointcut-ref=\"pointcut\"/&gt; &lt;aop:after method=\"afterMethod\" pointcut-ref=\"pointcut\"/&gt; &lt;aop:after-returning method=\"afterRunningMethod\" pointcut-ref=\"pointcut\" returning=\"result\"/&gt; &lt;aop:after-throwing method=\"AfterThrowingMethod\" pointcut-ref=\"pointcut\" throwing=\"ex\" /&gt; &lt;/aop:aspect&gt; &lt;aop:aspect ref=\"validationAspect\" order=\"1\"&gt; &lt;aop:before method=\"validateArgs\" pointcut-ref=\"pointcut\" &gt;&lt;/aop:before&gt; &lt;/aop:aspect&gt;&lt;/aop:config&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"},{"name":"AOP&DI","slug":"AOP-DI","permalink":"https://me.obey.fun/tags/AOP-DI/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"通过工厂方法配置Bean","slug":"通过工厂方法配置Bean","date":"2019-03-13T14:11:03.000Z","updated":"2019-03-14T03:12:13.742Z","comments":true,"path":"通过工厂方法配置Bean.html","link":"","permalink":"https://me.obey.fun/通过工厂方法配置Bean.html","excerpt":"","text":"通过调用静态工厂方法创建Bean调用静态工厂方法创建Bean是将对象创建的过程封装到静态方法中。当客户端需要对象时，只需要简单地调用静态方法，而不用关心创建对象的细节。要声明通过静态方法创建的Bean。需要在Bean的class属性里指定拥有该工厂的方法的类，同时在factory-method属性里指定工厂方法的名称，最后，使用&lt;constrctor-arg&gt;元素为该方法传递参数。Car.java1234567891011121314151617181920212223242526272829303132333435363738package com.spring;public class Car &#123; private String brand; private double price; public String getBrand() &#123; return brand; &#125; public void setBrand(String brand) &#123; this.brand = brand; &#125; public double getPrice() &#123; return price; &#125; public void setPrice(double price) &#123; this.price = price; &#125; public Car(String brand, double price) &#123; this.brand = brand; this.price = price; &#125; public Car() &#123; &#125; @Override public String toString() &#123; return \"Car&#123;\" + \"brand='\" + brand + '\\'' + \", price=\" + price + '&#125;'; &#125;&#125;beans-factory.xml1234567891011121314&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt; &lt;!-- 通过静态工厂方法来配置bean，注意不是配置静态工厂方法实例，而是配置bean实例 --&gt; &lt;!-- class 属性： 指向静态工厂方法的全类名 factory-method: 指向静态工厂方法的名字 constructor-arg: 如果工厂方法需要传入参数，则使用constructor-arg 来配置参数 --&gt; &lt;bean id=&quot;car1&quot; class=&quot;com.spring.StaticCarFactory&quot; factory-method=&quot;getCar&quot;&gt; &lt;constructor-arg value=&quot;audi&quot; /&gt; &lt;/bean&gt;&lt;/beans&gt;MainTest.java12345678910111213package com.test;import com.spring.Car;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class MainTest &#123; public static void main(String[] args)&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans-factory.xml\"); Car car = (Car)applicationContext.getBean(\"car1\"); System.out.println(car); &#125;&#125;运行结果：Car{brand=&#39;audi&#39;, price=300000.0}通过调用实例工厂方法创建Bean实例工厂方法：将对象的创建过程封装到另一个对象实例的方法里。当客户端需要请求对象时，值需要简单的调用该实例方法而不需要关心对象的创建细节。要声明通过实例工厂方法创建的Bean在bean的factory-bean属性里指定拥有该工厂方法的Bean在factory-method属性里指定该工厂方法的名称使用construtor-arg元素为工厂方法传递方法参数Car.java1234567891011121314151617181920212223242526272829303132333435363738package com.spring;public class Car &#123; private String brand; private double price; public String getBrand() &#123; return brand; &#125; public void setBrand(String brand) &#123; this.brand = brand; &#125; public double getPrice() &#123; return price; &#125; public void setPrice(double price) &#123; this.price = price; &#125; public Car(String brand, double price) &#123; this.brand = brand; this.price = price; &#125; public Car() &#123; &#125; @Override public String toString() &#123; return \"Car&#123;\" + \"brand='\" + brand + '\\'' + \", price=\" + price + '&#125;'; &#125;&#125;InstanceCarFactory.java1234567891011121314151617181920package com.spring;import java.util.HashMap;import java.util.Map;/** * 实例工厂方法：实例工厂的方法，即现需要创建工厂本身，再调用工厂的实例方法来返回bean的实例 * */public class InstanceCarFactory &#123; private Map&lt;String,Car&gt; cars = null; public InstanceCarFactory() &#123; cars = new HashMap&lt;String, Car&gt;(); cars.put(\"audi\",new Car(\"audi\",300000)); cars.put(\"ford\",new Car(\"ford\",400000)); &#125; public Car getCar(String brand)&#123; return cars.get(brand); &#125;&#125;MainTest.java12345678910111213package com.test;import com.spring.Car;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class MainTest &#123; public static void main(String[] args)&#123; ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans-factory.xml\"); Car car = (Car)applicationContext.getBean(\"car2\"); System.out.println(car); &#125;&#125;测试结果：Car{brand=&#39;ford&#39;, price=400000.0}","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Spring注解开发","slug":"Spring注解开发","date":"2019-03-13T12:39:33.000Z","updated":"2019-03-13T13:03:11.929Z","comments":true,"path":"Spring注解开发.html","link":"","permalink":"https://me.obey.fun/Spring注解开发.html","excerpt":"","text":"JavaConfig从Spring 3起，JavaConfig功能已经包含在Spring核心模块，它允许开发者将bean定义和在Spring配置XML文件到Java类中。但是，仍然允许使用经典的XML方式来定义bean和配置，JavaConfig是另一种替代解决方案。所以，在Spring3以后的版本中，支持xml方式和javaConfig两种Spring配置方式。建议：Spring项目用全注解开发，为后期学Spring Boot和Spring Cloud打好基础。通过XML配置Person.java1234567891011121314151617181920212223242526272829303132333435363738package com.spring;public class Person &#123; private String name; private String age; public Person(String name, String age) &#123; this.name = name; this.age = age; &#125; public Person() &#123; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; @Override public String toString() &#123; return \"Person&#123;\" + \"name='\" + name + '\\'' + \", age='\" + age + '\\'' + '&#125;'; &#125;&#125;bean.xml1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;!-- 配置bean class：bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参数的构造器 id:标识容器中的bean。id唯一 --&gt; &lt;bean id=\"person\" class=\"com.Spring.Person\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"age\" value=\"21\"&gt;&lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt;Maintest.java123456789101112131415161718package com.Spring;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class MainTest &#123; public static void main(String[] args)&#123; //1.创建Spring 的IOC容器对象 //ApplicationContext 代表IOC容器 //ClassPathXmlApplicationContext：是ApplicationContext 接口的实现类 ApplicationContext act = new ClassPathXmlApplicationContext(\"bean.xml\"); //2.从IOC容器中获取Bean实例 Person person = (Person)act.getBean(\"person\"); //3.调用toString()方法并打印 System.out.println(person.toString()); &#125;&#125;&#125;结果：Person{name=&#39;HuiProgramer&#39;, age=&#39;21&#39;}以上为Xml配置的方式，Spring3.0后启用注解开发模式。使用注解模式Person.java1234567891011121314151617181920212223242526272829303132333435363738package com.spring;public class Person &#123; private String name; private String age; public Person(String name, String age) &#123; this.name = name; this.age = age; &#125; public Person() &#123; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public String getAge() &#123; return age; &#125; public void setAge(String age) &#123; this.age = age; &#125; @Override public String toString() &#123; return \"Person&#123;\" + \"name='\" + name + '\\'' + \", age='\" + age + '\\'' + '&#125;'; &#125;&#125;AppConfig.java123456789101112131415161718package com.spring;import org.springframework.context.ApplicationContext;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;//相当于beans@Configurationpublic class AppConfig &#123; public AppConfig()&#123; &#125; //相当于bean，默认方法名为Bean的id @Bean public Person person()&#123; return new Person(\"HuiPerson\",\"21\"); &#125;&#125;MainTest.Java123456789101112131415public class Maintest&#123; public static void main(String[] args)&#123; //通过注解获取ApplicationContext ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class); //通过类获取Person的bean实例 Person person = context.getBean(Person.class); //打印person System.out.println(person); //通过类型获取所有Bean的person bean实例 String[] names = context.getBeanNamesForType(Person.class); //打印 for(String name:names) System.out.println(name); &#125;&#125;结果：Person{name=&#39;HuiProgramer&#39;, age=&#39;21&#39;}person此为Spring3.0后的注解开发模式！","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"},{"name":"Spring注解开发","slug":"Spring注解开发","permalink":"https://me.obey.fun/tags/Spring注解开发/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"管理Bean的生命周期","slug":"管理Bean的生命周期","date":"2019-03-09T07:46:44.000Z","updated":"2019-05-04T13:38:43.937Z","comments":true,"path":"管理Bean的生命周期.html","link":"","permalink":"https://me.obey.fun/管理Bean的生命周期.html","excerpt":"","text":"IOC容器中Bean的生命周期方法SpringIOC容器可以管理Bean的生命周期，Spring允许在Bean生命周期的特定点执行定制的任务。Spring IOC容器对Bean的生命周期进行管理的过程通过构造器或工厂方法创建Bean为Bean的属性设置值和对其他Bean的引用调用Bean的初始化方法Bean可以使用了当容器关闭时，调用Bean的销毁方法在Bean的声明里设置init-method和destroy-method属性。为Bean指定初始化和销毁方法。Car.java1234567891011121314151617181920public class Car&#123; public Car()&#123; System.out.println(\"Car's Constructor...\"); &#125; private String brand; public void setBrand(String brand)&#123; System.out.println(\"setBrand...\"); this.brand = brand; &#125; public void init()&#123; System.out.println(\"init...\"); &#125; public void destroy()&#123; System.out.println(\"destroy...\"); &#125;&#125;Bean.XML1234&lt;bean id = \"car\" class = \"com.Spring.test.Car\" init-method = \"init\" destroy-method = \"destroy\"&gt; &lt;property name = \"Brand\" value = \"Audi\" /&gt;&lt;/bean&gt;Main.XML1234567891011public class Main&#123; public static void main(String[] args)&#123; ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext(\"Bean.xml\"); Car car = (Car)ctx.getBean(\"car\"); System.out.println(car); //关闭IOC容器 ctx.close(); &#125;&#125;输出结果：Car&#39;s Constructor...setBrandinit...com.Spring.test.Car@bb23423destory..创建Bean后置处理器Bean后置处理器允许在调用初始化方法前后对Bean进行额外的处理Bean后置处理器对IOC容器里的所有Bean实例逐一处理，而非单一实例，其典型应用是：检查Bean属性的正确性或根据特定的标准更改Bean的属性对Bean后置处理器而言，需要实现Interface BeanPostProcessor接口，在初始化方法被调用前后。Spring将把每个Bean实例分别传递给上述接口的以下两个方法：添加Bean后置处理器后Bean的生命周期SpringIOC容器对Bean的生命周期进行管理的过程：通过构造器或工厂方法创建Bean实例为Bean的属性设置值和对其他Bean的引用将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization方法调用Bean的初始化方法将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization方法Bean可以使用了当容器关闭时，调用Bean的销毁方法具体操作：MyBeanPostProcessor.java123456789101112public class myBeanPostProcessor implements BeanPostProcessor&#123; @override public Object postProcessBeforeInitialization(Object bean,String beanName) throws BensException&#123; System.out.println(\"postProcessBeforeInitialization:\" + bean + \" \" + beanName); return bean; &#125; @override public Object postProcessAfterInitialization(Object bean,String beanName) throws BensException&#123; System.out.println(\"postProcessAfterInitialization:\" + bean + \" \" + beanName); return bean; &#125;&#125;Bean.XML123456789101112131415&lt;bean id = \"car\" class = \"com.Spring.test.Car\" init-method = \"init\" destroy-method = \"destroy\"&gt; &lt;property name = \"Brand\" value = \"Audi\" /&gt;&lt;/bean&gt;&lt;!-- 实现BeanPostProcessor接口，并具体提供Object postProcessBeforeInitialization(Object bean,String beanName)：init-method之前被调用 实现BeanPostProcessor接口，并具体提供Object postProcessAfterInitialization(Object bean,String beanName)：init-method之后被调用 bean: bean实例本身 beanName: IOC容器配置的bean的名字 返回值： 是实际上返回给用户的哪个Bean，注意：可以在以上两个方法中修改返回的bean，甚至返回一个新的bean --&gt;&lt;!-- 配置bean的后置处理器：不需要配置id，IOC容器自动识别是一个BenaPostProcessor --&gt;&lt;bean class = \"com.Spring.test.MyBeanPostProcessor\"&gt;&lt;/bean&gt;输出结果：Car&#39;s Constructor...setBrandpostProcessBeforeInitialization:com.Spring.test.Car@bb23423 carinit...postProcessBeforeInitialization:com.Spring.test.Car@bb23423 carcom.Spring.test.Car@bb23423destory..添加Bean后置处理器后Bean的生命周期SpringIOC容器对Bean的生命周期进行管理的过程：通过构造器或工厂方法创建Bean实例为Bean的属性设置值和对其他Bean的引用将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization方法调用Bean的初始化方法将Bean实例传递给Bean后置处理器的postProcessBeforeInitialization方法Bean可以使用了当容器关闭时，调用Bean的销毁方法","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Spring表达式语言(SpEL)","slug":"Spring表达式语言-SpEL","date":"2019-03-08T13:48:44.000Z","updated":"2019-03-08T15:17:35.999Z","comments":true,"path":"Spring表达式语言-SpEL.html","link":"","permalink":"https://me.obey.fun/Spring表达式语言-SpEL.html","excerpt":"","text":"Spring表达式语言：SpELSpring表达式语言（简称SpEL）:是一个支持运行时查询和操作对象图的强大的表达式语言语法类似于EL：SpEL使用#{…}作为定界符，所有在大框号中的字符都被认为是SpELSpEL为bean的属性进行动态赋值提供了便利通过SpEL可以实现：通过bean的id对bean进行引用调用方法以及引用对象中的属性正则表达式的值正则表达式的配置SpEL：字面值整数：&lt;property name = “count” value = “#{5}“/&gt;小数：&lt;property name = “frequency” value = “#{89.7}“/&gt;科学记数法：&lt;property name = “capacity” value = “#{1e4}“/&gt;String可以使用单引号或者双引号作为字符串的定界符号：&lt;property name = “name” value = “#{Chuck}“/&gt;或&lt;property name = ‘name’ value = ‘#{Chuck}‘/&gt;Boolean：&lt;property name = “enabled” value = “#{false}“/&gt;SpEL：引用Bean、属性和方法引用其他对象：12&lt;!-- 通过value属性和 SpEL 配置 Bean 之间的应用关系 --&gt;&lt;property name = \"prefix\" value = \"#&#123;prefixGenerator&#125;\"&gt;&lt;/property&gt;引用其他对象的属性12&lt;!-- 通过value属性和 SpEL 配置 suffix 配置值为另一个bean的suffix属性值 --&gt;&lt;property name = \"suffix\" value = \"#&#123;sequenceGenerator2.suffix&#125;\"&gt;&lt;/property&gt;调用其他方法，还可以链式操作1234&lt;!-- 过value属性和 SpEL 配置 suffix 配置值为另一个bean的返回值 --&gt;&lt;property name = \"suffix\" value = \"#&#123;sequenceGenerator2.toString()&#125;\"&gt;&lt;/property&gt;&lt;!-- 方法的连缀 --&gt;&lt;property name = \"suffix\" value = \"#&#123;sequenceGenerator2.toString().toUpperCase()&#125;\"&gt;&lt;/property&gt;SpEL支持的运算符号算数运算符：+,-,*,%,^:12345&lt;property name = \"adjustedAmount\" value = \"#&#123;counter.total + 43&#125;\" /&gt;&lt;property name = \"adjustedAmount\" value = \"#&#123;counter.total - 13&#125;\" /&gt;&lt;property name = \"circumference\" value = \"#&#123;2* T(java.lang.Math).PI * circle.radius&#125;\" /&gt;&lt;property name = \"average\" value = \"#&#123;counter.total / counter.total&#125;\" /&gt;&lt;property name = \"area\" value = \"#&#123;T(java.lang.Math).PI * circle.radius * 2&#125;\" /&gt;加号还可以用作字符串连接：1&lt;constructor-arg value = \"performer.firstName + ' ' + performer.LastName\" /&gt;比较运算符：&amp;lt,&amp;gt,==,&lt;=,&gt;=,lt,gt,eq,le,ge12&lt;property name=\"equal\" value = \"#&#123;counter.total == 100&#125;\" /&gt;&lt;property name=\"hasCapacity\" value = \"#&#123;counter.total le 100000&#125;\" /&gt;逻辑运算符号：and，or，not，|123&lt;property name=\"largeCircle\" value = \"#&#123;shape.kind == 'circle' and shape.perimeter gt 10000&#125;\" /&gt;&lt;property name=\"outOfStock\" value = \"#&#123;product.available&#125;\" /&gt;&lt;property name=\"outofStock\" value = \"#&#123;not product.available&#125;\" /&gt;if-else运算符：?:(temary),?:(Elvis)1&lt;constructor-arg value = \"#&#123;songSelector.seLectSong()=='Jingle BeLLs'?piano:'Jingle Bells'&#125;\"/&gt;if-else的字体1&lt;constructor-arg value = \"#&#123;kenny.song?:'Greensleeves'&#125;\"/&gt;正则表达式:matches1&lt;constructor-arg value = \"#&#123;admin.email matches '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]&#123;2，4&#125;'&#125;\"/&gt;调用静态方法或静态方法:通过T()调用一个类的静态方法，它将返回一个ClassObject，然后再调用相应的方法或者属性：1&lt;property name=\"initValue\" value = \"#&#123;T(java.Lang.Math).PI&#125;\" /&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Bean使用外部属性","slug":"Bean使用外部属性","date":"2019-03-07T14:10:21.000Z","updated":"2019-03-07T14:38:09.790Z","comments":true,"path":"Bean使用外部属性.html","link":"","permalink":"https://me.obey.fun/Bean使用外部属性.html","excerpt":"","text":"使用外部属性在配置文件里配置Bean时，有时需要在Bean的配置里混入系统部署的细节信息（例如：文件路径，数据源配置信息等）。而这些部署细节实际上需要和Bean部署相分离Spring提供一个PropertyPlaceholderConfigurer的BeanFactory后置处理器，这个处理器允许用户将Bean配置的部分内容外移到属性文件中，可以在Bean配置文件里使用形式为${var}的变量，PropertyPlaceholderConfigurer从属性文件里加载属性，并使用这些属性来替换变量。Spring还允许在属性文件中使用${propName},以实现属性之间的相互引用。注册PropertyPlaceholderConfigurerspring2.0：123&lt;bean class = \"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\"&gt; &lt;property name = \"Location\" value = \"classpath:jdbc.properties\"&gt;&lt;/property&gt;&lt;/bean&gt;Spring2.5之后：可通过&lt;context:property-placeholder&gt;元素简化：&lt;beans&gt;中添加context Schema定义在配置文件中加入如下配置：1&lt;context:property-placeholder location= \"classpath:db.properties\"/&gt;db.properties1234user=rootpassword=1230driverClass=com.mysql.jdbc.DriverjdbcUrl=jdbc:mysql:///testbean.xml12345678910&lt;!-- 导入属性文件 --&gt;&lt;context:property-placeholder location= \"classpath:db.properties\"/&gt;&lt;!-- 使用外部化属性文件的属性 --&gt;&lt;bean id = \"dataSource\" class = \"com.mchange.v2.c3p0.ComboPoolLedDataSource\"&gt; &lt;property name = \"user\" value = \"$&#123;user&#125;\"&gt;&lt;/property&gt; &lt;property name = \"password\" value = \"$&#123;password&#125;\"&gt;&lt;/property&gt; &lt;property name = \"driverClass\" value = \"$&#123;driverClass&#125;\"&gt;&lt;/property&gt; &lt;property name = \"jdbcUrl\" value = \"$&#123;jdbcUrl\"&gt;&lt;/property&gt;&lt;/bean&gt;输出结果：连接成功","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Bean的作用域","slug":"Bean的作用域","date":"2019-03-07T13:47:59.000Z","updated":"2019-03-07T14:56:02.711Z","comments":true,"path":"Bean的作用域.html","link":"","permalink":"https://me.obey.fun/Bean的作用域.html","excerpt":"","text":"Bean的作用域：singleton；prototype；WEB环境作用域配置作用域singletonbean.xml1234&lt;!-- 默认作用域是singleton（单例），通过scope配置 。 容器初始化时创建bean实例。在整个容器的生命周期内置创建这一个bean。--&gt;&lt;bean id = \"car\" class = \"com.spring.helloWorld.Car\"p:brand = \"Audi\" p:price = \"300000\" scope=\"singleton\"&gt;&lt;/bean&gt;Main.java123456public static void main(String[] args)&#123; ApplicationContext ctx = new ClassPathXmlApplicationContext(\"bean.xml\"); Car car = (Car)ctx.getBean(\"car\"); Car car2 = (Car)ctx.getBean(\"car\"); System.out.println(car == car2);&#125;输出结果：true配置作用域prototypebean.xml1234&lt;!-- 此作用域是prototype（不是单例），通过scope配置。 prototype：原型的，容器初始化时不创建bean的实例，而在每次请求时都创建一个新的Bean实例，并返回。--&gt;&lt;bean id = \"car\" class = \"com.spring.helloWorld.Car\"p:brand = \"Audi\" p:price = \"300000\" scope=\"prototype\"&gt;&lt;/bean&gt;Main.java123456public static void main(String[] args)&#123; ApplicationContext ctx = new ClassPathXmlApplicationContext(\"bean.xml\"); Car car = (Car)ctx.getBean(\"car\"); Car car2 = (Car)ctx.getBean(\"car\"); System.out.println(car == car2);&#125;输出结果：false","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Bean之间的关系","slug":"Bean之间的关系","date":"2019-03-06T12:18:58.000Z","updated":"2019-03-07T14:38:37.123Z","comments":true,"path":"Bean之间的关系.html","link":"","permalink":"https://me.obey.fun/Bean之间的关系.html","excerpt":"","text":"Bean之间的关系：继承；依赖Bean配置的继承Spring允许继承bean的配置，被继承的bean成为父bean。继承这个父Bean的Bean称为子Bean子Bean从父Bean中继承配置，包括Bean的属性配置子Bean也可以覆盖从父Bean继承过来的配置父Bean可以作为配置模板，也可以作为Bean的实例。若只想把父Bean作为模板，可以设置&lt;bean&gt;的abstract属性为true，这样Spring将不会实例化这个Bean并不是&lt;bean&gt;元素里的所有属性都会被继承。比如：autowire，abstract等。也可以忽略父Bean的class属性，让子Bean指定自己的类，而共享相同的属性配置，但此时abstract必须设为true继承父Bean实例：123456&lt;bean id = \"address\" class = \"com.spring.helloWorld.Address\" p:city = \"Beijing\" p:street=\"WuDaoKou\"&gt;&lt;/bean&gt;&lt;!-- bean 配置的继承：使用 bean 的 parent 属性指定继承哪个 bean 的配置 --&gt;&lt;bean id = \"address2\" class = \"com.spring.helloWorld.Address\" p:street=\"DaZhongSi\" parent = \"address\"&gt;&lt;/bean&gt;输出结果：Address [city=BeiJing,street=WuDaoKou]Address [city=BeiJing,street=DaZhongSi]抽象Bean实例：12345678&lt;!-- 抽象Bean：bean的abstract属性为true的bean，不能被IOC容器实例化，可以作为模板被继承。若某一个bean的class属性没有指定，则该bean必须是一个抽象bean。 --&gt;&lt;bean id = \"address\" p:city = \"Beijing\" p:street=\"WuDaoKou\" abstract = \"true\"&gt;&lt;/bean&gt;&lt;!-- 继承模板Bean --&gt;&lt;bean id = \"address2\" class = \"com.spring.helloWorld.Address\" parent = \"address\"&gt;&lt;/bean&gt;输出结果：Address [city=BeiJing,street=WuDaoKou]Address [city=BeiJing,street=WuDaoKou]依赖Bean配置Spring允许用户通过depends-on属性设定Bean前置依赖的Bean，前置依赖的Bean会在本Bean实例化之前创建好如果前置依赖于多个Bean，则可以通过逗号，空格的方式配置Bean的名称依赖Bean实例：1234567&lt;!-- 缺少这个bean会报错 --&gt;&lt;bean id = \"car\" class = \"com.spring.helloWorld.Car\"p:brand = \"Audi\" p:price = \"300000\" &gt;&lt;/bean&gt;&lt;!-- 要求配置Person时，必须有一个关联的car！换句话说person这个bean依赖于Car这个bean，如果缺少就会报错 --&gt;&lt;bean id = \"person\" class = \"com.spring.helloWorld.person\"p:name = \"Tom\" p:address-ref=\"address2\" depends-on=\"car\"&gt;&lt;/bean&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Spring自动装配","slug":"Spring自动装配","date":"2019-03-05T01:15:20.000Z","updated":"2019-03-05T13:03:30.575Z","comments":true,"path":"Spring自动装配.html","link":"","permalink":"https://me.obey.fun/Spring自动装配.html","excerpt":"","text":"XML配置里的Bean自动装配Spring IOC容器可以自动装配Bean。需要做的仅仅是在&lt;bean&gt;的autowire属性里指定自动装配的模式byType(根据类型自动装配)：若IOC容器中有多个与目标Bean类型一致的Bean。在这种情况下，Spring将无法判定哪个Bean最适合属性，所以不能执行自动装配。byName(根据名称自动装配)：必须将目标Bean的名称和属性名设置完全相同。constructor（通过构造器自动装配）：当Bean中存在多个构造器时，此种自动装配方式将会很复杂。不推荐使用自动装配byName实例：123456789&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入 p 命名空间,相对于传统的配置更加的简洁 --&gt;&lt;bean id = \"address\" calss = \"com.spring.hellowrld.address\" p:city = \"Beijing\" p:street = \"HuiLongGuan\"&gt;&lt;/bean&gt;&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入 p 命名空间,相对于传统的配置更加的简洁 --&gt;&lt;bean id = \"car\" calss = \"com.spring.hellowrld.Car\" p:brand = \"Audi\" p:price = \"30000\"&gt;&lt;/bean&gt;&lt;!-- 可以使用 autowire 属性指定自动装配的方式 byName 根据 bean 的名字和当前bean的 setter 风格的属性名进行自动装配，若有匹配的，则进行自动装配，若没有匹配的，则不装配 --&gt;&lt;bean id = \"Person\" calss = \"com.spring.hellowrld.person\" p:name = \"Tom\" autowire = \"byName\"&gt;&lt;/bean&gt;自动装配byType实例：12345678&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入 p 命名空间,相对于传统的配置更加的简洁 --&gt;&lt;bean id = \"address2\" calss = \"com.spring.hellowrld.address\" p:city = \"Beijing\" p:street = \"HuiLongGuan\"&gt;&lt;/bean&gt;&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入 p 命名空间,相对于传统的配置更加的简洁 --&gt;&lt;bean id = \"car2\" calss = \"com.spring.hellowrld.Car\" p:brand = \"Audi\" p:price = \"30000\"&gt;&lt;/bean&gt;&lt;!-- byType 根据 bean 的类型和当前 bean 的属性的类型进行自动装配，若IOC容器中有一个以上的类型匹配的bean，则抛异常。 --&gt;&lt;bean id = \"Person2\" calss = \"com.spring.hellowrld.person\" p:name = \"Rose\" autowire = \"byType\"&gt;&lt;/bean&gt;XML配置里的Bean自动装配的缺点在 Bean 配置文建立设置 autowire 属性进行自动装配将会装配 Bean 的所有属性。然而，若值希望装配个别属性时， autowire属性就不够灵活了。autowire 属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼而有之。一般情况下，在实际项目中很少使用自动装配功能，因为和自动装配功能所带来的好处比起来，明确清晰的配置文档更有说服力一些。","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Hexo常见错误","slug":"Hexo常见错误","date":"2019-03-02T09:28:22.000Z","updated":"2019-05-04T09:57:51.017Z","comments":true,"path":"Hexo常见错误.html","link":"","permalink":"https://me.obey.fun/Hexo常见错误.html","excerpt":"","text":"启用腾讯云图床错误为了加快网站访问，本站启用了腾讯云图床，但就在生成文章时，出现了一系列问题。最终将问题定在md文件里。解决办法将平常用的md语法改写为&lt;img&gt;标签，并将在主题目录下的images文件夹里新产生的文件夹删除。1234&lt;!-- 出现错误的方式 --&gt;![Error](https://blog-1258364678.cos.ap-guangzhou.myqcloud.com/Hexo_error1.png \"Error\")&lt;!-- 正确的方式 --&gt;&lt;img src = \"https://blog-1258364678.cos.ap-guangzhou.myqcloud.com/Hexo_error1.pn\" title = \"Error\" alt =\"Error\"&gt;总结出现问题时，要多多分析可能存在的原因；只有找到源头时，才能解决问题。","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"Node.js","slug":"前端/Node-js","permalink":"https://me.obey.fun/categories/前端/Node-js/"},{"name":"Hexo","slug":"前端/Node-js/Hexo","permalink":"https://me.obey.fun/categories/前端/Node-js/Hexo/"}],"tags":[{"name":"博客","slug":"博客","permalink":"https://me.obey.fun/tags/博客/"},{"name":"常见错误","slug":"常见错误","permalink":"https://me.obey.fun/tags/常见错误/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"Node.js","slug":"前端/Node-js","permalink":"https://me.obey.fun/categories/前端/Node-js/"},{"name":"Hexo","slug":"前端/Node-js/Hexo","permalink":"https://me.obey.fun/categories/前端/Node-js/Hexo/"}]},{"title":"Spring中Bean的配置","slug":"Spring中Bean的配置","date":"2019-03-02T02:40:41.000Z","updated":"2019-05-04T13:26:19.099Z","comments":true,"path":"Spring中Bean的配置.html","link":"","permalink":"https://me.obey.fun/Spring中Bean的配置.html","excerpt":"","text":"IOC&amp;DI概述配置Bean配置形式：基于XML文件的方式；基于注解的方式Bean的配置方式：通过全类名（反射）、通过工厂方法（静态工厂方法&amp;实例工厂方法）、FactoryBeanIOC容器BeanFactory&amp;ApplicationContext概述依赖注入的方式：属性注入；构造器注入注入属性值的细节自动装配bean之间的关系：继承；依赖bean的作用域：singleton；prototype；WEB环境作用域使用外部属性文件spELIOC容器中的Bean的生命周期Spring4.x新特性：泛型依赖注入IOC和DIIOC(Inversion of Control)：其思想是反转资源获取的方向。传统的资源查找方式要求组件向容器发起请求查找资源。作为回应，容器适时的返回资源。而应用了IOC之后，则是容器主动地将资源送给它所管理的组件，组件要做的仅仅是选择一种合适的方式来介绍资源。这种行为也被称为查找的被动形式DI(Dependency Injection)–IOC的另一种表述方式：即组件以一些预先定义好的方式（例如：setter方法）接受来自如容器的资源注入。相对于IOC而言，这种表述更直接IOC&amp;DI原理IOC前生 — 分离接口与实现需求：生成HTML或PDF格式的不同类型的报表IOC前生 — 采用工厂设计模式IOC — 采用反转控制Bean的配置方式在Spring的IOC容器里配置Bean在XML文件中通过bean节点来配置bean1234&lt;!-- 通过全类名的方式来配置bean --&gt;&lt;bean id = \"helloWorld\" class = \"com.spring.helloworld.HelloWorld\"&gt;&lt;/bean&gt;id:Bean的名称在IOC容器中必须是唯一若id没有指定，Spring自动将权限定性类名作为Bean的名字id可以指定多个名字，名字之间可用逗号、分号、或者空格分隔Spring容器在SpringIOC容器容器读取Bean配置创建Bean实例之前，必须对它进行实例化。只有在容器实例化后，才可以从IOC容器里获取Bean实例并使用。Spring提供了两种类型的IOC容器实现。BeanFactory:IOC容器的基本实现。ApplicationContext：提供了更多的高级特性。是BeanFactory的子接口。BeanFactory是Spring框架的基础设施，面向Spring本身；ApplicationContext面向使用Spring框架的开发者，几乎所有的应用场合都直接使用ApplicationContext而非底层的BeanFactory无论使用何种方式，配置文件时相同的。ApplicationContextApplicationContext的主要实现类：ClassPathXmlApplicationContext:从类路径下加载配置文件FileSystemXmlApplicationContext：从文件系统中加载配置文件ConfigurableApplicationContext扩展与ApplicationContext，新增两个主要方法：refresh()和close(),让ApplicationContext具有启动、刷新和关闭上下文的能力ApplicationContext在初始化上下文时就实例化所有单例的Bean。WebApplicationContext是专门为WEB应用而准备的，它允许从相对于WEB根目录的路径中完成初始化工作从IOC容器中获取BeanBeanFactoryFACTORY_BEAN_PREFIX:StringgetBean(String):ObjectgetBean(String,Class&lt;T&gt;)&lt;T&gt;:TgetBean(Class&lt;T&gt;)&lt;T&gt;:TgetBean(String,Object…):ObjectcontainsBean(String):booleanisSingleton(String):booleanisPrototype(String):booleanisTypeMatch(String,Class&lt;?&gt;):booleangetType(String):Class&lt;?&gt;getAliases(String):String[]具体实例12345678//1.创建Spring 的IOC容器对象 //ApplicationContext 代表IOC容器 //ClassPathXmlApplicationContext：是ApplicationContext 接口的实现类 ApplicationContext act = new ClassPathXmlApplicationContext(\"spring-config.xml\"); //2.从IOC容器中获取Bean实例 HelloWorld helloWorld = (HelloWorld)act.getBean(\"helloWorld\"); //3.调用hello方法 helloWorld.hello();属性注入属性注入即通过setter方法注入Bean的属性值或依赖的对象属性注入使用&lt;property&gt;元素，使用name属性指定Bean的属性名称，value属性或&lt;value&gt;子节点指定属性值属性注入是实际应用中最常见的注入方式123456&lt;!-- 通过全类名的方式来配置bean --&gt;&lt;bean id = \"helloWorld\" class = \"com.spring.helloworld.HelloWorld\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"age\" value=\"22\"&gt;&lt;/property&gt;&lt;/bean&gt;构造方法注入通过构造方法注入Bean的属性值或者依赖的对象，它保证了Bean实例在实例化后就可以使用构造器注入在&lt;constructor-arg&gt;元素里声明属性，&lt;constructor-arg&gt;中没有name属性按顺序配置123456&lt;!-- 通过构造方法来配置bean属性 --&gt;&lt;bean id = \"car\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"ShangHai\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;按index配置123456&lt;!-- 通过构造器注入属性值可以指定参数的位置 --&gt;&lt;bean id = \"car\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\" index = \"0\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\" index = \"2\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"ShangHai\" index = \"1\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;按type配置123456&lt;!-- 通过构造器注入属性值可以指定参数的类型 --&gt;&lt;bean id = \"car\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\" type = \"long\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"ShangHai\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;提示: 通过构造器注入参数的类型和位置可以混合使用字面值字面值：可用字符串表示的值，可以通过&lt;value&gt;元素标签或value属性进行注入基本数据类型及其封装类，String等类型都可以采用字面值注入的方式若字面值中包含特殊字符，可用使用&lt;![CDATA[]]&gt;把字面值包裹起来实例：123456789&lt;!-- 通过构造器注入属性值可以指定参数的位置和类型 --&gt;&lt;bean id = \"car2\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\" index = \"0\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\" index = \"2\"&gt;&lt;/constructor-arg&gt; &lt;!-- 如果字面值包含特殊字符可以用&lt;![CDATA[ ]]&gt;包裹起来 --&gt; &lt;constructor-arg type = \"java.lang.String\"&gt; &lt;value&gt;&lt;![CDATA[&lt;ShangHai&gt;]]&gt;&lt;/value&gt; &lt;/constructor-arg&gt;&lt;/bean&gt;输出结果：&lt;ShangHai&gt;引用其它Bean组成应用程序的Bean经常需要相互协作以完成应用程序的功能，要使Bean能够相互访问，就必须在Bean配置文件中指定对Bean的引用在Bean的配置文件中，可用通过&lt;ref&gt;元素或ref属性为Bean的属性或构造器参数指定对Bean的引用也可以在属性或构造器里包含Bean的声明,这样的Bean称为内部Bean外部Bean实例：12345&lt;!-- 通过方法注入属性值 --&gt;&lt;bean id = \"person\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"Car\" ref = \"car\"&gt;&lt;/property&gt;&lt;/bean&gt;内部Bean实例：123456789101112&lt;!-- 通过方法注入属性值 --&gt;&lt;bean id = \"person\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"Car\"&gt; &lt;!-- 通过构造器注入属性值可以指定参数的类型 --&gt; &lt;bean id = \"car\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\" type = \"long\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"ShangHai\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;/property&gt;&lt;/bean&gt;null值和级联属性可以使用专用的&lt;null/&gt;元素标签为Bean的字符串或其它对象类型的属性注入null值和Struts、Hiberante等框架一样，Spring支持级联属性的配置。null值注入实例:1234567&lt;!-- 通过构造方法来配置bean属性 --&gt;&lt;bean id = \"car3\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\"&gt;&lt;/constructor-arg&gt; &lt;!-- 注入null值 --&gt; &lt;constructor-arg &gt;&lt;value&gt;&lt;null/&gt;&lt;/value&gt;&lt;/constructor-arg&gt; &lt;constructor-arg &gt;&lt;value&gt;&lt;null/&gt;&lt;/value&gt;&lt;/constructor-arg&gt;&lt;/bean&gt;级联属性的配置:1234567&lt;!-- 通过方法注入属性值 --&gt;&lt;bean id = \"person\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"Car\" ref = \"car\"&gt;&lt;/property&gt; &lt;!-- 给级联属性赋值,注意：属性需要先初始化后才可以给级联属性赋值，否则会发生异常，和Struts2不同 --&gt; &lt;property name=\"Car.corp\" value = \"50000\"&gt;&lt;/property&gt;&lt;/bean&gt;集合属性在Spring中可以通过一组内置的XML标签（例如：&lt;list&gt;,&lt;set&gt;或&lt;map&gt;）来配置集合属性配置java.util.List类型的属性，需要指定&lt;list&gt;标签，在标签里包含一些元素，这些标签可以通过&lt;value&gt;指定简单的常量值，通过&lt;ref&gt;指定对其他Bean的引用，通过&lt;bean&gt;指定内置Bean定义。通过&lt;null/&gt;指定空元素，设置可以内嵌其他集合数组的定义和List一样，都使用&lt;list&gt;配置java.util.Set需要使用&lt;set&gt;标签，定义元素的方法与List一样。Java.util.Map通过&lt;map&gt;标签定义，&lt;map&gt;标签里可以使用多个&lt;entry&gt;作为子标签，每个条目包含一个键和一个值。必须在&lt;key&gt;标签里定义键因为键和值的类型没有限制，所以可以自由地为他们指定&lt;value&gt;,&lt;ref&gt;,&lt;bean&gt;或&lt;null&gt;元素。可以将Map的键和值作为&lt;entry&gt;的属性定义：简单常量使用key和value来定义；Bean引用通过key-ref和value-ref属性定义使用&lt;props&gt;定义java.util.Properties,该标签使用多个&lt;prop&gt;作为子标签，每个&lt;prop&gt;标签必须定义key属性.List实例：123456789101112131415161718&lt;!-- 通过方法注入属性值 --&gt;&lt;bean id = \"person\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"Cars\" &gt; &lt;!-- 使用list节点为List类型的属性赋值 --&gt; &lt;list&gt; &lt;ref bean = \"car2\" /&gt; &lt;ref bean = \"car3\" /&gt; &lt;!-- 通过Bean直接指定 --&gt; &lt;bean id = \"car\" class = \"com.spring.helloworld.Car\"&gt; &lt;constructor-arg value = \"Audi\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"30000\" type = \"long\"&gt;&lt;/constructor-arg&gt; &lt;constructor-arg value = \"ShangHai\" type = \"java.lang.String\"&gt;&lt;/constructor-arg&gt; &lt;/bean&gt; &lt;/list&gt; &lt;/property&gt; &lt;/bean&gt;Map实例：123456789101112&lt;!-- 配置Map属性值 --&gt;&lt;bean id = \"Person\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name = \"name\" value = \"Rose\"&gt;&lt;/property&gt; &lt;property name = \"age\" value = \"28\"&gt;&lt;/property&gt; &lt;property name = \"Cars\"&gt; &lt;!-- 使用 map 节点及map的entry子节点配置 Map --&gt; &lt;map&gt; &lt;entry key = \"AA\" value-ref = \"car3\"&gt;&lt;/entry&gt; &lt;entry key = \"BB\" value-ref = \"car2\"&gt;&lt;/entry&gt; &lt;/map&gt; &lt;/property&gt;&lt;/bean&gt;Properties实例：123456789101112&lt;!-- 配置Properties 属性值 --&gt;&lt;bean id = \"dataSource\" calss = \"com.spring.hellowrld.dataSource\"&gt; &lt;property name = \"properties\"&gt; &lt;!-- 使用 props 和 prop 子节点来为 Properties 属性赋值 --&gt; &lt;props&gt; &lt;prop key = \"user\"&gt;root&lt;/prop&gt; &lt;prop key = \"password\"&gt;1234&lt;/prop&gt; &lt;prop key = \"jdbcUrl\"&gt;jdbc:mysql:///test&lt;/prop&gt; &lt;prop key = \"driverClass\"&gt;com.mysql.jdbc.Driver&lt;/prop&gt; &lt;/props&gt; &lt;/property&gt;&lt;/bean&gt;使用utility scheme定义集合使用基本的集合标签定义集合时，不能将集合作为独立的Bean定义，导致其他Bean无法引用该集合，所以无法在不同Bean之间共享集合。可以使用util schema里的集合标签定义独立的集合Bean，需要注意的事，必须在&lt;beans&gt;根元素里添加退了 schema 定义。配置单例集合Bean:12345678910111213&lt;!-- 配置单例的集合Bean，以供多个bean进行引用，需要导入util命名空间 --&gt;&lt;util:list id = \"cars\"&gt; &lt;ref bean = \"car3\" /&gt; &lt;ref bean = \"car2\"&gt;&lt;/util:list&gt;&lt;bean id = \"Person2\" calss = \"com.spring.hellowrld.person\"&gt; &lt;property name = \"name\" value = \"Tom\"&gt;&lt;/property&gt; &lt;property name = \"age\" value = \"22\"&gt;&lt;/property&gt; &lt;!-- 被引用 --&gt; &lt;property name = \"Cars\" ref = \"cars\"&gt; &lt;/property&gt;&lt;/bean&gt;使用P命名空间为了简化XML文件的配置，越来越多的XML的XML文件采用属性而飞子元素配置信息。Spring从2.5版本开始引入了一个新的p命名空间，可以通过&lt;bean&gt;元素属性的方式配置Bean的属性。使用p命名空间后，基于XML的配置方式将进一步简化。123&lt;!-- 通过p命名空间为bean的属性赋值，需要先导入 p 命名空间,相对于传统的配置更加的简洁 --&gt;&lt;bean id = \"person3\" class = \"com.spring.hellowrld.person\" p:age = \"30\" p:name = \"Queen\" p:car-ref=\"cars\"&gt;&lt;/bean&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Spring的HelloWorld(使用Idea)","slug":"Spring的HelloWorld（使用Idea）","date":"2019-02-22T11:48:04.000Z","updated":"2019-05-04T13:10:56.558Z","comments":true,"path":"Spring的HelloWorld（使用Idea）.html","link":"","permalink":"https://me.obey.fun/Spring的HelloWorld（使用Idea）.html","excerpt":"","text":"创建Spring项目我们在idea中创建一个Spring项目，具体如下：勾选Spring选择好后点击Next选择项目路径以及项目名（自动下载所需jar包）简单的IOC（反转控制）我们在src目录下新建com.Test包，并创建一个HelloWorld类，实现一个简单的自我介绍功能，代码如下：12345678910111213141516171819202122232425package com.Test;public class HelloWorld &#123; private String name; private int age; public void setName(String name) &#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setAge(int age) &#123; this.age = age; &#125; public int getAge() &#123; return age; &#125; public void hello()&#123; System.out.println(\"我是\"+name+\",今年\"+age+\"岁啦\"); &#125;&#125;Bean的配置接下来我们配置Spring-config.xml文件1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\"&gt; &lt;!-- 配置bean class：bean的全类名，通过反射的方式在IOC容器中创建Bean，所以要求Bean中必须有无参数的构造器 id:标识容器中的bean。id唯一 --&gt; &lt;bean id=\"hello\" class=\"com.Test.HelloWorld\"&gt; &lt;property name=\"name\" value=\"HuiProgramer\"&gt;&lt;/property&gt; &lt;property name=\"age\" value=\"22\"&gt;&lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt;注意：这里使用的是属性注入，通过getxx(),setxx()方法。解析：name为setxx()方法的xx，value为setxx()方法里面的行参。运行效果这里我们再新建一个类Main来运行看效果：123456789101112131415161718package com.Test;import org.springframework.context.ApplicationContext;import org.springframework.context.support.ClassPathXmlApplicationContext;public class Main &#123; public static void main(String[] args)&#123; //1.创建Spring 的IOC容器对象 //ApplicationContext 代表IOC容器 //ClassPathXmlApplicationContext：是ApplicationContext 接口的实现类 ApplicationContext act = new ClassPathXmlApplicationContext(\"spring-config.xml\"); //2.从IOC容器中获取Bean实例 HelloWorld helloWorld = (HelloWorld)act.getBean(\"hello\"); //3.调用hello方法 helloWorld.hello(); &#125;&#125;&#125;运行后的结果：","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}],"tags":[{"name":"SSM","slug":"SSM","permalink":"https://me.obey.fun/tags/SSM/"},{"name":"SSH","slug":"SSH","permalink":"https://me.obey.fun/tags/SSH/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"},{"name":"Spring","slug":"后端/Java/Spring","permalink":"https://me.obey.fun/categories/后端/Java/Spring/"}]},{"title":"Java学习路线图","slug":"Java学习路线图","date":"2019-01-06T08:33:58.000Z","updated":"2019-10-28T05:24:25.422Z","comments":true,"path":"Java学习路线图.html","link":"","permalink":"https://me.obey.fun/Java学习路线图.html","excerpt":"","text":"前言本文为转载文章，想要详细了解请到文章末尾查看 原文地址JavaJava是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 。Java具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 。Java学习路线图如何学习JavaJava基础Java 是一门纯粹的面向对象的编程语言，所以除了基础语法之外，必须得弄懂它的 oop 特性：封装、继承、多态。此外还有泛型、反射的特性，很多框架的技术都依赖它，比如 Spring 核心的 Ioc 和 AOP，都用到了反射，而且 Java 自身的动态代理也是利用反射实现的。此外还有 Java 一些标准库也是非常常见，比如集合、I/O、并发，几乎在 Web 开发中无处不在，也是面试经常会被问到的，所以在自学 Java 后端之前，不妨先打好这些基础，另外还有 Java8 的一些新特性，也要重点关注，比如 Lambda 表达式、集合的 Stream 流操作、全新的 Date API 等等数据库SQL建议学习MySQL在你了解了一些基础语法之后，就可以开始实战演练了，多练习熟练了就可以了。JDBC你需要弄懂 JDBC API 的用法，其实它只是一组规范接口，所有数据库驱动只要实现了 JDBC，那么我们就可以通过标准的 API 调用相应的驱动，完全不用知道驱动是怎么实现的，这就是面向接口编程的好处。Web基础Http 协议可以参考：Http协议JSP你只要了解它其实就是一个 Servlet 就行了，关于它的一些标签用法，我认为可以直接忽略，因为现在互联网几乎没哪间公司还用 JSP，除了一些老旧的项目。现在都是流行前后端分离，单页应用，后端只做 API 接口的时代了，所以时间宝贵，把这些时间重点放在 Servlet 规范上面吧。Tomcat它是一个 Web 容器，我们写的后端项目都要部署到Web容器才能运行，它其实是一个遵循 Http，通过 Socket 通信与客户端进行交互的服务端程序.可以参考：Tomcat结构及处理请求过程Web 主流框架Java Web 框架多如牛毛，等你有一定经验了，你也可以写一个 Web 框架，网上很多说 Spring、Struts2、Hibernate 是 Java 三架马车，我只想说，那是很久远的事情了，我严重不推荐 Struts2、Hibernate，相信我，一开始只需要上手 Spring、SpringMVC、Mybatis 就可以了，特别是 Spring 框架，其实 Spring 家族的框架都是很不错的。但是提醒一点就是，千万不要沉迷于各种框架不能自拔，以会多种用法而沾沾自喜，导致知其然而不知其所以然。Spring核心思想就是 IOC 和 AOP：谈谈对 Spring IOC 的理解Spring 面向切面编程SpringMVC它的思想是全部请求统一用一个 Servlet 去做请求转发与控制，这个 Servlet 叫 DispatcherServlet：SpringMVC 初始化过程SpringMVC 处理请求过程Mybatis它可实现动态拼装 sql，避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集：mybatis 入门教程Mybatis 深入浅出系列Web 框架进阶使用了 SSM 框架后，你会觉得框架也不过这么回事，如果你对 Spring 有过大概了解，你也会产生想写一个「山寨版」Spring 的心思了，一个轻量级 Web 框架主要具备以下功能：可读取用户自定义配置文件，并以此来初始化框架；具备 Bean 容器，管理项目的类的对象生命周期；具备依赖注入，降低类之间的耦合性；具备 AOP 功能，使项目可进行横向编程，可不改变原有代码的情况增加业务逻辑；具备 MVC 框架模式。其实除了 SSM 之外，Web 框架可谓是百家齐放，其中以 Spring 全家桶最为耀眼，在这里我极力推荐两个 Spring 家族框架：SpringBoot 和 SpringCloud。SpringBoot弥补了 Spring 配置上的缺点，再也不用为繁杂的 xml 费劲精力了，堪称是 Java 后端开发的颠覆者，推荐书籍「Java EE 开发的颠覆者：SpringBoot实战」SpringBoot 构建 web 项目SpringBoot 自动化配置源码分析自定义 SpringBoot Starterspring-boot-starter-tutorialSpringCloud一个微服务架构，能够将项目按照业务分成一个个微服务，每个微服务都可独立部署，服务之间互相协调。当一个项目越来越大时，随之而来的是越来越难以维护，此时将项目拆分成若干个微服务、单独维护、单独部署，也可以降低项目不同业务间的耦合度。推荐书籍「Spring Cloud 与 Docker 微服务架构实战」，这本书将 Docker 与微服务完美地结合在一起，堪称完美！Spring Cloud 中文官网史上最简单的 Spring Cloud 教程关于 Spring Cloud 的博客有：SpringCloud微服务架构之服务注册与发现SpringCloud微服务架构之服务消费者SpringCloud微服务架构之断路器SpringCloud微服务架构之服务网关其它技术Redis一个高性能的 key-value 数据库，当有并发量很高的请求时，将数据缓存在 Redis 中，将提高服务器的响应性能，大大减轻数据库的压力。redis 中文官网redis 教程Git世界上最先进的分布式版本控制系统，建议所有初学者从命令行开始使用 Git！Git 官网Git 教程Maven一个用于构建项目的工具，将项目间的依赖通过 xml 完美地组织到一起，可通过编译插件将项目编译成字节码文件。还有类似的 Gradle 也是不错的选择。maven 的 pom.xml 文件详解Linux：至少要求常用的命令会用，能够在 linux 环境下部署项目。Linux 命令大全最全的 SSH 连接远程终端教程Docker简直是项目部署神器啊，来不及解释了，看下面一些 Docker 系列博客，开启 Docker 之旅吧！推荐书籍「Docker 技术入门与实战」，中国首部 Docker 著作！Docker 实战（一）Docker 实战（二）Docker 实战（三）docker-deploy-tutorial原文地址Java学习路线图","categories":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"}],"tags":[{"name":"Java学习路线","slug":"Java学习路线","permalink":"https://me.obey.fun/tags/Java学习路线/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"https://me.obey.fun/categories/后端/"},{"name":"Java","slug":"后端/Java","permalink":"https://me.obey.fun/categories/后端/Java/"}]},{"title":"Git教程（持续更新）","slug":"Git教程","date":"2018-12-24T14:06:36.000Z","updated":"2020-03-23T10:26:01.961Z","comments":true,"path":"Git教程.html","link":"","permalink":"https://me.obey.fun/Git教程.html","excerpt":"","text":"GIT （分布式版本控制系统）简介Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。什么是Git，Git可以用来干嘛？GIt是什么？Git是目前世界上最先进的分布式版本控制系统Git可以用来干嘛？如果你用Microsoft Word写过长篇大论，那你一定有这样的经历：想删除一个段落，又怕将来想恢复找不回来怎么办？有办法，先把当前文件“另存为……”一个新的Word文件，再接着改，改到一定程度，再“另存为……”一个新文件，这样一直改下去，最后你的Word文档就“魂飞魄散”了！过了一周，你想找回被删除的文字，但是已经记不清删除前保存在哪个文件里了，只好一个一个文件去找，真麻烦。看着一堆乱七八糟的文件，想保留最新的一个，然后把其他的删掉，又怕哪天会用上，还不敢删，真郁闷。更要命的是，有些部分需要你的财务同事帮助填写，于是你把文件Copy到U盘里给她（也可能通过Email发送一份给她），然后，你继续修改Word文件。一天后，同事再把Word文件传给你，此时，你必须想想，发给她之后到你收到她的文件期间，你作了哪些改动，得把你的改动和她的部分合并，真困难。于是你想，如果有一个软件，不但能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以，岂不是很方便？这个软件用起来就应该像这个样子，能记录每次文件的改动：版本用户说明日期1张三删除了软件服务条款57/12 10:382张三增加了License人数限制7/12 18:093李四财务部门调整了合同金额7/13 9:514张三延长了免费升级周期7/14 15:17Git与SVN的区别GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。Git 与 SVN 区别点：GIT是分布式的，SVN不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。安装Git最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。Git 各平台安装包下载地址为：http://git-scm.com/downloads在Linux平台安装GitGit 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：各 Linux 系统可以使用其安装包管理工具（apt-get、yum 等）进行安装：Debian/UbuntuDebian/Ubuntu Git 安装命令为：1234567$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\ libz-dev libssl-dev$ apt-get install git$ git --versiongit version 1.8.1.2Centos/RedHat如果你使用的系统是 Centos/RedHat 安装命令为：1234567$ yum install curl-devel expat-devel gettext-devel \\ openssl-devel zlib-devel$ yum -y install git-core$ git --versiongit version 1.7.1在Mac OS X上安装Git如果你正在使用Mac做开发，有两种安装Git的方法。一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：http://brew.sh/ 。第二种方法更简单，也是推荐的方法，就是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。在Windows上安装Git在Windows上使用Git，可以从Git官网直接下载安装程序，（网速慢的同学请移步国内镜像），然后按默认选项安装即可。安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！Git配置Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件。~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\\Documents and Settings\\$USER。此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。用户信息配置个人的用户名称和电子邮件地址：12$ git config --global user.name \"Your Name\"$ git config --global user.email \"email@example.com\"因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。注意: 用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。查看配置信息要检查已有的配置信息，可以使用 git config –list 命令：1234$ git config --listcredential.helper=manageruser.name=ProgramerHuiuser.email=1712817197@qq.comGit工作流程一般工作流程如下：克隆 Git 资源作为工作目录。在克隆的资源上添加或修改文件。如果其他人修改了，你可以更新资源。在提交前查看修改。提交修改。在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。Git工作区、暂存区和版本库基本概念工作区：就是你在电脑里能看到的目录。暂存区：英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。当执行 “git rm –cached“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。当执行 “git checkout .” 或者 “git checkout –“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。当执行 “git checkout HEAD .” 或者 “git checkout HEAD“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。Git创建版本库(仓库)什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录：12345$ pwd/c/Users/Administrator$ cd E:$ mkdir Git$ cd Gitpwd命令用于显示当前目录，cd命令用于切换目录，mkdir用于创建文件夹，在我的Windows上，这个仓库位于E:/Git.注意：文件夹应避免使用中文，防止乱码。让文件夹成为真正的仓库上面步骤只是创建了一个文件夹，严格意义上并不算是一个Git版本库，so，现在，我们让这个文件夹变成一个真正的仓库。输入git init命令把这个目录变成Git可管理的仓库12$ git initInitialized empty Git repository in E:/Git/.git/瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。把文件添加到版本库首先这里再明确一下，所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件。建议：编辑文本最好使用Notepad++代替记事本，因为微软自带记事本会在每个文件开头添加0xefbbbf（十六进制）的字符。现在，我们编写一个readme.txt文件，内容如下:1Hello,Git!注意:文件应该放在Git文件夹里，因为这是一个Git仓库，放到其他地方Git会找不到这个文件。Git add通过git add告诉Git，把文件添加到仓库（暂存区）：1$ git add readme.txt执行上面的命令，没有任何显示,代表执行成功。Git commit通过git commit告诉Git，把文件提交到仓库（版本库）：1234$ git commit -m \"wrote a readme file\"[master (root-commit) eacdf4e] wrote a readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt其中：git commit -m &quot;wrote a readme file&quot;中的-m &quot;xxx&quot;代表本次提交的说明。例如：$ git commit -m &quot;本次提交解决了若干个BUG&quot;当然,提交说明也可以带表情，具体表情参考Github表情提交指南。Git 基本操作获取和创建项目命令git init此命令在创建版本库的时候就讲过，git init命令就是将一个文件夹初始化为一个Git仓库，创建成功后在该文件夹下会生成一个.git的文件夹.例如：12$ git initInitialized empty Git repository in E:/Git/.git/现在你能看见该仓库中的.git文件了。12$ ls -a. .. .git注意：这里的ls -a中的ls就是列表，清单的意思，在终端就是显示当前目录的所有文件，而-a的意思是显示隐藏文件。git clone使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。1$ git clone [url]url是你想克隆（复制）的网上仓库。例如：我们克隆Github上的项目1234567$ git clone git@github.com:HuiProgramer/HTML5_Learning.gitCloning into 'HTML5_Learning'...remote: Counting objects: 26, done.remote: Total 26 (delta 0), reused 0 (delta 0), pack-reused 26Receiving objects: 100% (26/26), done.Resolving deltas: 100% (5/5), done.Checking connectivity... done.克隆完成后，在当前目录下会生成一个 HTML5_Learning 目录：1234$ cd HTML5_Learning&amp; lsCSS/ index.html logo.png Screen1.pngimg/ JavaScript/ README.MD Screen2.png至此，一个Github上的项目就克隆完成了，你可以尝试修改或者查看。常用命令git add此命令前面就讲过了，这里再举一个例子，这次我们往暂存区添加多个文件：123456789101112131415161718$ touch hello.py hello.c hello.java hello.html$ lshello.py hello.c hello.java hello.html$ git add hello.c hello.java hello.html hello.py$ git statusOn branch masterNo commits yetChanges to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: hello.c new file: hello.html new file: hello.java new file: hello.py我们分别向暂存区提交了多个语言hello world程序源文件，touch代表我们新建这几个文件，git status的意思是查看当前暂存区的状态。扩展： 通过git add .可以将该文件夹的东西都添加到暂存区。git statusgit status用于查看在你上次提交之后是否有修改，便于查看当前暂存区的状态，通过增加-s参数可以获得简短的输出结果，如果没有加该参数将会得到详细的输出。例如：123456789101112131415161718$ git statusOn branch masterNo commits yetChanges to be committed: (use \"git rm --cached &lt;file&gt;...\" to unstage) new file: hello.c new file: hello.html new file: hello.java new file: hello.py$ git status -sA hello.cA hello.htmlA hello.javaA hello.py补充说明：A的意思是文件添加到了暂存区，而AM的意思是文件添加到暂存区后在工作区又有所改动。git diff执行 git diff 来查看执行 git status 的结果的详细信息。git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有如下几个主要的应用场景。尚未缓存的改动（工作区）：git diff查看已缓存的改动（暂存区）： git diff –cached查看已缓存的与未缓存的所有改动（工作区与暂存区）：git diff HEAD显示摘要而非整个 diff：git diff –stat例如我们利用notepad++编辑器修改hello.c文件内容如下：12345#include&lt;stdio.h&gt;int main(void)&#123; printf(\"hello,world\"); return 0;&#125;现在我们使用git diff file命令来看看结果：123456789101112$ git diff hello.cdiff --git a/hello.c b/hello.cindex e69de29..fb0c3bd 100644--- a/hello.c+++ b/hello.c@@ -0,0 +1,5 @@+#include&lt;stdio.h&gt;+int main(void)&#123;+ printf(\"hello,world\");+ return 0;+&#125;\\ No newline at end of file果然，git将整个文件的变化都列了出来。扩展：diff就是单词different的缩写，其原意是“区别，不同”。git commit此命令在讲述创建版本库的时候就介绍过，主要用于将暂存区的东西提交到版本库中。例如：12345678910111213$ git status -sAM hello.cA hello.htmlA hello.javaA hello.py$ git commit -m\"第一次提交\"[master (root-commit) ac81931] 第一次提交 4 files changed, 0 insertions(+), 0 deletions(-) create mode 100644 hello.c create mode 100644 hello.html create mode 100644 hello.java create mode 100644 hello.py我们将暂存区的内容提交到版本库后再次执行git status命令123456789$ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: hello.cno changes added to commit (use \"git add\" and/or \"git commit -a\")此时，我们发现，暂存区的内容已经全部提交到版本库中，只有一条工作区内容被修改的记录。git reset HEADgit reset HEAD file 命令用于取消已缓存(暂存区)的内容。可以理解为：撤销暂存区的修改。可单个撤销，也可以全部撤销。这里，我们先提交hello.c源文件123456789101112131415161718$ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: hello.cno changes added to commit (use \"git add\" and/or \"git commit -a\")$ git add hello.c$ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) modified: hello.c好的，现在hello.c源文件已经进入了暂存区了，那么，如果我不想提交该内容，该怎么解决呢？其实，通过git reset HEAD命令是可以丢弃掉暂存区里的内容的。现在，我们来试试吧！12345678910111213$ git reset HEADUnstaged changes after reset:M hello.c$ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: hello.cno changes added to commit (use \"git add\" and/or \"git commit -a\")果然，暂存区的内容被撤销掉了。要点：git reset HEAD filename实现单个或多个文件在暂存区中撤销，git reset HEAD实现整个暂存区的撤销。注意：如果你提交暂存区后，在工作区又进行了修改，git reset HEAD命令并不会让你在工作区的内容回退到上一次提交的数据，该只是单纯的丢弃掉暂存区里的内容。git checkout – filegit checkout --file命令用于取消未缓存的内容（工作区）。可以理解为：丢弃工作区的修改，回到上次修改的样子。那么，我们现在来试试1234567891011121314151617181920$ git statusOn branch masterChanges not staged for commit: (use \"git add &lt;file&gt;...\" to update what will be committed) (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory) modified: hello.cno changes added to commit (use \"git add\" and/or \"git commit -a\")$ cat hello.c#include&lt;stdio.h&gt;int main(void)&#123; printf(\"hello,world\"); return 0;&#125;$ git checkout -- hello.c$ cat hello.c在这里，我们使用git status命令可以看到该文件只是在工作区进行了修改，接着我们使用了cat命令查看了文件内容，发现里面是C语言源代码，然后我们使用了git checkout -- hello.c命令丢弃了本次修改。等我们再次使用cat命令查看hello.c内容时发现里面已经没有内容了，这是为什么呢？原来这里的git checkout -- &lt;file&gt;命令的结果分为了两种情况:当文件在工作区修改后还没有被添加到暂存区，此时使用该命令，会使工作区回到和版本库一模一样的状态。当文件在工作区修改后被添加到了暂存区，此时使用该命令，会使工作区回到把文件添加到暂存区后的状态那么，这里就是第一种状态了，因为我们并没有提交到暂存区，而版本库的hello.c里面恰恰是没有内容的。（因为当时并没有写内容）git rm如果只是简单地从工作目录中手工删除文件，运行 git status 时就会在 Changes not staged for commit 的提示。要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除，然后提交。可以用以下命令完成此项工作1$ rm &lt;file&gt;如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f1$ rm -f &lt;file&gt;如果把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可1$ git rm --cached &lt;file&gt;我们先在hello.py增加如下代码1print(\"hello\")然后，我们将文件添加到暂存区后，在暂存区中删除hello.py文件12345678910111213141516171819202122$ git add hello.py$ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) modified: hello.py$ git rm --cached hello.pyrm 'hello.py'$ git statusOn branch masterChanges to be committed: (use \"git reset HEAD &lt;file&gt;...\" to unstage) deleted: hello.pyUntracked files: (use \"git add &lt;file&gt;...\" to include in what will be committed) hello.py可以看到，我们在暂存区移除了该文件，现在，我们将工作区的文件也移除掉。1234$ rm hello.pyrm 'hello.py'$ lshello.c hello.html hello.java至此，基本命令到此结束。Git查看提交历史git log在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。123456$ git logcommit ac81931794f4e232398796f5d4e09be155fc5bc2 (master)Author: ProgramerHui &lt;1712817197@qq.com&gt;Date: Fri Dec 28 19:17:51 2018 +0800 第一次提交git log –onelinegit log --oneline 命令用来查看历史记录的简洁的版本。12$ git log --onelineac81931 (master) 第一次提交git log –graphgit log --graph 命令，用于查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：123456$ git log --graph* commit ac81931794f4e232398796f5d4e09be155fc5bc2 (master) Author: ProgramerHui &lt;1712817197@qq.com&gt; Date: Fri Dec 28 19:17:51 2018 +0800 第一次提交git log –authorgit log --author命令用于查看指定用户的提交日志。示例如下：123456$ git log --author=ProgramerHuicommit ac81931794f4e232398796f5d4e09be155fc5bc2 (master)Author: ProgramerHui &lt;1712817197@qq.com&gt;Date: Fri Dec 28 19:17:51 2018 +0800 第一次提交Git版本回退早在前面就说过Git能干什么的特性.你可以理解为Git就是一个时空穿梭机，能够回退版本和前进版本。现在，我们来修改一下readme.txt的内容。1234567$ cat readme.txthello,Git$ echo \"HuiProgramer is handsome!\" &gt;&gt; readme.txt$ cat readme.txtHuiProgramer is handsome!扩展：echo &quot; &quot; &gt;&gt; file是一个批处理命令，用于清空文件内容后，将” “里的内容写入到文件中。我们尝试提交一下123456$ git add readme.txt$ git commit -m\"handsome\"[master dd18d87] handsome 1 file changed, 1 insertion(+) create mode 100644 readme.txt我们现在来回忆一下我们一共提交了哪几个版本的readme.txt文件。版本一：hello,Git版本二：HuiProgramer is handsome记不住也没事，我们可以通过git log命令来查看：123456789101112$ git logcommit dd18d87073e5d9a593dbfe3a89072e9f785431ad (HEAD -&gt; master)Author: ProgramerHui &lt;1712817197@qq.com&gt;Date: Sun Jan 6 12:07:01 2019 +0800 handsomecommit ac81931794f4e232398796f5d4e09be155fc5bc2Author: ProgramerHui &lt;1712817197@qq.com&gt;Date: Fri Dec 28 19:17:51 2018 +0800 wrote a readme file可以看到第一次提交就是开始介绍GIt仓库时写的readme.txt,里面的内容是hello,Git.而最近一次提交就是我们重新修改了readme.txt后提交的，里面的内容是HuiProgramer is handsome(表脸).那么，如果我想要回到上一个版本该怎么办呢？其实很简单只需要执行git reset --hard HEAD^就行了，其中^代表上一个版本，^^代表上上个版本，以此类推。12$ git reset --hard HEAD^HEAD is now at ac81931 wrote a readme fileLook，我们已经回到了上一个版本了，现在我们打开readme.txt文件看看。hello,Git哇，果然是这样，但我又如何回去呢？就像我们现在坐着时空穿梭机回到了过去，应该怎么回到现在呢？其实很简单，我们可以通过上次执行git log命令拿到的commit后面的版本号再次穿梭就可以回来了。12$ git reset --hard dd18HEAD is now at dd18d87 handsome注意：版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了。再次查看readme.txt的内容HuiProgramer is handsome嗯，不错，内容全回来了，还是一如既往的表脸。扩展：假如我关闭了git bash这个终端，然后又回退了版本，输入git log又不显示，该怎么办呢？其实很简单，你只要输入git reflog命令就能再次看到你的提交记录了。1234567891011121314151617181920$ git reflogdd18d87 (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to dd18ac81931 HEAD@&#123;1&#125;: reset: moving to HEAD^dd18d87 (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: handsomeac81931 HEAD@&#123;3&#125;: checkout: moving from Python to masteraf26cd8 (Python) HEAD@&#123;4&#125;: checkout: moving from master to Pythonac81931 HEAD@&#123;5&#125;: checkout: moving from Python to masteraf26cd8 (Python) HEAD@&#123;6&#125;: commit: test branchac81931 HEAD@&#123;7&#125;: checkout: moving from master to Pythonac81931 HEAD@&#123;8&#125;: checkout: moving from Python to masterac81931 HEAD@&#123;9&#125;: checkout: moving from master to Pythonac81931 HEAD@&#123;10&#125;: checkout: moving from Python to masterac81931 HEAD@&#123;11&#125;: checkout: moving from master to Pythonac81931 HEAD@&#123;12&#125;: checkout: moving from Python to masterac81931 HEAD@&#123;13&#125;: checkout: moving from master to Pythonac81931 HEAD@&#123;14&#125;: reset: moving to HEADac81931 HEAD@&#123;15&#125;: reset: moving to HEADac81931 HEAD@&#123;16&#125;: reset: moving to HEAD^5a56f73 HEAD@&#123;17&#125;: commit: hello worldac81931 HEAD@&#123;18&#125;: commit (initial): wrote a readme fileGit与Github什么是GithubGitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。简单来说就是一个网上的仓库，而Git就是本地的仓库。拥有自己的Github注册Github账号点击这里进行注册。注册完成后，登录…创建自己的项目（仓库/版本库）点击+号进行创建填写项目名字，点击完成即可。完成后，会得到项目的提交地址。创建SSH Key打开Git Bash终端，输入：1$ ssh-keygen -t rsa -C \"youremail@example.com\"你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。绑定SSH Key进入Github,点击头像，点击Settings。点击SSH and GPG Keys点击New SSH key可以看到此页面Title可以随便取一个，Key可以去C:\\Users\\Administrator\\.ssh下找到一个id_rsa.pub的文件，双击打开后复制里面的全部内容粘贴到Key下的框框里，然后点击Add SSH Key.创建完成后就能看到这样的页面…提交项目到Githubgit remote通过git remote add origin git@github.com:YourName/RepositoryName.git即可建立一个与当前分支关联的提交名字。1$ git remote add Golang git@github.com:HuiProgramer/Golang_Learning.git解析：YourName为你的Github账户名,RepositoryName为你创建的项目名。注意：这里的origin可以任你更改，前提你得记住，后面提交要用到。git push通过git push -u origin master命令可将本地项目推送到Github的仓库中。12345678910$ git push -u Golang masterCounting objects: 9, done.Delta compression using up to 2 threads.Compressing objects: 100% (6/6), done.Writing objects: 100% (9/9), 916 bytes | 152.00 KiB/s, done.Total 9 (delta 1), reused 0 (delta 0)remote: Resolving deltas: 100% (1/1), done.To github.com:HuiProgramer/Golang_Learning.git * [new branch] master -&gt; masterBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;Golang&apos;.Look,我们已经成功提交本地版本库到网上仓库了。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。现在，我们打开我们的远程仓库看看，是否提交成功。嗯，不错，成功了，以后就这样提交。git pull通过git pull origin master可将网上仓库拉取到本地来完成同步。1234$ git pull Golang masterFrom github.com:HuiProgramer/Golang_Learning * branch master -&gt; FETCH_HEADAlready up to date.现在就会看到，本地项目和网上仓库一模一样了。Git分支管理几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。分支的创建和切换创建分支命令：1$ git branch (branchname)切换分支命令：1git checkout (branchname)例如：12345$ git branch Python$ git checkout PythonSwitched to branch 'Python'D hello.py扩展：git checkout -b (branchname)命令可以创建并切换新分支，从而实现在该分支中的操作。","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"版本控制系统","slug":"前端/版本控制系统","permalink":"https://me.obey.fun/categories/前端/版本控制系统/"},{"name":"Git","slug":"前端/版本控制系统/Git","permalink":"https://me.obey.fun/categories/前端/版本控制系统/Git/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://me.obey.fun/tags/Github/"},{"name":"Git","slug":"Git","permalink":"https://me.obey.fun/tags/Git/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"},{"name":"版本控制系统","slug":"前端/版本控制系统","permalink":"https://me.obey.fun/categories/前端/版本控制系统/"},{"name":"Git","slug":"前端/版本控制系统/Git","permalink":"https://me.obey.fun/categories/前端/版本控制系统/Git/"}]},{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2018-12-22T13:59:58.000Z","updated":"2019-05-04T12:46:36.865Z","comments":true,"path":"Markdown基本语法.html","link":"","permalink":"https://me.obey.fun/Markdown基本语法.html","excerpt":"","text":"MarkdownMarkdown介绍Markdown是一种轻量级的标记语言，使用普通的文本编辑器，通过简单的标记语法，就可以实现漂亮的排版，被越来越多的写作爱好者、程序员所使用。Markdown自成格式，不依赖任何编辑器，且易于传播，其语法十分简单，通过几分钟的简单学习，就可以实现基本的排版，然后专注于码字。用途Markdown的语法简洁明了、学习容易，而且功能比纯文本更强，因此有很多人用它写博客。世界上最流行的博客平台WordPress和大型CMS如Joomla、Drupal都能很好的支持Markdown。完全采用Markdown编辑器的博客平台有Ghost和Typecho。用于编写说明文档，并且以“README.MD”的文件名保存在软件的目录下面。除此之外，由于我们有了RStudio这样的神级编辑器，我们还可以快速将Markdown转化为演讲PPT、Word产品文档、LaTex论文甚至是用非常少量的代码完成最小可用原型。在数据科学领域，Markdown已经广泛使用，极大地推进了动态可重复性研究的历史进程。常用语法常用语法表格输出后的效果Markdown快捷键加粗**text**Ctrl+B斜体*text*Ctrl+I链接[title](http://)Ctrl+L代码块`code`Ctrl+k图片![alt](http://)Ctrl+G有序列表1. itemCtrl+Shift+O无序列表* itemCtrl+U块级引用> quoteCtrl+Q一级标题# HeadingCtrl+1二级标题## HeadingCtrl+2标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。注意：每个#后面必须跟一个空格示例：123#### 这是四级标题##### 这是五级标题###### 这是六级标题效果如下：这是四级标题这是五级标题这是六级标题字体加粗要加粗的字体左右分别用两个*号包起来斜体要倾斜的文字左右分别用一个*号包起来斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来删除线要加删除线的文字左右分别用两个~~号包起来代码示例:1234**这是加粗的文字***这是倾斜的文字****这是斜体加粗的文字***~~这是加删除线的文字~~有序无序列表有序列表通过数字1234567…后面加一个.和空格实现。无序列表通过*,-,+其中之一加一个空格来实现无序列表。代码示例：1234567891011121. 我是有序列表* 我是由*号生成无序列表* 我是由*号生成无序列表* 我是由*号生成无序列表2. 我是有序列表- 我是由-号生成无序列表- 我是由-号生成无序列表- 我是由-号生成无序列表3. 我是有序列表+ 我是由+号生成无序列表+ 我是由+号生成无序列表+ 我是由+号生成无序列表效果如下：我是有序列表我是由*号生成无序列表我是由*号生成无序列表我是由*号生成无序列表我是有序列表我是由-号生成无序列表我是由-号生成无序列表我是由-号生成无序列表我是有序列表我是由+号生成无序列表我是由+号生成无序列表我是由+号生成无序列表块级引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…示例：123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;这是引用的内容效果如下：这是引用的内容这是引用的内容这是引用的内容代码块单行代码块通过`code`来展示单行代码块内容示例：`I’m single code.`效果如下：I&#39;m single code.多行代码块通过```code```来展示多行代码块内容示例：```Python(指定语言)def example():&emsp;&emsp;for i in range(10):&emsp;&emsp;&emsp;&emsp;print(“hello”)```效果如下：123def example(): for i in range(10): print(\"hello\")图片语法：![图片alt](图片地址 ‘’图片title’’)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加示例：1![头像](https://ws3.sinaimg.cn/large/006MOU0zgy1g19n0u9anzj30jg0kbabt.jpg \"头像icon\")效果如下：链接语法：[超链接名](超链接地址 “超链接title”)title可加可不加示例：12[baidu](http://baidu.com)[博客](https://www.52share.online)效果如下：baidu博客表格语法：123456:---:|:---:|文字居中显示:---|:---文字靠左显示---:|---:文字靠右显示示例：123456789101112131415161718示例1：表格文字居中|表格文字居中|表格文字居中:---:|:---:|:---:文字居中|文字居中|文字居中文字居中|文字居中|文字居中示例2：表格文字靠左|表格文字靠左|表格文字靠左:---|:---|:---文字靠左|文字靠左|文字靠左文字靠左|文字靠左|文字靠左示例3：表格文字靠右|表格文字靠右|表格文字靠右---:|---:|---:文字靠右|文字靠右|文字靠右文字靠右|文字靠右|文字靠右示例1：表格文字居中表格文字居中表格文字居中文字居中文字居中文字居中文字居中文字居中文字居中示例2：表格文字靠左表格文字靠左表格文字靠左文字靠左文字靠左文字靠左文字靠左文字靠左文字靠左示例3：表格文字靠右表格文字靠右表格文字靠右文字靠右文字靠右文字靠右文字靠右文字靠右文字靠右","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://me.obey.fun/tags/Markdown/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"}]},{"title":"长难句分析（特殊结构的长难句）","slug":"长难句分析（特殊结构的长难句）","date":"2018-12-16T13:31:10.000Z","updated":"2018-12-16T13:35:51.196Z","comments":true,"path":"长难句分析（特殊结构的长难句）.html","link":"","permalink":"https://me.obey.fun/长难句分析（特殊结构的长难句）.html","excerpt":"","text":"二、特殊结构的长难句分裂结构嵌套结构平行结构特殊结构的长难句：分裂结构There is growing fear among vice-chancellors that this revenue——as well as the cultural, academic and economic benefit international students bring——is being put at risk.(CET-4, 201312 仔细阅读2)There is growing fear among vice-chancellors that this revenue is being put at risk.(CET-4, 201312 仔细阅读2)特殊结构的长难句：嵌套结构Among the government’s most interesting reports is one that estimates what parents spend on their children.(CET-6, 201312 仔细阅读 1)A survey of 439 medical technicians found that 55 percent of technicians who monitor bypass machines acknowledged that they had talked on cellphones during heart surgery.(CET-4,201406 仔细阅读 1)A sunrvey … found &emsp;&emsp;&emsp;&emsp;宾语从句 &emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;&emsp; &emsp;&emsp;定语从句&emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;&emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;定语从句that 55 percent of technicianswho monitor bypass machinesacknowledgedthat they had..特殊结构的长难句：平行结构The English, the Germans, the Dutch and the French were investing in Britain’s former colony.The English,the Germans,the Dutchand the Frenchwere investing in Britain’s former colony.Both areas are critical to producing citizens who can participate effectively in our democratic society, become innovative leaders, and benefit from the spiritual enrichment that teh reflection on the great ideas of mankind over time provides.(CET-4, 201406 仔细阅读 1)Several hours after a meal, people’s hunger levels were predicted not by how much they’d eaten but rather by how much food they’d seen in front of them…(CET-4, 201312 仔细阅读 1)But brains are the superior choice when you want information to change, in interesting and useful ways: to connect up with other facts and ideas, to acquire successive layers of meaning, to steep for a while in your accumulated knowledge and experience…(CET-6, 201406 仔细阅读 1)长难句综合运用indeed, according to surveys, employers have expressed a preference for students who have received a broadly-based education that has taught them to write well, think critically, research creatively and communicate easily.(CET-4, 201406 仔细阅读 1)Cole and Fredrickson found that people who are happy but have little to no sense of meaning in their lives have the same gene expression patterns as people who are responding to and enduring chronic adversity.(CET-6, 201412 长篇阅读)","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"长难句分析（基本结构的长难句）","slug":"长难句分析（基本结构的长难句）","date":"2018-12-15T12:58:51.000Z","updated":"2018-12-15T13:03:30.115Z","comments":true,"path":"长难句分析（基本结构的长难句）.html","link":"","permalink":"https://me.obey.fun/长难句分析（基本结构的长难句）.html","excerpt":"","text":"一、基本结构的长难句断开简化基本结构的长难句&emsp;长难句&emsp;多个句子/多件事&emsp;简单句&emsp;一个句子/一件&emsp;简单句的核心&nbsp;一件事的核心内容断开1 标点&emsp;2 连接词&emsp;&emsp;3 分析主谓简化1 定位谓语动词2 去修饰找核心基本结构的长难句：1. 断开（1）标点（2）连接词：从句开始于连接词，结束于？（3）分析主谓&emsp;1) 标点&emsp;2) 下一个连接词前&emsp;3) 第二个谓语动词前连接词断开，结束于标点But this is a real-life argument before a Superme Court that has a well-earned reputation for looking out for the interests of large corporations.(CET-6,201312 仔细阅读 2)If it has to hire a caregiver for every two children,it can’t really achieve any economics of scale on labor to save money when other expenses go up.(CET-4,201412 仔细阅读 1)More than half of all recent graduates are unemployed or in jobs that do not require a degree, and the amount of student-loan debt carried by households has increased more than five times since 1999.(CET-4,201312 长篇阅读)Imagine the number of teaching jobs that might be eliminated if this could be done for math,economics,chemistry,and so on.(CET-6,201406 长篇阅读)Although it has been nearly 30 years since the first commercial mobile-phone network was launched, advertisers have yet to figure out how to get their messages out to mobile-phone users in a big way.(CET-4,201312 选词填空)连接词断开，结束于第二个谓语动词前Those who stay on for an additional two years can earn a master’s degree that qualifies them as nurse practitioners or clinical nurse spercialists.(CET-4,201312 选词填空)People who score on personality tests as more sympathetic cry more than those who are more rigid or have more self-control.(CET-4,201406 长篇阅读)Though the United States has fewer women in the workforce, American women who choose to be employed are far more likely to work full-time and to hold high-level jobs as managers or professionals.(CET-6,201406 长篇阅读)断开：分析主谓This is the best movie I have seen.The present he gave me was very amazing.Some scientists maintain that the changes we are seeing fall within the range of random variation…(CET-4,201406 选词填空)Some scientists maintain thatthe changes we are seeing fall within the range of random variation…(CET-4,201406 选词填空)When these students encounter a new problem of the same type on a test, they’re able to transfer the knowledge they’ve gathered more effectively than those who were the passive recipients of someone else’s expertise.(CET-6,201312 仔细阅读 1)二、简化：去修饰，留核心修饰成分有：形容词、副词介词短语非谓语动词(doing/done/to do)冠词、数词非限定性定语从句Over the past few months it has been working hard, with the help of media consultants, to play down its cosy reputation in favour of something more academic and serious(CET-6,201412 仔细阅读 2)Printing with moveable type on paper dramatically reduced the cost of producing a book compared with the old-fashioned ones handwritten on vellum, which comes from sheepskin.(CET-4,201406 长篇阅读)A generation ago, female faces were rare and, even today, visitors walking through the first floor of LeConte Hall will see a full corridor of exhibits honoring the many distinguished physicists who made history here,virtually all of them white males.(CET-4,201312 选词填空)基本结构的长难句：断开 + 简化The same dramatic technological changes that have provided marketers with more communications choices have also increased the risk that passionate consumers will voice their opinions in quicker, more visible, and much more damaging ways.The same dramatic technological changes 1 have also increased the risk 2.that have provided marketers with more communications choices.that passionate consumers will voice their opinions in quicker, more visible, and much more damaging ways.","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"特殊用途的句子(虚拟句)","slug":"特殊用途的句子-虚拟句","date":"2018-12-14T14:44:35.000Z","updated":"2018-12-15T13:00:47.598Z","comments":true,"path":"特殊用途的句子-虚拟句.html","link":"","permalink":"https://me.obey.fun/特殊用途的句子-虚拟句.html","excerpt":"","text":"第三章 虚拟1. 什么是虚拟？2. 怎么表示虚拟？3. 虚拟常用于？1. If 虚拟条件句（虚拟语气）&emsp;（1）虚拟条件句（假设现在）&emsp;If 从句主句假设过去&emsp;would假设现在did(were)could/should&emsp;&emsp; + do假设将来&emsp;mightIf I were you, I would do it now.练习：I am not you, so I can’t make the decision.I don’t know his phone number, so I won’t ring him up.He isn’t free at the moment, so he won’t go to the cinema.补充：If I could rearrange the alphabet, I would put U and I together.&emsp;（2）虚拟条件句（假设过去）&emsp;If 从句主句假设过去had donewould + have done假设现在&emsp;could/should假设将来&emsp;mightIf they had won the match, they would have held a party to celebrate.练习：He was not a student, so he couldn’t attend the lecture.He didn’t tell her the answer. She didn’t understand it.You were late, so you didn’t hear what he told us.&emsp; （3）虚拟语气（假设将来）&emsp;If 从句主句假设过去&emsp;would假设现在&emsp;could/should假设将来did(were)were to doshould domight + doIf I were to live my life over again, I would have you as my life.练习：如果我明天有时间，我就会帮他。（明天不太可能有时间）If I had time tomorrow（were to have/should have）,I would help him.总结：&emsp;If 从句主句假设过去had donewould + have done假设现在did(were)could/should + do假设将来did(were)were to doshould domight + doIf 非真实条件句（混合时态的虚拟）&emsp;If 从句主句假设过去&emsp;&emsp;假设现在&emsp;&emsp;假设将来&emsp;&emsp;如果你（过去）嫁给他，你（现在）就会是一个加油站服务员的妻子。If you had married him, you would be the wife of a gas station attendant.省略 If 的虚拟条件句If you had joined us, we would have had more fun.If I were you, I would think it twice.2. 名词性从句的虚拟语气：表示“建议，要求，命令”动词后的宾语从句虚拟从句中用（should）+ doHe suggested that the system should be changed.suggest, advise, propose, recommend, order, ask, demand, insist, require, request……练习：宾语从句的虚拟语气The engineers proposed they (look) at the design again.He insisted that she (send) her sister to a dancing school.The workers demanded they (give) the wages they should get.He ordered they (start) the attack before dawn.The teacher always suggests the students (go) over the text before the best.the professor recommended we (look) for the information in the library.总结：表示 “建议，要求，命令” 的名词性从句He suggested that the system should be changed.His suggestion was that the system should be changed.He gave the suggestion that the system should be changed.This year,it was suggested that the system should be changed.","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"特殊用途的句子(倒装句)","slug":"特殊用途的句子-倒装句","date":"2018-12-13T14:15:08.000Z","updated":"2018-12-13T14:17:58.610Z","comments":true,"path":"特殊用途的句子-倒装句.html","link":"","permalink":"https://me.obey.fun/特殊用途的句子-倒装句.html","excerpt":"","text":"第二章 倒装全部倒装/部分倒装1. 全部倒装：In the mountain lies a castle.Here comes the bus.全部倒装：There be 句型1. There be + n. “有”（客观存在）There is a girl.2. There be + n + 介词短语 “有…在哪里”（客观存在）There is a book on the table.There is no gap between mind and matter.注意：1）be 动词的变化&emsp;&emsp;&emsp;&emsp;&nbsp; There will now be a seven-day wait for jobseeker’s allowance.&emsp;&emsp;&emsp;2）主语的单复数&emsp;&emsp;&emsp;3）There 还可以与情态动词搭配&emsp;&emsp;&emsp;&emsp;&nbsp; There may be more matches in the database.2. 部分倒装：相当于把陈述句变成疑问句三种情况需要倒装（1）否定词位于句首&emsp;not, no, never, hardly, little, scarcely, seldom, not until, not only……（2）only 位于句首（3）虚拟if条件句举例：The poor man had not only been arrested but he had been sent to prison as well.Not only had the poor man been arrested, but he had been sent to prison as well.We can learn English well only in this way.Only in this way can we learn English well.练习：1. You will never know the truth.Never .2. He cares little for my words.Little .3. I had no sooner got the invitation than I refused.No sooner .4. He had hardly had time to settle down when he left the country.Hardly .5. He achieved his goal only by working hard.Only by working hard .6. Natural disasters will reduce, only when we solve the problems of environmental pollution.Only when .","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"特殊用途的句子(强调句)","slug":"特殊用途的句子-强调句","date":"2018-12-12T09:37:35.000Z","updated":"2018-12-12T09:51:39.056Z","comments":true,"path":"特殊用途的句子-强调句.html","link":"","permalink":"https://me.obey.fun/特殊用途的句子-强调句.html","excerpt":"","text":"第一章 强调强调句It is ….. that …..I want to go to America this summer.It is America that I want to go to this summer.补充：强调过去时态：It was …. that …强调人时：It is …. that/who …练习：It is they. not American, who have become anti-intellectual.It is they who have become anti-intellectual.It is … that …写作：Lisa likes cooking at home.We used to have meetings in the cafe.They celebrated the holiday on Nov.11th.Students don’t like too much homework.Men can solve the problems of natural disaster only by controlling the environmental pollution.注意：一个句子的动词和形容词不能强调。","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充(复合句/状语从句)","slug":"简单句的补充-复合句-状语从句","date":"2018-12-10T14:10:39.000Z","updated":"2018-12-16T13:41:29.656Z","comments":true,"path":"简单句的补充-复合句-状语从句.html","link":"","permalink":"https://me.obey.fun/简单句的补充-复合句-状语从句.html","excerpt":"","text":"第三章 状语从句1.状语从句的含义：一个句子作状语，表达描述性的信息。2.状语从句的写法：从属连词 + 完整的陈述句&emsp;从属连词时间状语从句when, while, as, before, after, since, until&emsp;as soon as, no sooner…than地点状语从句where原因状语从句because, since, as结果状语从句so/such…that, so that…目的状语从句so that…,in order that条件状语从句if, unless, as long as让步状语从句although, though, even though, as比较状语从句than, as方式状语从句as地点状语从句Stay where you are.Where there is a will, there is a way.结果状语从句The problem is so complicated that we cannot solve it.It is such a complicated problem that we cannot solve it.让步状语从句Although it is summer, it is very cold.It is summer, but it is very cold.比较状语从句I am as tall as you.I am as tall as you(are).方式状语从句Do it as I told you yesterday.When in Rome, do as Romans do.3.状语从句的时态：时间/条件状语从句中表示将来，要换成一般现在时。如果明天下雨，我们就不去公园。If it rains tomorrow, we will not go for a picnic.I will let him know, when he comes home later.改错练习：The boss will review your work after she will return from vacation next week.(returns)I’ll give you a call on my cell phone as soon as my plane will land .(lands)I don’t like my current job, but I’m going to stay with this company until I will find something better.(find)If it won’t be cold tomorrow. we’ll go to the beach.(isn’t)If it will be cold tomorrow, we will go to a movie.(is)4.状语从句的位置：If it rains tomorrow, we will not go to the park.We will not go to the park, If it rains tomorrow.We, If it rains tomorrow, will not go to the park.练习：He speaks English well indeed, but of course not _ a native speaker.A. as fluent as &emsp;&emsp;&emsp;&emsp;B. more fluent thanC. as fluently as &nbsp;&emsp;&emsp;&emsp;D. much fluently thanThe couple had no sooner got to the station _ the coach left.A. when &emsp;&emsp;B. as &emsp;&emsp;C. until &emsp;&emsp;D. thanMy parents don’t mind what job I do _ I am happy.A. even though &emsp;B. as soon as &emsp;C. as long as &emsp;D. as thoughThe medicine works more effectively _ you drink some hot water after taking it.A. as &emsp;&amp;emspB. until &emsp;&emsp;C. although &emsp;&emsp;D. if__ the police thought he was the most likely one, since they had no exact proof about it,they could not arrest him.A. Although &emsp;B. As long as &emsp;C. If only &emsp;D. As soon asIt just isn’t fair. __ I was working as a waiter last month, my friends were lying on the beach.A. whenever &emsp;B. though &emsp;C. for &emsp;D. whileShall we have our picnic tomorrow?_ it doesn’t rain.A.Until &emsp;&emsp;B. While &emsp;&emsp;C. Once &emsp;&emsp;D. IfThe Great Wall is _ tourist attraction that millions of people pour in every year.A. so a well-known &emsp;&emsp;&emsp;B. a so well-knownC. such well-known a &emsp;&emsp;D. such a well-knownOwen wouldn’t eat anything _ he cooked it himself.A. until &emsp;&emsp;B. since &emsp;&emsp;C. unless &emsp;&emsp;D. while答案1.C 2.D 3.C 4.D 5.A 6.D 7.D 8.D 9.C","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充(复合句/定语从句)","slug":"简单句的补充-复合句-定语从句","date":"2018-12-07T14:33:54.000Z","updated":"2018-12-10T08:25:02.792Z","comments":true,"path":"简单句的补充-复合句-定语从句.html","link":"","permalink":"https://me.obey.fun/简单句的补充-复合句-定语从句.html","excerpt":"","text":"第二章 定语从句1. 定语从句的含义：一个句子作定语，去修饰限定名词。2. 定语从句的写法：先把主句和从句写出两个句子，再把从句合并进去修饰限定名词。This is the 我梦想很多年的 job.This is the job. I have dream of the job for years.This is the job Which I have dreamed of for years.&emsp;&emsp;&emsp;&emsp;&emsp;↓&emsp;&emsp;&emsp;↓&emsp;&emsp;先行词 关系词&emsp;&emsp;关系词如何选择？&emsp;&emsp;&emsp;&emsp;看先行词！&emsp;先行词 = ？物人人的/物的时间地点原因&emsp;关系词 = ？which/thatwho/whom/thatwhosewhenwherewhy练习关系词的选择：1. I have a class begins at 8:00 am.2. The lawyer my brother called didn’t answer the phone.3. My daughter asked me a question I couldn’t answer.4. The people sat in the stadium cheered for the home team.5. Leo is the student bike was stolen.6. Australia is one of the few countries people drive on the left.7. Sunday is the day people usually don’t go to work.8. Is there any particular reason you can’t come?答案1. which/that 2. 不填/whom/that 3. 不填/that/which 4. who5. whose 6. where 7. when 8. why练习写定语从句1. I lost the book .&emsp;我弄丢了上周从图书馆借的书。2. The woman was feeding pigeons.&emsp;我在公园看见的那位女士正在喂鸽子。3. The bus is usually very crowed.&emsp;我每天上学坐的那辆公交车总是很拥挤。答案1. which/that/不填 I borrowed from the library 2. who/that/whom/不填 I saw in the park 3. which/that/不填 I take every day to school3. 定语从句的分类：I met your friend who is staying in Paris.&emsp;&emsp;&emsp;&emsp;限定性定语从句I met your mother,who is staying in Paris.&emsp;&emsp;&emsp;&nbsp;非限定性定语从句This is the wall which they built last week.This is the Great Wall, which is world-famous.练习（填入逗号和关系词）:1. He came from Beijing is the capital of China.(,which)2. He came from a city is in the north of China.(which/that)3. This is the businessman we are cooperating with.(who/whom/that/不填)4. This is Bill Gates many people know as the richest amn.(,whom)注意：非限定性定语从句不仅可以修饰前面的名词，还可以修饰前面的整句话。The company will get back to you in three days,which is one of the typical rules.补充：介词提前的定语从句This is the job which/that/X I have dreamed of for years.This is the job of which I have dreamed of for years.Humans have the ability to modify the environment in which they live.The theory on which it is based may be right.","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充(复合句/名词性从句)","slug":"简单句的补充-复合句-名词性从句","date":"2018-12-06T14:15:41.000Z","updated":"2018-12-10T08:25:12.446Z","comments":true,"path":"简单句的补充-复合句-名词性从句.html","link":"","permalink":"https://me.obey.fun/简单句的补充-复合句-名词性从句.html","excerpt":"","text":"第一章 名词性从句一、宾语从句1. 宾语从句的含义：一个句子作宾语，放在另一个句子（主句）里。2. 宾语从句的写法：&emsp;① 陈述句变成宾语从句？You are right.&emsp;&emsp;&emsp;&emsp;↓&emsp;&emsp;&emsp;&emsp;&emsp;I know __.I know (that) you are right.&emsp;② 特殊疑问句变成宾语从句？What will she say?&emsp;&emsp;&emsp;&emsp;↓&emsp;&emsp;&emsp;I know _.I know what she will say.&emsp;③ 一般疑问句变成宾语从句？Is he happy?&emsp;&emsp;&emsp;&emsp;↓&emsp;&emsp;&emsp;&emsp;&emsp;I know __.I know whether/if he is happy.总结：宾语从句的写法____ + ___&emsp;&emsp;(词 + 陈述句)练习：填入宾语从句的连接词1. 我承诺我会帮助你。&emsp;I promise I will help you.2. 你从来没告诉过我，你对我电脑做了什么。&emsp;You never told me you had done to my computer.3. 我想知道什么时候我们将会出发。&emsp;I wonder we will set out.4. 他们不知道他们是否会按时完成工作。&emsp;They don’t know they will finish the work on time.5. 你能告诉我什么时候我们将会出发吗？&emsp; Can you tell me ?答案1. that 2. what 3. when 4. whether 5. when we’ll set out3.宾语从句的位置：名词性从句：6. we know *.7. The big news is *.8. * is big news.9. We know the big news *.宾语从句：1. I don’t know when you will finish the work.No one tells me when you will finish the work.2. I worry about whether I hurt her feelings.3. Are you positive (that) you’ve never seen that man before.二、表语从句My concern is that people don’t care about others.The question remains whether people will buy it.三、同位语从句一个句子作同位语，解释说明 n.位置：需要解释的抽象 n.后。(fact, idea, news, dream, suggestion, advice, report …)最常用的是：“that+陈述句”这种 (注意： that不作成分，但不能省略)我不怀疑他将会帮我的忙。I have no doubt that he will help me.我支持这种论据, 校车问题必须被严肃对待。I support the argument that the problems of school buses must be taken seriously.四、主语从句我们是否将会去露营取决于天气。位置1：句首Whether we will go camping depends on the weather.位置2：句尾(句首用形式主语it)It depends on the weather whether we will go camping.注意：两种位置，意思相同。但更常用的是位于句尾的主语从句。练习： 填入连接词， 并判断是哪种名词性从句。1. ____ Barbara Jones offers to her fans is honesty and happiness.A. Which &emsp;&emsp;B. What &emsp;&emsp;C. That &emsp;&emsp;D. Whom2. We’ve offered her the job, but I don’t know ___ she’ll accept it.A. where &emsp;&emsp;B. what &emsp;&emsp;C. whether &emsp;&emsp;D. which3. Our teachers always tell us to believe in __ we do and who we are if we want to succeed.A. why &emsp;&emsp;B. how &emsp;&emsp;C. what &emsp;&emsp;D. which4. Modern science has given clear evidence ___ smoking can lead to many diseases.A. what &emsp;&emsp;B. which &emsp;&emsp;C. that &emsp;&emsp;D. where5. It was never clear ____ the man hadn’t reported the accident sooner.A. that &emsp;&emsp;B. how &emsp;&emsp;C. when &emsp;&emsp;D. why6. It is still under discussion ___ the old bus station should be replaced with a modern hotel or not.A. whether &emsp;&emsp;B. when &emsp;&emsp;C. which &emsp;&emsp;D. where7. I am afraid he’s more of a talker than a doer, which is ___ he never finishes anything.A. that &emsp;&emsp;B. when &emsp;&emsp;C. where &emsp;&emsp;D. why8. These wild flowers are so special that I would do __ I can to save them.A. whatever &emsp;&emsp;B. which &emsp;&emsp;C. that &emsp;&emsp;D. whichever答案1. B 主语从句 &emsp; 2. C 宾语从句 &emsp; 3. C 宾语从句 &emsp; 4. C 同位语从句5. D 主语从句 &emsp; 6. A 主语从句 &emsp; 7. D 表语从句 &emsp; 8. A 宾语从句","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充(并列句)","slug":"简单句的补充-并列句","date":"2018-12-05T13:53:28.000Z","updated":"2018-12-10T08:24:53.130Z","comments":true,"path":"简单句的补充-并列句.html","link":"","permalink":"https://me.obey.fun/简单句的补充-并列句.html","excerpt":"","text":"一、并列句的构成多件事（多个简单句）之间同等重要，用并列连词连接起来。四六级常用的并列连词有：1）&emsp;&emsp;&emsp;表示顺接：…and…;both…and…;not only…,but…as well/but also…2）&emsp;&emsp;&emsp;表示转折：but;yet;while3）&emsp;&emsp;&emsp;表示选择：…or…;either…or…;neither…nor…4）&emsp;&emsp;&emsp;表示因果：…for…（原因）;…so…（结果）二、并列句的省略I am a teacher and I like English.I am a teacher and like English.I am lying in bed and I am reading a book.I am lying in bed and reading a book.I want to leave and I want to go abroad.I want to leave and to go abroad.and(平行结构)练习1. You can stay at home go out to play. It doesn’t matter.A.either,or&emsp;&emsp;B.neither,nor&emsp;&emsp;C.both,and&emsp;&emsp;D.not only,but also2. We bought her a birthday present,_ she likes it very much.A.so&emsp;&emsp;&emsp;B.or&emsp;&emsp;&emsp;C.and&emsp;&emsp;&emsp;D.but3. _ you _ he is able to ski,but I am.A.both,and&emsp;&emsp;B.either,or&emsp;&emsp;C.neither,nor&emsp;&emsp;D.between,and4. The doctor tried their best to save the patient’s life,_failed.A.or&emsp;&emsp;B.so&emsp;&emsp;C.but&emsp;&emsp;D.because5. I could speak _ Japanese _ Chinese,so I had to talk with him in English.A.not only,but also&emsp;&emsp;B.both,and&emsp;&emsp;C.neither,norD.either,or6. I like pop music,but _ my father _ my mother likes it.A.both,and&emsp;&emsp;B.either,or&emsp;&emsp;C.neither,nor&emsp;&emsp;D.not only,but also7. Tom,keep away from the fire, you will get burnt.A.and&emsp;&emsp;B.so&emsp;&emsp;C.or&emsp;&emsp;D.but8. I thought we’d be late for the concert,__ we ended up getting there ahead of time.A.but&emsp;&emsp;B.or&emsp;&emsp;C.so&emsp;&emsp;D.for答案：第一题A第二题C第三题C第四题C第五题C第六题C第七题C第八题A","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的核心变化（同位语/插入语）","slug":"简单句的核心变化（同位语-插入语）","date":"2018-12-04T12:22:05.000Z","updated":"2018-12-10T08:25:50.234Z","comments":true,"path":"简单句的核心变化（同位语-插入语）.html","link":"","permalink":"https://me.obey.fun/简单句的核心变化（同位语-插入语）.html","excerpt":"","text":"三、同位语/插入语同位语，解释说明前面名词，与名词相同，说的是一件事。My teacher,Mr. Lee,is coming to the meeting.插入语，插入的补充说明，与前后无关。My teacher,together with his colleagues,is coming to the meeting.All their lives, today’s young women have been pushed to embrace both perfection and passion to pursue science and sports,math and theater and do it all as well as they possibly can.2014.06 CET4Confronted with such facts, some Swedish activists and legislators are demanding more extreme and far-reaching measures,such as replacing male and female pronouns with neutral alternative and monitoring children more closely to correct them when they gravitate toward gendered play.2014.06 CET6","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充（非谓语动词）","slug":"简单句的补充（非谓语动词）","date":"2018-12-03T13:58:09.000Z","updated":"2018-12-16T13:45:45.110Z","comments":true,"path":"简单句的补充（非谓语动词）.html","link":"","permalink":"https://me.obey.fun/简单句的补充（非谓语动词）.html","excerpt":"","text":"二、非谓语动词非谓语动词共3种doing表示主动done表示被动to do表示目的Passing planes can be heard night and day.The teacher came into the classroom,holding a book in his hand.He bought a used car.The teacher came into the classroom, followed by five students.I have a lot of homework to do.I am coming to see you.练习：_, you need to give all you have and try your best.A. Being a winner &emsp;&emsp;&emsp;B. To be a winnerC. Being a winner&emsp;&emsp;&emsp;D. Having been a winner_ into English, the sentence was found to have an entirely different word order.A. Translating&emsp;&emsp;&emsp;&nbsp;B. TranslatedC. To translate&emsp;&emsp;&emsp;D. Having translatedPeter received a letter just now _his grandma would come to see him soon.A. said&emsp;&emsp;&emsp;&emsp;&nbsp;B. saysC. saying&emsp;&emsp;&emsp;D. to say_ an important role in a new movie, Andy has a chance to become famous.A. Offer&emsp;&emsp;&emsp;&emsp;&nbsp;B. OfferingC. Offered&emsp;&emsp;&emsp;D. To offerThe island, __ to the mainland by a bridge,is easy to go to.A. joining&emsp;&emsp;&emsp;B. to joinC. joined&emsp;&emsp;&emsp;D. having joined","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的补充(限定词/形容词/介词短语)","slug":"简单句的补充-限定词-形容词-介词短语","date":"2018-12-02T14:34:56.000Z","updated":"2018-12-10T08:25:23.493Z","comments":true,"path":"简单句的补充-限定词-形容词-介词短语.html","link":"","permalink":"https://me.obey.fun/简单句的补充-限定词-形容词-介词短语.html","excerpt":"","text":"一、限定词/形容词/介词短语Girls play games.Girls are playing games.Lovely girls are playing games happily.Thousands of Lovely girls are playing games very happily.After class thousands of Lovely girls are playing games very happily on the playground.常见介词prep. :in on at / from to / into onto / with without / of / by / for / about其他介词 :before after / since until / during / between among / across through / against / like as","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的核心变化（主语/宾语/表语的变化）","slug":"简单句的核心变化（主语-宾语-表语的变化）","date":"2018-12-01T14:44:37.000Z","updated":"2018-12-10T08:26:07.920Z","comments":true,"path":"简单句的核心变化（主语-宾语-表语的变化）.html","link":"","permalink":"https://me.obey.fun/简单句的核心变化（主语-宾语-表语的变化）.html","excerpt":"","text":"(二)主语/宾语/表语的变化1. 名词/代词Most graduates always want a big-firm job.She is the leader of the organization.They gave us a good impression.2. doing/to doLaughing probably has great influence on health.To laugh probably has great influence on health.It probably has great influence on health to laugh.Having only a foggy view of the future is of little good.It is no use to talk about dreams without trying.We enjoy reading books in the library.The members of the board decide to vote against the new plan.Our main goal is to finish the task on time.3. 多个并列Science and technology will develop the process of society.Social science disciplines include geography, economics, political science, and psychology.That doesn’t mean sitting down and doing nothing at all.&emsp;&emsp;n. + v.名词/代词&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;动词的时态doing&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;动词的语态to do&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;动词的情态多个并列&emsp;&emsp;&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;动词的否态","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的核心变化（情态）","slug":"简单句的核心变化（情态）","date":"2018-11-30T12:47:34.000Z","updated":"2018-12-15T14:07:19.892Z","comments":true,"path":"简单句的核心变化（情态）.html","link":"","permalink":"https://me.obey.fun/简单句的核心变化（情态）.html","excerpt":"","text":"3. 情态用法：情态动词 + 动词原型情态动词的人称变化无情态动词的动态变化有限情态动词变否定/疑问四六级常用的情态动词有：&emsp;现在时&emsp;&emsp;过去时&emsp;must无cancouldwillwouldshallshouldmaymightmust “必须” &emsp;can/could“能够，可以”&emsp;will/would“愿意/将要”may/might“可以，可能”&emsp;should“应该”1 情态动词表示情态We must finish the work within a week.Air pollution must be taken seriously.The government can solve the problem of water pollution.Tony could walk when he was only one year old.Will you marry me?I will travel abroad with my family.Potential buyers would cheer for lower interest rates.To some extent.expressions may influence emotions.Such bodily reaction might help moderate the work stress.Students should work hard to pass the exams.Those sick people should seek help from doctors.2 情态动词表示推测The details may be unknowable.Such searches must take years.The loss of patience can potentially have a damaging impact on our professional and personal wellbeing.The way of saying those things may have led to misunderstanding.Now something similar could be happening in the South Africa.练习：In order to be a good salesclerk, you (must not/will not) be rude to a customer.This pie is very good. You (should/must)try a piece.Rice (should/must/may) have water in order to grow.Don’t be nervous. I think you (can/must) make it.I am not sure. Probably he (may/should) come later.第一题1.must not第二题2.should第三题3.must/should第四题4.can第五题5.may","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的核心变化（语态）","slug":"简单句的核心变化（语态）","date":"2018-11-29T14:28:19.000Z","updated":"2018-12-10T08:25:56.817Z","comments":true,"path":"简单句的核心变化（语态）.html","link":"","permalink":"https://me.obey.fun/简单句的核心变化（语态）.html","excerpt":"","text":"2.语态n. + v.动词的时态动词的语态动词的情态谓语动词的变化–&gt;语态被动语态狗吃了那个蛋糕。The dog ate the cake.?吃了那个蛋糕。—-&gt;蛋糕被吃了。狗吃了那个蛋糕。主语&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;宾语蛋糕被狗吃了。被动适用范围 1：及物动词。 2：不及物动词+介词。被动语态 be + done备注：be表示被动的时间 (把be变成对应的各种形态), 还表达主语单复数。done 表示被动的动作教师每天都打扫。Classrooms are cleaned(clean) every day.一座新的大楼去年建造的。A new building was built(build) last year.与时态相结合被动语态&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;be + done他每天被打。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;He is beaten every day.他昨天被打了。&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;He was beaten yesterday.他明天将要被打。&emsp;&emsp;&emsp;&emsp;&emsp;He will be beaten tomorrow.他现在正在被打。&emsp;&emsp;&emsp;&emsp;&emsp;He is being beaten.(现在进行时的被动am/is/are + being done)他现在已经被打了。&emsp;&emsp;&emsp;&emsp;He has been beaten.(现在完成时的被动have/has + been done)Our morning paper is read(read) by over 200,000 people every day.Last night my favorite TV program was interrupted(interrupt) by a special news bulletin.His bike will be repaired(repair) by his grandfather tomorrow.The new machine has been used(use) in our factory for two week.与情态动词想结合被动语态&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;be + donePlanes are heard.Planes can be heard.Planes could be heard.Planes may be heard.Planes must be heard.这封信必须马上寄出。The letter must be sent immediately.天气不能被人们所控制。Weather cannot be controlled by people.","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"简单句的核心变化（时态）","slug":"简单句的核心变化（时态）","date":"2018-11-27T02:22:00.000Z","updated":"2018-12-15T13:40:07.582Z","comments":true,"path":"简单句的核心变化（时态）.html","link":"","permalink":"https://me.obey.fun/简单句的核心变化（时态）.html","excerpt":"","text":"二、简单句的核心变化(一)谓语动词的变化&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n. + v.动词的时态动词的语态动词的情态动词的否定1. 时态：时态过去现在将来过去将来一般did/was/weredo/doeswill/am/is/are going to + V.原型would/were/was going to + V.原型进行be + doingbe + doingbe + doingbe + doing完成had + donehave/has+done&emsp;&emsp;完成进行&emsp;have/has been + doing&emsp;&emsp;一般过去时 Simple Past形式：V.过去式(did/was/were)用法：过去的事、过去的动作(无关现在)例子：He was a student.He liked music.She had a boyfriend.变否定或者疑问He was happy.He liked English.He was not happy.He did not like English.Was he happy?Did he like English?What was he?What did he like?补充：&emsp;V.过去式V.过去分词looklookedlookedbuyboughtboughtseesawseeneatateeatenV.过去式&nbsp;&nbsp;&emsp;丨V.过去分词一般过去时&nbsp;&nbsp;丨完成时&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丨被动语态&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;丨不做谓语一般现在时 Simple Present形式：V.原型/V.第三人称单数(do/does)You like English.He likes English.用法：1.现在经常性习惯性的动作We have the English class every day.He often gets up late.2.现在的状态I am a teacher.We are in China.3.永恒The earth is round.The earth moves around the sun.Knowledge is power.Practice makes perfect.变否定或者疑问He is happy.You like English.He likes English.He is not happy.You do not like English.He does not like English.Is he happy?Do you like English?Does he like English?How is he?What do you like?What does he like?补充：与频率连用(every,once a week,twice a month,three times a …)alwaysusually,often,frequentlysometimes,occasionallyseldom,hardlynever一般将来时 Simple Future形式：Will/am/is/are going to + V.原型用法：将来的事(现在的将来)I will make a new plan tomorrow.We are going to study abroad next year.变否定或者疑问He will leave.He is going to leave.He will not leave.He is not going to leave.Will he leave?Is he going to leave?What will he?What is he going to do?过去将来时 Past Future形式：Would/was/were going to + V.原型用法：将来的事(过去的将来)I said that I would become a cook in the future.Tony finished his work,and then he would leave for London.三种进行时 Progressive TenseAt 10 o’clock yesterday some students were taking an exam in their classrooms.We are taking about the water pollution.A great many candidates will be meeting here at this time tomorrow.现在完成时 Present Perfect Tense形式：have/has + done用法：现在全部完成 He has left.现在部分完成 We have studied English for ten years.过去完成时 Past Perfect Tense形式：had + done用法：过去的之前When he got there,she had left.She was not there.完成进行时 = “完成” + “进行” =**时间的之前，强调进行的过程角度相同都表示“现在的之前”两种时态现在完成时have/has + done现在完成进行时have/has been + doing强调不同强调结果(做完与否都可以)强调过程例句We have not won the match.We have been working hardfor several months.They on the program for almost one week before I joined them, and now we are still working on it as no good results so far.A.have been working;have come outB.had worked;came outC.had been working;have come outD.have worked;are coming out显示答案答案：C","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]},{"title":"Github提交表情指南","slug":"Github表情提交指南","date":"2018-11-26T09:35:51.000Z","updated":"2019-03-03T07:14:14.913Z","comments":true,"path":"Github表情提交指南.html","link":"","permalink":"https://me.obey.fun/Github表情提交指南.html","excerpt":"","text":"Github提交表情指南emojiemoji 代码commit 说明:art:(调色板):art:改进代码结构/代码格式:zap:(闪电):racehorse:(赛马):zap: :racehorse:提升性能:fire:(火焰):fire:移除代码或文件:bug:(bug):bug:修复bug:ambulance:(急救车):ambulance:重要补丁:sparkles:(火花):sparkles:引入新功能:memo:(备忘录):memo:撰写文档:rocket:(火箭):rocket:部署功能:lipstick:(口红):lipstick:更新 UI 和样式文件:tada:(庆祝):tada:初次提交:white_check_mark:(白色复选框):white_check_mark:增加测试:lock:(锁):lock:修复安全问题:apple:(苹果:apple:修复 macOS 下的问题:penguin:(企鹅):penguin:修复 Linux 下的问题:checkered_flag:(旗帜):checked_flag:修复 Windows 下的问题:bookmark:(书签):bookmark:发行/版本标签:rotating_light:(警车灯):rotating_light:移除 linter 警告:construction:(施工):construction:工作进行中:green_heart:(绿心):green_heart:修复 CI 构建问题:arrow_down:(下降箭头):arrow_down:降级依赖:arrow_up:(上升箭头):arrow_up:升级依赖:construction_worker:(工人):construction_worker:添加 CI 构建系统:chart_with_upwards_trend:(上升趋势图):chart_with_upwards_trend:添加分析或跟踪代码:hammer:(锤子):hammer:重大重构:heavy_minus_sign: (减号):heavy_minus_sign:减少一个依赖:whale:(鲸鱼):whale:Docker 相关工作:heavy_plus_sign: (加号):heavy_plug_sign:增加一个依赖:wrench:(扳手):wrench:修改配置文件:globe_with_meridians: (地球):globe_with_meridians:国际化与本地化:pencil2:(铅笔):pencil2:修复 typo","categories":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"}],"tags":[{"name":"Github","slug":"Github","permalink":"https://me.obey.fun/tags/Github/"}],"keywords":[{"name":"前端","slug":"前端","permalink":"https://me.obey.fun/categories/前端/"}]},{"title":"简单句","slug":"简单句","date":"2018-11-25T08:06:50.000Z","updated":"2019-05-04T13:39:17.502Z","comments":true,"path":"简单句.html","link":"","permalink":"https://me.obey.fun/简单句.html","excerpt":"","text":"第一章：简单句的核心一、简单句的核心构成简单句一个句子（一件事）世界是物质的，物质是运动的 n. + v.主语 + 谓语n. + 谓语 v.一主一谓，谓语动词的不同决定简单句的不同构成。例子I swim.I like English区分vt./vi.1)意思2)介词(prep.)I like English.The bride kissed the groom.Birds fly in the sky.We walked on the street yesterday.You look at me.介宾结构They offered me a vacant post.they offered a vacant post to me.I bought you a present.I bought a present for you.I find HongKong ???I find HongKong very beautiful.I find HongKong a place for shopping.我非常高兴。I very happy. ???I am very happy.主系表系动词be动词 （单独）“变得” get become turn go grow感官动词 look sound smell taste feel“看 / 听 / 闻 / 尝 / 感觉起来…..”keep remain/seem appearFor example:I ask you a question. 主谓双宾You answer. 主谓I love you. 主谓宾You make my life complete. 主谓宾补I am happy. 主系表主语 + 谓语 + ?","categories":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}],"tags":[{"name":"English-Syntax","slug":"English-Syntax","permalink":"https://me.obey.fun/tags/English-Syntax/"}],"keywords":[{"name":"英语","slug":"英语","permalink":"https://me.obey.fun/categories/英语/"}]}]}